<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Hack | O's World]]></title>
  <link href="http://orinchen.github.io/blog/categories/hack/atom.xml" rel="self"/>
  <link href="http://orinchen.github.io/"/>
  <updated>2014-12-23T14:47:02+08:00</updated>
  <id>http://orinchen.github.io/</id>
  <author>
    <name><![CDATA[Orin Chen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用 Class-dump-z 和 Clutch 分析 iOS App]]></title>
    <link href="http://orinchen.github.io/blog/2014/02/10/crack-ios-apps-with-clutch-and-class-dump-z/"/>
    <updated>2014-02-10T09:26:19+08:00</updated>
    <id>http://orinchen.github.io/blog/2014/02/10/crack-ios-apps-with-clutch-and-class-dump-z</id>
    <content type="html"><![CDATA[<h2>什么是 class-dump-z</h2>

<p>class dump 是一个命令行工具，用来监测存储在 Mach-O 二进制文件理的 Objective-C 运行时信息。它为类（class），分类（category）和协议（protocol）生成声明信息。这些信息与 otool -ov 命令提供的信息是一样的，但表示得更像正常的 Objective-C 的声明，所以它更紧凑，更易读。</p>

<p>class dump 有三个版本：class-dump, class-dump-x 和 class-dump-z。class-dump-z 是对 class-dump 和 class-dump-x 改进版，完全用C++重写，避免动态调用，使得 class-dump-z 比它的前任们快10倍左右。并且可以在 Linux，Mac, iPhone 上运行。</p>

<!--more-->


<h2>安装 class-dump-z</h2>

<p>class-dump-z 的安装十分简单。只要到<a href="https://code.google.com/p/networkpx/wiki/class_dump_z"><em>这里</em></a>下载最新的版本并解压，然后将 <code>mac_x86/class-dump-z</code> 拷贝到 <code>/usr/bin/</code> 目录中即可。</p>

<h2>尝试导出 App 代码信息</h2>

<p>class-dump-z 安装完成之后就可以开始 App Crack 工作。</p>

<p>首先使用iExploer(或iFunbox)打开真机的应用程序目录，打开 目标程序 xxxx.app 子目录，按照文件大小排序，找到一个与父目录同名的程序文件xxxx，这个就是编译后的主程序了，将它导出到 Mac 中。</p>

<p>然后在终端中输入命令：</p>

<pre><code class="bash">class-dump-z xxxx
</code></pre>

<p>然后会看到如下的提示信息和输出：</p>

<p><em>Warning: Part of this binary is encrypted. Usually, the result will be not meaningful. Try to provide an unencrypted version instead.</em></p>

<pre><code class="obj-c">/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

@protocol XXEncryptedProtocol_7c2bc
-(?)XXEncryptedMethod_63de7;
-(?)XXEncryptedMethod_64b92;
-(?)XXEncryptedMethod_64b86;
-(?)XXEncryptedMethod_64b7e;
-(?)XXEncryptedMethod_64b77;
-(?)XXEncryptedMethod_64311;
-(?)XXEncryptedMethod_64b63;
-(?)XXEncryptedMethod_64b52;
-(?)XXEncryptedMethod_64b43;
-(?)XXEncryptedMethod_64b3b;
-(?)XXEncryptedMethod_64b14;
-(?)XXEncryptedMethod_64af8;
-(?)XXEncryptedMethod_64ae7;
-(?)XXEncryptedMethod_64ae2;
-(?)XXEncryptedMethod_64add;
-(?)XXEncryptedMethod_63e09;
-(?)XXEncryptedMethod_64ad2;
-(?)XXEncryptedMethod_64acd;
-(?)XXEncryptedMethod_64ac4;
@optional
-(?)XXEncryptedMethod_64b9e;
@end
</code></pre>

<p>这明显不是我们想要的结果！原因是苹果会对所有发布到 App Store 上的 App 进行加密，简单的 class-dump-z 无法导出其代码信息！现在我们需要另外一个工具将目标 App 解密，这个工具就是 Clutch。</p>

<h2>什么是 Clutch</h2>

<p><a href="https://github.com/KJCracks/Clutch"><em>Clutch</em></a>是一个 iOS 工具，专门用来将手机中的 App 进行解密。安装 Clutch 首先要将设备越狱，而且由于 Clutch 是一个命令行工具，要想使用它还必在设备中须安装 MobileTerminal 或 OpenSSH。</p>

<h2>安装和配置 Clutch</h2>

<p>首先到<a href="https://github.com/KJCracks/Clutch/releases"><em>这里</em></a>下载 Clutch 的最新版本并将其拷贝到设备的 /usr/bin 目录中：</p>

<pre><code class="bash">scp scp Clutch-1.4.2 root@192.168.xxx.xxx:/usr/bin #拷贝文件
</code></pre>

<p>然后使用 ssh 连接到设备，重命名文件并设置权限：</p>

<pre><code class="bash">ssh root@192.168.100.158 #使用SSH连接设备
cd /usr/bin
mv Clutch-1.4.2 clutch #将 Clutch-1.4.2 重命名为 Clutch
chmod 0x777 clutch #修改 clutch 的权限
</code></pre>

<p>接着在 ssh 连接中使用 <code>Clucth -C</code> 命令，根据提示设置好 clutch 即可。</p>

<h2>使用 Clucth 解密 App</h2>

<p>经过上面的安装和设置 Clucth 已经可以正常使用了。在 ssh 连接中使用 <code>Clutch</code> 命令后会看到一个如下的 App 列表：</p>

<pre><code class="bash">Clutch 1.4.2
---------------------------------

1) AiCai
2) App
3) Articles
4) calendar
5) CalendarsLite
6) CarrotFantasy
7) ConverterInfinity
8) converti
9) Convertible
10) CYLS
</code></pre>

<p>在列表中找到需要解密的 App，记住前面的编号比如是 9，然后执行命令 <code>Clutch 9</code>稍等片刻就可完成对目标 App 的解密。</p>

<h2>再次尝试导出 App 代码信息</h2>

<p>提示完成之后，会看见解密后的 ipa 文件路径，将其拷贝到 Mac 中，修改后缀名为 zip 并解压。找到其中的主程序文件，再次使用命令 <code>class-dump-z xxxx</code>，就可以看到目标程序的头文件信息啦。</p>

<pre><code class="obj-c">/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

typedef struct _NSZone NSZone;

typedef struct CGPoint {
    float _field1;
    float _field2;
} CGPoint;

typedef struct CGSize {
    float _field1;
    float _field2;
} CGSize;

typedef struct CGRect {
    CGPoint _field1;
    CGSize _field2;
} CGRect;

typedef struct _NSRange {
    unsigned _field1;
    unsigned _field2;
} NSRange;

@protocol NSObject
-(id)description;
-(unsigned)retainCount;
-(id)autorelease;
-(oneway void)release;
-(id)retain;
-(BOOL)respondsToSelector:(SEL)selector;
-(BOOL)conformsToProtocol:(id)protocol;
-(BOOL)isMemberOfClass:(Class)aClass;
-(BOOL)isKindOfClass:(Class)aClass;
-(BOOL)isProxy;
-(id)performSelector:(SEL)selector withObject:(id)object withObject:(id)object3;
-(id)performSelector:(SEL)selector withObject:(id)object;
-(id)performSelector:(SEL)selector;
-(NSZone*)zone;
-(id)self;
-(Class)class;
-(Class)superclass;
-(unsigned)hash;
-(BOOL)isEqual:(id)equal;
@optional
-(id)debugDescription;
@end
</code></pre>

<h3><strong>ps:</strong></h3>

<ol>
<li>使用 <code>class-dump-z xxxx &gt; ./xxxx-classdump.txt</code> 可以将目标程序的代码信息导出到单个文本文件中方便查找。</li>
<li>使用 <code>class-dump-z -H -o xxxx ./SourceCode</code> 可以将目标程序的所有代码信息以头文件的形式输出到指定目录，每个类一个文件。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何查看第三方 App 的视图结构]]></title>
    <link href="http://orinchen.github.io/blog/2014/01/25/how-to-inspect-view-hierarchy-of-3rd-party-apps/"/>
    <updated>2014-01-25T15:48:49+08:00</updated>
    <id>http://orinchen.github.io/blog/2014/01/25/how-to-inspect-view-hierarchy-of-3rd-party-apps</id>
    <content type="html"><![CDATA[<p><a href="http://revealapp.com/"><strong>Reveal</strong></a> 和 <a href="http://sparkinspector.com/"><strong>Spark Inspector</strong></a> 是两款 iOS 上比较好用的 <strong>Inspector View Hierarchy</strong> 工具。它们能够将 App 界面的视图层次结构实时的展示出来，以便于调试分析，就好像用 <strong>FireBug</strong> 分析 Web 页面一样。</p>

<p>一般情况下，<strong>Reveal</strong> 和 <strong>Spark Inspector</strong> 都只能用在自己的项目中，因为必须在项目中包含他们的库文件。如果我们能够在没有源码的情况下使用 <strong>Reveal</strong> 或 <strong>Spark Inspector</strong> 分析他人的 App <strong>View Hierarchy</strong>，无疑是一个很好的学习途径。</p>

<!--more-->


<h2>越狱设备，安装软件</h2>

<p>如前面所说，一般情况下，<strong>Reveal</strong> 和 <strong>Spark Inspector</strong> 都只能用在自己的项目中，查看自己项目的 <strong>View Hierarchy</strong>。如果想要查看第三方 App 的 <strong>View Hierarchy</strong> 就必须让第三方软件去调用 <strong>Reveal</strong> 或 <strong>Spark Inspector</strong> 的动态库文件（<em>libReveal.dylib</em> 和 <em>SparkInspector.dylib</em>）。想要完成这个任务那就得使出非常手段了 &ndash; <strong>越狱！</strong>。</p>

<p>越狱完成后还需要安装两个软件：</p>

<ol>
<li><strong>OpenSSH</strong> &ndash; 可以让你在 <strong>Mac</strong> 上通过<strong>终端</strong>操作设备；</li>
<li><strong>Cydia Substrate</strong>（原名 <strong>Mobile Substrate</strong>）&ndash; 就是通过它让第三方 App 调用 <strong>Reveal</strong> 或 <strong>Spark Inspector</strong> 的动态库文件</li>
</ol>


<p>在 Cydia 中找到并安装它们。</p>

<h2>拷贝库文件</h2>

<p>设备越狱并安装好上面的两个软件之后，就可以将 <strong>Reveal</strong> 或 <strong>Spark Inspector</strong> 的库文件拷贝到设备中了。</p>

<p><strong>Reveal</strong> 使用如下命令：</p>

<pre><code class="bash">scp /Applications/Reveal.app/Contents/SharedSupport/iOS-Libraries/libReveal.dylib root@192.168.XXX.XXX:/Library/MobileSubstrate/DynamicLibraries
</code></pre>

<p><strong>Spark Inspector</strong> 使用如下命令：</p>

<pre><code class="bash ">scp "/Applications/Spark Inspector.app/Contents/Resources/Frameworks/SparkInspector.dylib" root@192.168.XXX.XXX:/Library/MobileSubstrate/DynamicLibraries
</code></pre>

<h2>创建 plist 文件</h2>

<p>将库文件拷贝到设备中之后，还需要创建相应的 plist 文件使其运行。
可以使用 iFunbox 打开目标 App，在根目录下找到 iTunesMetadata.plist，将 softwareVersionBundleId 项中的值记下来，然后创建文件 libReveal.plist 或者 SparkInspector.plist，将目标 App 的 BundleId 按照如下格式写好（Bundles 可以多个）:</p>

<pre><code class="js">{
    Filter = {
        Bundles = ("com.sina.weibo");
        Bundles = ("com.burbn.instagram");
    }
}
</code></pre>

<p>plist 文件创建完成之后将其拷贝到设备 <em>/Library/MobileSubstrate/DynamicLibraries</em> 目录中去：</p>

<pre><code class="bash">scp XXXXXXX.plist root@192.168.XXX.XXX:/Library/MobileSubstrate/DynamicLibraries
</code></pre>

<h2>完成！</h2>

<p>使用 <code>killall SpringBoard</code> 命令或者重启设备之后就可以使用 <strong>Reveal</strong> 或 <strong>Spark Inspector</strong> 查看目标程序的 <strong>View
 Hierarchy</strong> 了。</p>

<h2>可能出现的问题</h2>

<p>某些情况下可能出现重启设备后 <strong>Cydia Substrate</strong> 没用工作，<em>libReveal.dylib</em> 或 <em>SparkInspector.dylib</em> 没有加载。这时 <strong>Reveal</strong> 和 <strong>Spark Inspector</strong> 仍然无法工作。可以共通过下面的方法手动加载。</p>

<p><strong>Reveal</strong> 使用如下命令：</p>

<pre><code class="bash">launchctl setenv DYLD_INSERT_LIBRARIES /Library/MobileSubstrate/DynamicLibraries/libReveal.dylib
launchctl setenv DYLD_FORCE_FLAT_NAMESPACE ''
</code></pre>

<p><strong>Spark Inspector</strong> 使用如下命令：</p>

<pre><code class="bash">launchctl setenv DYLD_INSERT_LIBRARIES /Library/MobileSubstrate/DynamicLibraries/SparkInspector.dylib
launchctl setenv DYLD_FORCE_FLAT_NAMESPACE ''
</code></pre>

<p>当然也可以同时加载这两个 <strong><em>dylib</em></strong>，使用如下命令：</p>

<pre><code class="bash">launchctl setenv DYLD_INSERT_LIBRARIES /Library/MobileSubstrate/DynamicLibraries/libReveal.dylib:/Library/MobileSubstrate/DynamicLibraries/SparkInspector.dylib
launchctl setenv DYLD_FORCE_FLAT_NAMESPACE ''
</code></pre>

<p>然后使用 <code>killall SpringBoard</code> 命令之后就可以使用 <strong>Reveal</strong> 或 <strong>Spark Inspector</strong> 查看目标程序的 <strong>View
 Hierarchy</strong> 了。但是当设备重新启动之后还是得重新手动加载一次 <strong><em>dylib</em></strong>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 iOS 设备上安装和使用 OpenSSH]]></title>
    <link href="http://orinchen.github.io/blog/2014/01/15/install-and-use-openssh-on-ios/"/>
    <updated>2014-01-15T13:01:05+08:00</updated>
    <id>http://orinchen.github.io/blog/2014/01/15/install-and-use-openssh-on-ios</id>
    <content type="html"><![CDATA[<h2>什么是 OpenSSH</h2>

<p>OpenSSH 是一个在 Linux 下很实用的一个软件。iPhone 本身就是一个运行 BSD 系统（可认为是一种 Liunx）的硬件，因此，Cydia 的作者 Saurik 把 OpenSSH 这一软件移植到了 iOS 平台上，并且简化了安全认证密钥的繁琐，使之成为一款可以在 iPhone 上运行的 Cydia 软件。</p>

<!--more-->


<h2>OpenSSH 的用途</h2>

<p>OpenSSH 可以让你在 PC 或者 Mac 上远程输入命令操作 iOS 设备，免去使用 MobileTerminal 的不方便，同时，也是一种在多系统下管理 iPhone、iPad 系统文件的方法。</p>

<h2>安装和使用 OpenSSH</h2>

<p>要安装 OpenSSH 首先需要将设备越狱。越狱完成之后,就可以在 Cydia 中直接查找和安装 OpenSSH。安装完成之后就可以通过下面的步骤来将你的 Mac 连接到 iOS 设备。</p>

<ol>
<li>首先得保证你的 iOS 设备和 Mac 在同一局域网的同一网段中。</li>
<li>打开终端，输入 <code>ssh root@192.168.xxx.xxx</code></li>
<li>输入 iOS 设备密码，默认 alpine</li>
<li>等待连接，稍后，您就连接到您的iPhone、iPad上，可以执行 Unix 命令了。</li>
<li>还可以使用 Transmit 等软件来管理 iOS 设备的文件系统，非常方便。</li>
</ol>


<h2>可能出现的问题</h2>

<p>如果之前使用 Mac 终端连接过 iOS 设备，然后设备被还原，重新越狱，安装 OpenSSH。再次使用 终端连接 iOS 设备的时候会出现如下错误:</p>

<pre><code class="bash">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!
Someone could be eavesdropping on you right now (man-in-the-middle attack)!
It is also possible that a host key has just been changed.
The fingerprint for the RSA key sent by the remote host is
a3:63:1f:45:ed:91:3e:67:e3:d0:37:83:dd:24:83:f6.
Please contact your system administrator.
Add correct host key in /Users/orinchen/.ssh/known_hosts to get rid of this message.
Offending RSA key in /Users/orinchen/.ssh/known_hosts:10
RSA host key for 192.168.xxx.xxx has changed and you have requested strict checking.
Host key verification failed.
</code></pre>

<p>解决方法是，使用编辑器打开 <code>~/.ssh/known_hosts</code> 文件，删除 192.168.xxx.xxx 的相关 rsa的信息即可.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 MobileTerminal 修改 iOS 设备 Root 权限密码]]></title>
    <link href="http://orinchen.github.io/blog/2014/01/07/change-your-ios-root-password/"/>
    <updated>2014-01-07T12:59:32+08:00</updated>
    <id>http://orinchen.github.io/blog/2014/01/07/change-your-ios-root-password</id>
    <content type="html"><![CDATA[<h2>为什么要修改 root 密码</h2>

<p>iOS 设备越狱后，就拥有了完全的权限，你可以任意安装任意的软件，但是也存在一定的风险，因为默认的root密码是一样的&ndash;alpine，这种弱口令是很不安全的。而且如果不修改，别人也会拥有管理你的系统的权限，这样当你的设备在网络中时就造成你的设备很容易被入侵，或者在不安全陌生的环境中会感染病毒（例如3G环境），所以，为了以后安全，建议最好修改。</p>

<!--more-->


<h2>什么是 MobileTerminal</h2>

<p>MobileTerminal 是一款在iPhone、iPad等iOS设备中的终端管理软件，采用类似于命令行的非图形界接口理您的 iOS 设备的进程，以及运行一些专门为命令行下工作的软件，类似于 Mac 下的 Terminal。</p>

<h2>安装 MobileTerminal 并修改 root 密码</h2>

<p>要安装 MobileTerminal 首先需要将设备越狱。越狱完成之后,就可以在 Cydia 中直接查找和安装 MobileTerminal。安装完成之后就可以通过下面的步骤来修改你的 root 密码。</p>

<ol>
<li>运行 MobileTerminal。</li>
<li>输入 <code>su root</code> 提升到管理员权限</li>
<li>输入 <code>passwd</code> 然后根据提示输入新密码</li>
<li>完成！</li>
</ol>

]]></content>
  </entry>
  
</feed>
