<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[O's World]]></title>
  <link href="http://orinchen.github.io/atom.xml" rel="self"/>
  <link href="http://orinchen.github.io/"/>
  <updated>2014-12-23T14:47:02+08:00</updated>
  <id>http://orinchen.github.io/</id>
  <author>
    <name><![CDATA[Orin Chen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[在 ZSH 中调用 Sublime Text]]></title>
    <link href="http://orinchen.github.io/blog/2014/05/06/create-aliase-of-sublime-text-in-zsh/"/>
    <updated>2014-05-06T10:52:50+08:00</updated>
    <id>http://orinchen.github.io/blog/2014/05/06/create-aliase-of-sublime-text-in-zsh</id>
    <content type="html"><![CDATA[<h2>为Sublime Text 创建 symbolic link</h2>

<p>Terminal 不认识 Sublime Text，所以首先创建 symbolic link.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ln -s /Applications/Sublime<span class="se">\ </span>Text.app/Contents/SharedSupport/bin/subl /usr/local/bin/sublime
</span></code></pre></td></tr></table></div></figure>


<h2>在 .zshrc 文件里面使用 sublime</h2>

<p>创建完 symbolic link 后就可以在 .zshrc 里面调用 Sublime Text 了！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">alias </span><span class="nv">zshconfig</span><span class="o">=</span><span class="s2">&quot;sublime ~/.zshrc&quot;</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">ohmyzsh</span><span class="o">=</span><span class="s2">&quot;sublime ~/.oh-my-zsh&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">alias</span> -s <span class="nv">markdown</span><span class="o">=</span>sublime
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 7 交互式过渡]]></title>
    <link href="http://orinchen.github.io/blog/2014/04/11/ios7-interactive-transitions/"/>
    <updated>2014-04-11T10:04:52+08:00</updated>
    <id>http://orinchen.github.io/blog/2014/04/11/ios7-interactive-transitions</id>
    <content type="html"><![CDATA[<p>本文转载自:<a href="http://nonomori.farbox.com/post/ios-7-jiao-hu-shi-guo-du">NONOMORI</a></p>

<p>iOS 7 新加入了一个介于 ViewController 之间的过渡的实现方法。本文将介绍如何利用自定义的过渡实现如图所示效果。</p>

<p><img src="http://orinchen.github.io/images/posts/2014-04-11-ios7-interactive-transitions/001.gif"></p>

<p>在这个例子中，我们将在两个 ViewConrtoller 的转换过程中加入一个自定义的过渡。DSLFirstViewController 是我们的第一个 viewController，其包含一个 CollectionView，每一个 Cell 都包含一张图片和一个标签。DSLSecondViewController 是我们的第二个 viewController，其上有一张图和一个标签。我们希望，当用户点击 DSLFirstViewController 的 Cell 后能平滑过渡到 DSLSecondViewController 中去。</p>

<p>这个例子源代码已发布在 <a href="https://github.com/PeteC/InteractiveViewControllerTransitions">GitHub</a>。</p>

<!--more-->


<h2>实现自定义过渡</h2>

<p>过渡是由使用了 UIViewControllerAnimatedTransitioning 协议的对象来实现的。我们现在新建一个继承自 NSObject 的类，取名 DSLTransitionFromFirstToSecond。将上面提到的协议加入该类，然后就可以使用他来实现我们的两个类的过渡效果了。</p>

<p>在这个对象中，有两个方法需要实现：<code>animateTransition:</code> 和 <code>transitionDuration:</code>。后者相当直观，就是这个过渡的持续时间，我们只要简单返回一个 NSTimeInterval 值就行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">NSTimeInterval</span><span class="p">)</span><span class="nf">transitionDuration:</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="bp">UIViewControllerContextTransitioning</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">transitionContext</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="mf">0.3</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>animateTransition: 方法是定义两个 ViewController 之间过渡效果的地方。这个方法会传递给我们一个参数，该参数可以让我们访问一些实现过渡所必须的对象。</p>

<ul>
<li>viewControllerForKey：我们可以通过他访问过渡的两个 ViewController。</li>
<li>containerView：两个 ViewController 的 containerView。</li>
<li>initialFrameForViewController 和 finalFrameForViewController 是过渡开始和结束时每个 ViewController 的 frame。</li>
</ul>


<p>现在我们开始这个方法的具体实现。首先我们需要得到过渡前后两个 ViewController 以及他们的 containerView 的指针。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">animateTransition:</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="bp">UIViewControllerContextTransitioning</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">transitionContext</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">DSLFirstViewController</span> <span class="o">*</span><span class="n">fromViewController</span> <span class="o">=</span> <span class="p">(</span><span class="n">DSLFirstViewController</span><span class="o">*</span><span class="p">)[</span><span class="n">transitionContext</span> <span class="nl">viewControllerForKey</span><span class="p">:</span><span class="n">UITransitionContextFromViewControllerKey</span><span class="p">];</span>
</span><span class='line'>    <span class="n">DSLSecondViewController</span> <span class="o">*</span><span class="n">toViewController</span> <span class="o">=</span> <span class="p">(</span><span class="n">DSLSecondViewController</span><span class="o">*</span><span class="p">)[</span><span class="n">transitionContext</span> <span class="nl">viewControllerForKey</span><span class="p">:</span><span class="n">UITransitionContextToViewControllerKey</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">UIView</span> <span class="o">*</span><span class="n">containerView</span> <span class="o">=</span> <span class="p">[</span><span class="n">transitionContext</span> <span class="n">containerView</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来，获得我们需要过渡的 Cell，并且对它上面的 imageView 截图。这个截图就会用在我们的过渡效果中。同时，我们将这个 imageView 本身隐藏，从而让用户以为是 imageView 在移动的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 获得cell上imageView的截图</span>
</span><span class='line'><span class="n">DSLThingCell</span> <span class="o">*</span><span class="n">cell</span> <span class="o">=</span> <span class="p">(</span><span class="n">DSLThingCell</span><span class="o">*</span><span class="p">)[</span><span class="n">fromViewController</span><span class="p">.</span><span class="n">collectionView</span> <span class="nl">cellForItemAtIndexPath</span><span class="p">:[[</span><span class="n">fromViewController</span><span class="p">.</span><span class="n">collectionView</span> <span class="n">indexPathsForSelectedItems</span><span class="p">]</span> <span class="n">firstObject</span><span class="p">]];</span>
</span><span class='line'><span class="bp">UIView</span> <span class="o">*</span><span class="n">cellImageSnapshot</span> <span class="o">=</span> <span class="p">[</span><span class="n">cell</span><span class="p">.</span><span class="n">imageView</span> <span class="n">snapshotView</span><span class="p">];</span>
</span><span class='line'><span class="n">cellImageSnapshot</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="p">[</span><span class="n">containerView</span> <span class="nl">convertRect</span><span class="p">:</span><span class="n">cell</span><span class="p">.</span><span class="n">imageView</span><span class="p">.</span><span class="n">frame</span> <span class="nl">fromView</span><span class="p">:</span><span class="n">cell</span><span class="p">.</span><span class="n">imageView</span><span class="p">.</span><span class="n">superview</span><span class="p">];</span>
</span><span class='line'><span class="n">cell</span><span class="p">.</span><span class="n">imageView</span><span class="p">.</span><span class="n">hidden</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后，我们对第二个 viewController 进行设置，将它的放到过渡后的位置，但让他完全透明，我们会在过渡时给它一个淡入的效果。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 初始化一开始的状态</span>
</span><span class='line'><span class="n">toViewController</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="p">[</span><span class="n">transitionContext</span> <span class="nl">finalFrameForViewController</span><span class="p">:</span><span class="n">toViewController</span><span class="p">];</span>
</span><span class='line'><span class="n">toViewController</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">toViewController</span><span class="p">.</span><span class="n">imageView</span><span class="p">.</span><span class="n">hidden</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">containerView</span> <span class="nl">addSubview</span><span class="p">:</span><span class="n">toViewController</span><span class="p">.</span><span class="n">view</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">containerView</span> <span class="nl">addSubview</span><span class="p">:</span><span class="n">cellImageSnapshot</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在来做 view 的动画，移动之前生成的 imageView 的截图，淡入第二个 viewController 的 view。在动画结束后，移除 imageView 的截图，让第二个 view 完全呈现。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="bp">UIView</span> <span class="nl">animateWithDuration</span><span class="p">:</span><span class="n">duration</span> <span class="nl">animations</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="c1">// 淡入第二个viewController的view</span>
</span><span class='line'>    <span class="n">toViewController</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 将截图放到第二个viewController的imageView上</span>
</span><span class='line'>    <span class="bp">CGRect</span> <span class="n">frame</span> <span class="o">=</span> <span class="p">[</span><span class="n">containerView</span> <span class="nl">convertRect</span><span class="p">:</span><span class="n">toViewController</span><span class="p">.</span><span class="n">imageView</span><span class="p">.</span><span class="n">frame</span> <span class="nl">fromView</span><span class="p">:</span><span class="n">toViewController</span><span class="p">.</span><span class="n">view</span><span class="p">];</span>
</span><span class='line'>    <span class="n">cellImageSnapshot</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">frame</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="nl">completion</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="kt">BOOL</span> <span class="n">finished</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Clean up</span>
</span><span class='line'>    <span class="n">toViewController</span><span class="p">.</span><span class="n">imageView</span><span class="p">.</span><span class="n">hidden</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cell</span><span class="p">.</span><span class="n">hidden</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">cellImageSnapshot</span> <span class="n">removeFromSuperview</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 声明过渡结束</span>
</span><span class='line'>    <span class="p">[</span><span class="n">transitionContext</span> <span class="nl">completeTransition</span><span class="p">:</span><span class="o">!</span><span class="n">transitionContext</span><span class="p">.</span><span class="n">transitionWasCancelled</span><span class="p">];</span>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>记住，一定别忘了在过渡结束时调用 <code>completeTransition:</code> 这个方法。</p>

<h2>使用自定义过渡</h2>

<p>到目前为止，我们实现了自定义过渡对象，不过我们并没有告知 UINavigationController 去使用它。接下来，将介绍我们如何做到这一点。</p>

<p>当一个新的 viewController 被推入或者弹出它的导航堆，它将询问它的代理，是否有一个使用了 UIViewCOntrollerAnimatedTransitioning 协议的对象，我们现在要做的，就是提供这个对象使得过渡能够展现。</p>

<p>首先是把 UINavigationControllerDelegate 协议加入到 DSLFirstViewController 中去。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">DSLFirstViewController</span> <span class="p">()</span><span class="o">&lt;</span><span class="bp">UINavigationControllerDelegate</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们还需要给 navigationController 的 delegate 赋值。一个比较理想的地方是在 <code>viewDidAppear:</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidAppear:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="nl">viewDidAppear</span><span class="p">:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 让我自己变成navigationController的delegate</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">navigationController</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>别忘了在 view 消失时，把 navigationController 的 delegate 去除。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewWillDisappear:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="nl">viewWillDisappear</span><span class="p">:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 我不再是 navigationController 的代理啦</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">navigationController</span><span class="p">.</span><span class="n">delegate</span> <span class="o">==</span> <span class="nb">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">navigationController</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在我们可以开始实现这个长长名字的 UINavigationControllerDelegate 的方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="bp">UIViewControllerAnimatedTransitioning</span><span class="o">&gt;</span><span class="p">)</span><span class="nf">navigationController:</span><span class="p">(</span><span class="bp">UINavigationController</span> <span class="o">*</span><span class="p">)</span><span class="nv">navigationController</span>
</span><span class='line'>                                  <span class="nf">animationControllerForOperation:</span><span class="p">(</span><span class="n">UINavigationControllerOperation</span><span class="p">)</span><span class="nv">operation</span>
</span><span class='line'>                                               <span class="nf">fromViewController:</span><span class="p">(</span><span class="bp">UIViewController</span> <span class="o">*</span><span class="p">)</span><span class="nv">fromVC</span>
</span><span class='line'>                                                 <span class="nf">toViewController:</span><span class="p">(</span><span class="bp">UIViewController</span> <span class="o">*</span><span class="p">)</span><span class="nv">toVC</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 检查一下是不是过渡到DSLSecondViewController</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">fromVC</span> <span class="o">==</span> <span class="nb">self</span> <span class="o">&amp;&amp;</span> <span class="p">[</span><span class="n">toVC</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="n">DSLSecondViewController</span> <span class="k">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[[</span><span class="n">DSLTransitionFromFirstToSecond</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That’s it. 当第二个 viewController 被推入进来时，navigationController 将使用我们自定义的过渡。</p>

<p>要实现弹回时的过渡效果，还是一样的方法，实现一个新的 DSLTransitionFromSecondToFirst 类用来过渡即可。</p>

<h2>让过渡变得可以交互</h2>

<p>现在我们有自定义过渡了，是时候加入交互了。我们希望让这个过渡在用户手指从屏幕左边边缘划入时产生互动。为了做到这点，我们将使用一个 iOS 7 新加入的手势识别器， <code>UIScreenEdgePanGestureRecognizer</code>。</p>

<p>我们在第二个 viewController 的 viewDidLoad 方法中，创建这个手势识别器。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">UIScreenEdgePanGestureRecognizer</span> <span class="o">*</span><span class="n">popRecognizer</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIScreenEdgePanGestureRecognizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget</span><span class="p">:</span><span class="nb">self</span> <span class="nl">action</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">handlePopRecognizer</span><span class="p">:)];</span>
</span><span class='line'>    <span class="n">popRecognizer</span><span class="p">.</span><span class="n">edges</span> <span class="o">=</span> <span class="n">UIRectEdgeLeft</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addGestureRecognizer</span><span class="p">:</span><span class="n">popRecognizer</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在我们可以识别该手势了，我们用它来设置并更新一个 iOS 7 新加入的类的对象。 UIPercentDrivenInteractiveTransition。这个类的对象会根据我们的手势，来决定我们的自定义过渡的完成度。我们把这些都放到手势识别器的 action 方法中去，具体就是：</p>

<p>当手势刚刚开始，我们创建一个 UIPercentDrivenInteractiveTransition 对象，然后让 navigationController 去把当前这个 viewController 弹出。</p>

<p>当手慢慢划入时，我们把总体手势划入的进度告诉 UIPercentDrivenInteractiveTransition 对象。</p>

<p>当手势结束，我们根据用户的手势进度来判断过渡是应该完成还是取消并相应的调用 <code>finishInteractiveTransition</code> 或者 <code>cancelInteractiveTransition</code> 方法.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">handlePopRecognizer:</span><span class="p">(</span><span class="bp">UIScreenEdgePanGestureRecognizer</span><span class="o">*</span><span class="p">)</span><span class="nv">recognizer</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 计算用户手指划了多远</span>
</span><span class='line'>    <span class="n">CGFloat</span> <span class="n">progress</span> <span class="o">=</span> <span class="p">[</span><span class="n">recognizer</span> <span class="nl">translationInView</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">].</span><span class="n">x</span> <span class="o">/</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">*</span> <span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">progress</span> <span class="o">=</span> <span class="n">MIN</span><span class="p">(</span><span class="mf">1.0</span><span class="p">,</span> <span class="n">MAX</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="n">progress</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">recognizer</span><span class="p">.</span><span class="n">state</span> <span class="o">==</span> <span class="n">UIGestureRecognizerStateBegan</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 创建过渡对象，弹出viewController</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">interactivePopTransition</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIPercentDrivenInteractiveTransition</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">navigationController</span> <span class="nl">popViewControllerAnimated</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">recognizer</span><span class="p">.</span><span class="n">state</span> <span class="o">==</span> <span class="n">UIGestureRecognizerStateChanged</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 更新 interactive transition 的进度</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">interactivePopTransition</span> <span class="nl">updateInteractiveTransition</span><span class="p">:</span><span class="n">progress</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">recognizer</span><span class="p">.</span><span class="n">state</span> <span class="o">==</span> <span class="n">UIGestureRecognizerStateEnded</span> <span class="o">||</span> <span class="n">recognizer</span><span class="p">.</span><span class="n">state</span> <span class="o">==</span> <span class="n">UIGestureRecognizerStateCancelled</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 完成或者取消过渡</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">progress</span> <span class="o">&gt;</span> <span class="mf">0.5</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">interactivePopTransition</span> <span class="n">finishInteractiveTransition</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">interactivePopTransition</span> <span class="n">cancelInteractiveTransition</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">interactivePopTransition</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在我们可以创建并更新 UIPercentDrivenInteractiveTransition 对象了，我们需要告诉 navigationController 去用它。为此，我们需要实现另一个 UInavigationControllerDelegate 的方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="bp">UIViewControllerInteractiveTransitioning</span><span class="o">&gt;</span><span class="p">)</span><span class="nf">navigationController:</span><span class="p">(</span><span class="bp">UINavigationController</span> <span class="o">*</span><span class="p">)</span><span class="nv">navigationController</span>
</span><span class='line'>                         <span class="nf">interactionControllerForAnimationController:</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="bp">UIViewControllerAnimatedTransitioning</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">animationController</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 检查是否是我们的自定义过渡</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">animationController</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="n">DSLTransitionFromSecondToFirst</span> <span class="k">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">self</span><span class="p">.</span><span class="n">interactivePopTransition</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>至此，我们第二个 viewController 回到第一个 viewController 的过渡就可以交互了。</p>

<h2>尾声</h2>

<p>希望这篇文章能帮你理解如何创建你自己的自定义过渡及其交互。文中例子的工程文件已上传至 <a href="https://github.com/PeteC/InteractiveViewControllerTransitions">GitHub</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[谈Objective-C Block的实现]]></title>
    <link href="http://orinchen.github.io/blog/2014/03/26/a-look-inside-blocks/"/>
    <updated>2014-03-26T14:09:38+08:00</updated>
    <id>http://orinchen.github.io/blog/2014/03/26/a-look-inside-blocks</id>
    <content type="html"><![CDATA[<p>本文转载自:<a href="http://blog.devtang.com/blog/2013/07/28/a-look-inside-blocks/">唐巧的技术博客</a></p>

<h2>前言</h2>

<p><a href="http://blog.parse.com/2013/02/05/objective-c-blocks-quiz/">这里</a>有关于 <strong>block</strong> 的5道测试题，建议你阅读本文之前先做一下测试。</p>

<p>先介绍一下什么是闭包。在 Wikipedia 上，<a href="http://en.wikipedia.org/wiki/Closure_(computer_science">闭包的定义</a>)是:</p>

<blockquote><p>In programming languages, a closure is a function or reference to a function together with a referencing environment—a table storing a reference to each of the non-local variables (also called free variables or upvalues) of that function.</p></blockquote>

<p>翻译过来就是：</p>

<blockquote><p>闭包是一个函数（或指向函数的指针），再加上该函数执行的外部的上下文变量（有时候也称作自由变量）。</p></blockquote>

<p><strong>block</strong> 实际上就是 Objective-C 语言对于闭包的实现。 <strong>block</strong> 配合上 <strong>dispatch_queue</strong>，可以方便地实现简单的多线程编程和异步编程，关于这个，我之前写过一篇文章介绍：<a href="http://blog.devtang.com/blog/2012/02/22/use-gcd/">《使用GCD》</a>。</p>

<p>本文主要介绍 Objective-C 语言的 <strong>block</strong> 在编译器中的实现方式。主要包括：</p>

<ol>
<li><strong>block</strong> 的内部实现数据结构介绍</li>
<li><strong>block</strong> 的三种类型及其相关的内存管理方式</li>
<li><strong>block</strong> 如何通过 <strong>capture</strong> 变量来达到访问函数外的变量</li>
</ol>


<!--more-->


<h2>实现方式</h2>

<h3>数据结构定义</h3>

<p>block的数据结构定义如下（图片来自<a href="http://www.galloway.me.uk/2013/05/a-look-inside-blocks-episode-3-block-copy/">这里</a>)：</p>

<p><img src="http://orinchen.github.io/images/posts/2014-03-26-a-look-inside-blocks/block-struct.jpg"></p>

<p>对应的结构体定义如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">struct</span> <span class="n">Block_descriptor</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">int</span> <span class="n">reserved</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">int</span> <span class="n">size</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="k">copy</span><span class="p">)(</span><span class="kt">void</span> <span class="o">*</span><span class="n">dst</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">src</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">dispose</span><span class="p">)(</span><span class="kt">void</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Block_layout</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="o">*</span><span class="n">isa</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">flags</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">reserved</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">invoke</span><span class="p">)(</span><span class="kt">void</span> <span class="o">*</span><span class="p">,</span> <span class="p">...);</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">Block_descriptor</span> <span class="o">*</span><span class="n">descriptor</span><span class="p">;</span>
</span><span class='line'>    <span class="cm">/* Imported variables. */</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过该图，我们可以知道，一个 <strong>block</strong> 实例实际上由6部分构成：</p>

<ol>
<li><strong>isa</strong> 指针，所有对象都有该指针，用于实现对象相关的功能。</li>
<li><strong>flags</strong>，用于按 bit 位表示一些 <strong>block</strong> 的附加信息，本文后面介绍 <strong>block copy</strong> 的实现代码可以看到对该变量的使用。</li>
<li><strong>reserved</strong>，保留变量。</li>
<li><strong>invoke</strong>，函数指针，指向具体的 <strong>block</strong> 实现的函数调用地址。</li>
<li><strong>descriptor</strong>， 表示该 <strong>block</strong> 的附加描述信息，主要是 <strong>size</strong> 大小，以及 <strong>copy</strong> 和 <strong>dispose</strong>函数的指针。</li>
<li><strong>variables</strong>，<strong>capture</strong> 过来的变量，<strong>block</strong> 能够访问它外部的局部变量，就是因为将这些变量（或变量的地址）复制到了结构体中。</li>
</ol>


<p>该数据结构和后面的 clang 分析出来的结构实际是一样的，不过仅是结构体的嵌套方式不一样。但这一点我一开始没有想明白，所以也给大家解释一下，如下2个结构体 SampleA 和 SampleB 在内存上是完全一样的，原因是结构体本身并不带有任何额外的附加信息。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">struct</span> <span class="n">SampleA</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">SampleB</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">Part1</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">Part2</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>在 Objective-C 语言中，一共有3种类型的 <strong>block</strong>：</p>

<ol>
<li><strong>_NSConcreteGlobalBlock</strong> 全局的静态 <strong>block</strong>，不会访问任何外部变量。</li>
<li><strong>_NSConcreteStackBlock</strong> 保存在栈中的 <strong>block</strong>，当函数返回时会被销毁。</li>
<li><strong>_NSConcreteMallocBlock</strong> 保存在堆中的 <strong>block</strong>，当引用计数为0时会被销毁。</li>
</ol>


<p>我们在下面会分别来查看它们各自的实现方式上的差别。</p>

<h3>研究工具：clang</h3>

<p>为了研究编译器是如何实现 <strong>block</strong> 的，我们需要使用 clang。clang 提供一个命令，可以将 Objetive-C 的源码改写成 c 语言的，借此可以研究 <strong>block</strong> 具体的源码实现方式。该命令是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">clang</span> <span class="o">-</span><span class="n">rewrite</span><span class="o">-</span><span class="n">objc</span> <span class="n">block</span><span class="p">.</span><span class="n">c</span>
</span></code></pre></td></tr></table></div></figure>


<h3>NSConcreteGlobalBlock 类型的 block 的实现</h3>

<p>我们先新建一个名为 block1.c 的源文件：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="o">^</span><span class="p">{</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Hello, World!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span> <span class="p">}</span> <span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在命令行中输入 <code>clang -rewrite-objc block1.c</code> 即可在目录中看到 clang 输出了一个名为 block1.cpp 的文件。该文件就是 block 在 c 语言实现，我将 block1.cpp 中一些无关的代码去掉，将关键代码引用如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">struct</span> <span class="n">__block_impl</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="o">*</span><span class="n">isa</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">Flags</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">Reserved</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="o">*</span><span class="n">FuncPtr</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">__main_block_impl_0</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">__block_impl</span> <span class="n">impl</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">__main_block_desc_0</span><span class="o">*</span> <span class="n">Desc</span><span class="p">;</span>
</span><span class='line'>    <span class="n">__main_block_impl_0</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">fp</span><span class="p">,</span> <span class="k">struct</span> <span class="n">__main_block_desc_0</span> <span class="o">*</span><span class="n">desc</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">impl</span><span class="p">.</span><span class="n">isa</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">_NSConcreteStackBlock</span><span class="p">;</span>
</span><span class='line'>        <span class="n">impl</span><span class="p">.</span><span class="n">Flags</span> <span class="o">=</span> <span class="n">flags</span><span class="p">;</span>
</span><span class='line'>        <span class="n">impl</span><span class="p">.</span><span class="n">FuncPtr</span> <span class="o">=</span> <span class="n">fp</span><span class="p">;</span>
</span><span class='line'>        <span class="n">Desc</span> <span class="o">=</span> <span class="n">desc</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">__main_block_func_0</span><span class="p">(</span><span class="k">struct</span> <span class="n">__main_block_impl_0</span> <span class="o">*</span><span class="n">__cself</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Hello, World!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="k">struct</span> <span class="n">__main_block_desc_0</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">size_t</span> <span class="n">reserved</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">size_t</span> <span class="n">Block_size</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">__main_block_desc_0_DATA</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">__main_block_impl_0</span><span class="p">)</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="p">)())</span><span class="o">&amp;</span><span class="n">__main_block_impl_0</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">__main_block_func_0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">__main_block_desc_0_DATA</span><span class="p">)</span> <span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面我们就具体看一下是如何实现的。<strong>__main_block_impl_0</strong>  就是该 <strong>block</strong> 的实现，从中我们可以看出：</p>

<ol>
<li>一个 <strong>block</strong> 实际是一个对象，它主要由一个 <strong>isa</strong> 和 一个 <strong>impl</strong> 和 一个 <strong>descriptor</strong> 组成。</li>
<li>在本例中，<strong>isa</strong> 指向 <strong>_NSConcreteGlobalBlock</strong>， 主要是为了实现对象的所有特性，在此我们就不展开讨论了。</li>
<li>由于 clang 改写的具体实现方式和 LLVM 不太一样，并且这里没有开启 ARC。所以这里我们看到 <strong>isa</strong> 指向的还是 <strong>_NSConcreteStackBlock</strong>。但在 LLVM 的实现中，开启 ARC 时，<strong>block</strong> 应该是 <strong>_NSConcreteGlobalBlock</strong> 类型，具体可以看<a href="http://blog.parse.com/2013/02/05/objective-c-blocks-quiz/">《objective-c-blocks-quiz》</a>第二题的解释。</li>
<li><strong>impl</strong> 是实际的函数指针，本例中，它指向 <strong>__main_block_func_0</strong>。这里的 <strong>impl</strong> 相当于之前提到的 <strong>invoke</strong> 变量，只是 clang 编译器对变量的命名不一样而已。</li>
<li><strong>descriptor</strong> 是用于描述当前这个 <strong>block</strong> 的附加信息的，包括结构体的大小，需要 <strong>capture</strong> 和 <strong>dispose</strong> 的变量列表等。结构体大小需要保存是因为，每个 <strong>block</strong> 因为会 <strong>capture</strong> 一些变量，这些变量会加到 <strong>__main_block_impl_0</strong> 这个结构体中，使其体积变大。在该例子中我们还看不到相关 <strong>capture</strong> 的代码，后面将会看到。</li>
</ol>


<h3>NSConcreteStackBlock 类型的block的实现</h3>

<p>我们另外新建一个名为 block2.c 的文件，输入以下内容：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">block2</span><span class="p">)(</span><span class="kt">void</span><span class="p">)</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="n">block2</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>用之前提到的 clang 工具，转换后的关键代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">struct</span> <span class="n">__main_block_impl_0</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">__block_impl</span> <span class="n">impl</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">__main_block_desc_0</span><span class="o">*</span> <span class="n">Desc</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>    <span class="n">__main_block_impl_0</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">fp</span><span class="p">,</span> <span class="k">struct</span> <span class="n">__main_block_desc_0</span> <span class="o">*</span><span class="n">desc</span><span class="p">,</span> <span class="kt">int</span> <span class="n">_a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="o">:</span> <span class="n">a</span><span class="p">(</span><span class="n">_a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">impl</span><span class="p">.</span><span class="n">isa</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">_NSConcreteStackBlock</span><span class="p">;</span>
</span><span class='line'>        <span class="n">impl</span><span class="p">.</span><span class="n">Flags</span> <span class="o">=</span> <span class="n">flags</span><span class="p">;</span>
</span><span class='line'>        <span class="n">impl</span><span class="p">.</span><span class="n">FuncPtr</span> <span class="o">=</span> <span class="n">fp</span><span class="p">;</span>
</span><span class='line'>        <span class="n">Desc</span> <span class="o">=</span> <span class="n">desc</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">__main_block_func_0</span><span class="p">(</span><span class="k">struct</span> <span class="n">__main_block_impl_0</span> <span class="o">*</span><span class="n">__cself</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">__cself</span><span class="o">-&gt;</span><span class="n">a</span><span class="p">;</span> <span class="c1">// bound by copy</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="k">struct</span> <span class="n">__main_block_desc_0</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">size_t</span> <span class="n">reserved</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">size_t</span> <span class="n">Block_size</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">__main_block_desc_0_DATA</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">__main_block_impl_0</span><span class="p">)};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">block2</span><span class="p">)(</span><span class="kt">void</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="p">)())</span><span class="o">&amp;</span><span class="n">__main_block_impl_0</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">__main_block_func_0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">__main_block_desc_0_DATA</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span>
</span><span class='line'>    <span class="p">((</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="p">)(</span><span class="n">__block_impl</span> <span class="o">*</span><span class="p">))((</span><span class="n">__block_impl</span> <span class="o">*</span><span class="p">)</span><span class="n">block2</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">FuncPtr</span><span class="p">)((</span><span class="n">__block_impl</span> <span class="o">*</span><span class="p">)</span><span class="n">block2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在本例中，我们可以看到：</p>

<ol>
<li>本例中，<strong>isa</strong> 指向 <strong>_NSConcreteStackBlock</strong>，说明这是一个分配在栈上的实例。</li>
<li><strong>main_block_impl_0</strong>  中增加了一个变量 <strong>a</strong>，在 <strong>block</strong> 中引用的变量 <strong>a</strong> 实际是在申明 <strong>block</strong> 时，被复制到 <strong>main_block_impl_0</strong>结构体中的那个变量 <strong>a</strong>。因为这样，我们就能理解，在 <strong>block</strong> 内部修改变量a的内容，不会影响外部的实际变量 <strong>a</strong>。</li>
<li><strong>main_block_impl_0</strong> 中由于增加了一个变量 <strong>a</strong>，所以结构体的大小变大了，该结构体大小被写在了 <strong>main_block_desc_0</strong> 中。</li>
</ol>


<p>我们修改上面的源码，在变量前面增加 <strong>__block</strong> 关键字：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">__block</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1024</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">block1</span><span class="p">)(</span><span class="kt">void</span><span class="p">)</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>        <span class="n">i</span> <span class="o">=</span> <span class="mi">1023</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="n">block1</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>生成的关键代码如下，可以看到，差异相当大：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">struct</span> <span class="n">__Block_byref_i_0</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="o">*</span><span class="n">__isa</span><span class="p">;</span>
</span><span class='line'>    <span class="n">__Block_byref_i_0</span> <span class="o">*</span><span class="n">__forwarding</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">__flags</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">__size</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">__main_block_impl_0</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">__block_impl</span> <span class="n">impl</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">__main_block_desc_0</span><span class="o">*</span> <span class="n">Desc</span><span class="p">;</span>
</span><span class='line'>    <span class="n">__Block_byref_i_0</span> <span class="o">*</span><span class="n">i</span><span class="p">;</span> <span class="c1">// by ref</span>
</span><span class='line'>    <span class="n">__main_block_impl_0</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">fp</span><span class="p">,</span> <span class="k">struct</span> <span class="n">__main_block_desc_0</span> <span class="o">*</span><span class="n">desc</span><span class="p">,</span> <span class="n">__Block_byref_i_0</span> <span class="o">*</span><span class="n">_i</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="o">:</span> <span class="n">i</span><span class="p">(</span><span class="n">_i</span><span class="o">-&gt;</span><span class="n">__forwarding</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">impl</span><span class="p">.</span><span class="n">isa</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">_NSConcreteStackBlock</span><span class="p">;</span>
</span><span class='line'>        <span class="n">impl</span><span class="p">.</span><span class="n">Flags</span> <span class="o">=</span> <span class="n">flags</span><span class="p">;</span>
</span><span class='line'>        <span class="n">impl</span><span class="p">.</span><span class="n">FuncPtr</span> <span class="o">=</span> <span class="n">fp</span><span class="p">;</span>
</span><span class='line'>        <span class="n">Desc</span> <span class="o">=</span> <span class="n">desc</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">__main_block_func_0</span><span class="p">(</span><span class="k">struct</span> <span class="n">__main_block_impl_0</span> <span class="o">*</span><span class="n">__cself</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">__Block_byref_i_0</span> <span class="o">*</span><span class="n">i</span> <span class="o">=</span> <span class="n">__cself</span><span class="o">-&gt;</span><span class="n">i</span><span class="p">;</span> <span class="c1">// bound by ref</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">(</span><span class="n">i</span><span class="o">-&gt;</span><span class="n">__forwarding</span><span class="o">-&gt;</span><span class="n">i</span><span class="p">));</span>
</span><span class='line'>    <span class="p">(</span><span class="n">i</span><span class="o">-&gt;</span><span class="n">__forwarding</span><span class="o">-&gt;</span><span class="n">i</span><span class="p">)</span> <span class="o">=</span> <span class="mi">1023</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">__main_block_copy_0</span><span class="p">(</span><span class="k">struct</span> <span class="n">__main_block_impl_0</span><span class="o">*</span><span class="n">dst</span><span class="p">,</span> <span class="k">struct</span> <span class="n">__main_block_impl_0</span><span class="o">*</span><span class="n">src</span><span class="p">)</span> <span class="p">{</span><span class="n">_Block_object_assign</span><span class="p">((</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">dst</span><span class="o">-&gt;</span><span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">src</span><span class="o">-&gt;</span><span class="n">i</span><span class="p">,</span> <span class="mi">8</span><span class="cm">/*BLOCK_FIELD_IS_BYREF*/</span><span class="p">);}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">__main_block_dispose_0</span><span class="p">(</span><span class="k">struct</span> <span class="n">__main_block_impl_0</span><span class="o">*</span><span class="n">src</span><span class="p">)</span> <span class="p">{</span><span class="n">_Block_object_dispose</span><span class="p">((</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">src</span><span class="o">-&gt;</span><span class="n">i</span><span class="p">,</span> <span class="mi">8</span><span class="cm">/*BLOCK_FIELD_IS_BYREF*/</span><span class="p">);}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="k">struct</span> <span class="n">__main_block_desc_0</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">size_t</span> <span class="n">reserved</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">size_t</span> <span class="n">Block_size</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="k">copy</span><span class="p">)(</span><span class="k">struct</span> <span class="n">__main_block_impl_0</span><span class="o">*</span><span class="p">,</span> <span class="k">struct</span> <span class="n">__main_block_impl_0</span><span class="o">*</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">dispose</span><span class="p">)(</span><span class="k">struct</span> <span class="n">__main_block_impl_0</span><span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="n">__main_block_desc_0_DATA</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">__main_block_impl_0</span><span class="p">),</span> <span class="n">__main_block_copy_0</span><span class="p">,</span> <span class="n">__main_block_dispose_0</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">__attribute__</span><span class="p">((</span><span class="n">__blocks__</span><span class="p">(</span><span class="n">byref</span><span class="p">)))</span> <span class="n">__Block_byref_i_0</span> <span class="n">i</span> <span class="o">=</span> <span class="p">{(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="mi">0</span><span class="p">,(</span><span class="n">__Block_byref_i_0</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">i</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">__Block_byref_i_0</span><span class="p">),</span> <span class="mi">1024</span><span class="p">};</span>
</span><span class='line'>    <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">block1</span><span class="p">)(</span><span class="kt">void</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="p">)())</span><span class="o">&amp;</span><span class="n">__main_block_impl_0</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">__main_block_func_0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">__main_block_desc_0_DATA</span><span class="p">,</span> <span class="p">(</span><span class="n">__Block_byref_i_0</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">i</span><span class="p">,</span> <span class="mi">570425344</span><span class="p">);</span>
</span><span class='line'>    <span class="p">((</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="p">)(</span><span class="n">__block_impl</span> <span class="o">*</span><span class="p">))((</span><span class="n">__block_impl</span> <span class="o">*</span><span class="p">)</span><span class="n">block1</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">FuncPtr</span><span class="p">)((</span><span class="n">__block_impl</span> <span class="o">*</span><span class="p">)</span><span class="n">block1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>从代码中我们可以看到：</p>

<ol>
<li>源码中增加一个名为 <strong>__Block_byref_i_0</strong> 的结构体，用来保存我们要 <strong>capture</strong> 并且修改的变量 <strong>i</strong>。</li>
<li><strong>main_block_impl_0</strong> 中引用的是 <strong>Block_byref_i_0</strong> 的结构体指针，这样就可以达到修改外部变量的作用。</li>
<li><strong>__Block_byref_i_0</strong> 结构体中带有 <strong>isa</strong>，说明它也是一个对象。</li>
<li>我们需要负责 <strong>Block_byref_i_0</strong> 结构体相关的内存管理，所以 <strong>main_block_desc_0</strong> 中增加了 <strong>copy</strong> 和 <strong>dispose</strong> 函数指针，对于在调用前后修改相应变量的引用计数。</li>
</ol>


<h3>NSConcreteMallocBlock 类型的block的实现</h3>

<p><strong>NSConcreteMallocBlock</strong> 类型的 <strong>block</strong> 通常不会在源码中直接出现，因为默认它是当一个 <strong>block</strong> 被 <strong>copy</strong> 的时候，才会将这个 <strong>block</strong> 复制到堆中。以下是一个 <strong>block</strong> 被 <strong>copy</strong> 时的示例代码(来自<a href="http://www.galloway.me.uk/2013/05/a-look-inside-blocks-episode-3-block-copy/">这里</a>)，可以看到，在第8步，目标的 <strong>block</strong> 类型被修改为 <strong>_NSConcreteMallocBlock</strong>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="o">*</span><span class="nf">_Block_copy_internal</span><span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">Block_layout</span> <span class="o">*</span><span class="n">aBlock</span><span class="p">;</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">bool</span> <span class="n">wantsOne</span> <span class="o">=</span> <span class="p">(</span><span class="n">WANTS_ONE</span> <span class="o">&amp;</span> <span class="n">flags</span><span class="p">)</span> <span class="o">==</span> <span class="n">WANTS_ONE</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 1</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">arg</span><span class="p">)</span> <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 2</span>
</span><span class='line'>    <span class="n">aBlock</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">Block_layout</span> <span class="o">*</span><span class="p">)</span><span class="n">arg</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 3</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">aBlock</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">BLOCK_NEEDS_FREE</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// latches on high</span>
</span><span class='line'>        <span class="n">latching_incr_int</span><span class="p">(</span><span class="o">&amp;</span><span class="n">aBlock</span><span class="o">-&gt;</span><span class="n">flags</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">aBlock</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 4</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">aBlock</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">BLOCK_IS_GLOBAL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">aBlock</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 5</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">Block_layout</span> <span class="o">*</span><span class="n">result</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="n">aBlock</span><span class="o">-&gt;</span><span class="n">descriptor</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">result</span><span class="p">)</span> <span class="k">return</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 6</span>
</span><span class='line'>    <span class="n">memmove</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">aBlock</span><span class="p">,</span> <span class="n">aBlock</span><span class="o">-&gt;</span><span class="n">descriptor</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">);</span> <span class="c1">// bitcopy first</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 7</span>
</span><span class='line'>    <span class="n">result</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="p">(</span><span class="n">BLOCK_REFCOUNT_MASK</span><span class="p">);</span>    <span class="c1">// XXX not needed</span>
</span><span class='line'>    <span class="n">result</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">|=</span> <span class="n">BLOCK_NEEDS_FREE</span> <span class="o">|</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 8</span>
</span><span class='line'>    <span class="n">result</span><span class="o">-&gt;</span><span class="n">isa</span> <span class="o">=</span> <span class="n">_NSConcreteMallocBlock</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 9</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">BLOCK_HAS_COPY_DISPOSE</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">(</span><span class="o">*</span><span class="n">aBlock</span><span class="o">-&gt;</span><span class="n">descriptor</span><span class="o">-&gt;</span><span class="k">copy</span><span class="p">)(</span><span class="n">result</span><span class="p">,</span> <span class="n">aBlock</span><span class="p">);</span> <span class="c1">// do fixup</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>变量的复制</h2>

<p>对于 <strong>block</strong> 外的变量引用，<strong>block</strong> 默认是将其复制到其数据结构中来实现访问的，如下图所示（图片来自<a href="http://rypress.com/tutorials/objective-c/blocks.html">这里</a>）：</p>

<p><img src="http://orinchen.github.io/images/posts/2014-03-26-a-look-inside-blocks/block-capture-1.jpg"></p>

<p>对于用 <strong>__block</strong> 修饰的外部变量引用，<strong>block</strong> 是复制其引用地址来实现访问的，如下图所示（图片来自<a href="http://rypress.com/tutorials/objective-c/blocks.html">这里</a>）：</p>

<p><img src="http://orinchen.github.io/images/posts/2014-03-26-a-look-inside-blocks/block-capture-2.jpg"></p>

<h2>LLVM源码</h2>

<p>在 LLVM 开源的关于 <a href="https://llvm.org/svn/llvm-project/compiler-rt/trunk/BlocksRuntime/Block_private.h"><strong>block</strong> 的实现源码</a>，其内容也和我们用 clang 改写得到的内容相似，印证了我们对于 <strong>block</strong> 内部数据结构的推测。</p>

<h2>ARC对block类型的影响</h2>

<p>在 ARC 开启的情况下，将只会有 <strong>NSConcreteGlobalBlock</strong> 和 <strong>NSConcreteMallocBlock</strong> 类型的 <strong>block</strong>。</p>

<p>原本的 <strong>NSConcreteStackBlock</strong> 的 <strong>block</strong> 会被 <strong>NSConcreteMallocBlock</strong> 类型的 <strong>block</strong> 替代。证明方式是以下代码在 XCode 中，会输出 <code>&lt;__NSMallocBlock__: 0x100109960&gt;</code>。在苹果的官方文档中也提到，当把栈中的 <strong>block</strong> 返回时，不需要调用 <strong>copy</strong> 方法了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">@autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1024</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">block1</span><span class="p">)(</span><span class="kt">void</span><span class="p">)</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>        <span class="n">block1</span><span class="p">();</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">block1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我个人认为这么做的原因是，由于 ARC 已经能很好地处理对象的生命周期的管理，这样所有对象都放到堆上管理，对于编译器实现来说，会比较方便。</p>

<h2>参考链接</h2>

<p>希望本文能加深你对于 <strong>block</strong> 的理解。我在学习中，查阅了以下文章，一并分享给大家。祝大家玩得开心～</p>

<ul>
<li><p><a href="http://www.galloway.me.uk/2012/10/a-look-inside-blocks-episode-1">A look inside blocks: Episode 1</a></p></li>
<li><p><a href="http://www.galloway.me.uk/2012/10/a-look-inside-blocks-episode-2/">A look inside blocks: Episode 2</a></p></li>
<li><p><a href="http://www.galloway.me.uk/2013/05/a-look-inside-blocks-episode-3-block-copy/">A look inside blocks: Episode 3</a></p></li>
<li><p><a href="http://www.cnblogs.com/biosli/archive/2013/05/29/iOS_Objective-C_Block.html">对Objective-C中Block的追探</a></p></li>
<li><p><a href="https://llvm.org/svn/llvm-project/compiler-rt/trunk/BlocksRuntime/Block_private.h">LLVM中block实现源码</a></p></li>
<li><p><a href="http://blog.parse.com/2013/02/05/objective-c-blocks-quiz/">objective-c-blocks-quiz</a></p></li>
<li><p><a href="http://rypress.com/tutorials/objective-c/blocks.html">Blocks</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C对象模型及应用]]></title>
    <link href="http://orinchen.github.io/blog/2014/03/20/objective-c-object-model/"/>
    <updated>2014-03-20T10:43:32+08:00</updated>
    <id>http://orinchen.github.io/blog/2014/03/20/objective-c-object-model</id>
    <content type="html"><![CDATA[<p>本文转载自:<a href="http://blog.devtang.com/blog/2013/10/15/objective-c-object-model/">唐巧的技术博客</a></p>

<h2>前言</h2>

<p>本文主要介绍 Objective-C 对象模型的实现细节，以及 Objective-C 语言对象模型中对 <strong>isa swizzling</strong> 和 <strong>method swizzling</strong> 的支持。希望本文能加深你对 Objective-C 对象的理解。</p>

<!--more-->


<h2>ISA指针</h2>

<p>Objective-C 是一门面向对象的编程语言。每一个对象都是一个类的实例。在 Objective-C 语言的内部，每一个对象都有一个名为 <strong>isa</strong> 的指针，指向该对象的类。每一个类描述了一系列它的实例的特点，包括成员变量的列表，成员函数的列表等。每一个对象都可以接受消息，而对象能够接收的消息列表是保存在它所对应的类中。</p>

<p>在 XCode 中按 <em>Shift + Command + O</em>, 然后输入 NSObject.h 和 objc.h，可以打开 <code>NSObject</code> 的定义头文件，通过头文件我们可以看到，<code>NSObject</code> 就是一个包含 <strong>isa</strong> 指针的结构体，如下图所示：</p>

<p><img src="http://orinchen.github.io/images/posts/2014-03-20-objective-c-object-model/class-nsobject-isa.jpg"></p>

<p><img src="http://orinchen.github.io/images/posts/2014-03-20-objective-c-object-model/class-objc-object-isa.jpg"></p>

<p>按照面向对象语言的设计原则，所有事物都应该是对象（严格来说 Objective-C 并没有完全做到这一点，因为它有象 int, double 这样的简单变量类型）。在 Objective-C 语言中，每一个类实际上也是一个对象。每一个类也有一个名为 <strong>isa</strong> 的指针。每一个类也可以接受消息，例如 <code>[NSObject alloc]</code>，就是向 NSObject 这个类发送名为 <code>alloc</code> 消息。</p>

<p>在 XCode 中按 <em>Shift + Command + O</em>, 然后输入 runtime.h，可以打开 Class 的定义头文件，通过头文件我们可以看到，Class 也是一个包含 <strong>isa</strong> 指针的结构体，如下图所示。（图中除了 <strong>isa</strong> 外还有其它成员变量，但那是为了兼容非2.0版的 Objective-C 的遗留逻辑，大家可以忽略它。）</p>

<p><img src="http://orinchen.github.io/images/posts/2014-03-20-objective-c-object-model/class-objc-class-isa.jpg"></p>

<p>因为类也是一个对象，那它也必须是另一个类的实列，这个类就是元类(<strong>metaclass</strong>)。元类保存了类方法的列表。当一个类方法被调用时，元类会首先查找它本身是否有该类方法的实现，如果没有，则该元类会向它的父类查找该方法，直到一直找到继承链的头。</p>

<p>元类(<strong>metaclass</strong>)也是一个对象，那么元类的 <strong>isa</strong> 指针又指向哪里呢？为了设计上的完整，所有的元类的 <strong>isa</strong> 指针都会指向一个根元类(<strong>root metaclass</strong>)。根元类(<strong>root metaclass</strong>)本身的 <strong>isa</strong> 指针指向自己，这样就行成了一个闭环。上面提到，一个对象能够接收的消息列表是保存在它所对应的类中的。在实际编程中，我们几乎不会遇到向元类发消息的情况，那它的 <strong>isa</strong> 指针在实际上很少用到。不过这么设计保证了面向对象的干净，即所有事物都是对象，都有 <strong>isa</strong> 指针。</p>

<p>我们再来看看继承关系，由于类方法的定义是保存在元类(<strong>metaclass</strong>)中，而方法调用的规则是：如果该类没有一个方法的实现，则向它的父类继续查找。所以，为了保证父类的类方法可以在子类中可以被调用，所以子类的元类会继承父类的元类，换而言之，类对象和元类对象有着同样的继承关系。</p>

<p>我很想把关系说清楚一些，但是这块儿确实有点绕，下面这张图或许能够让大家对 <strong>isa</strong>和继承的关系清楚一些（该图片来自<a href="http://www.sealiesoftware.com/blog/class%20diagram.pdf">这里</a>）:</p>

<p><img src="http://orinchen.github.io/images/posts/2014-03-20-objective-c-object-model/class-diagram.jpg"></p>

<p>该图中，最让人困惑的莫过于 <strong>Root Class</strong> 了。在实现中，<strong>Root Class</strong> 是指 <strong>NSObject</strong>，我们可以从图中看出：</p>

<ol>
<li>NSObject 类包括它的对象实例方法。</li>
<li>NSObject 的元类包括它的类方法，例如 alloc 方法。</li>
<li>NSObject 的元类继承自 NSObject 类。</li>
<li>一个 NSObject 的类中的方法同时也会被 NSObject 的子类在查找方法时找到。</li>
</ol>


<h2>类的成员变量</h2>

<p>如果把类的实例看成一个 <strong>C</strong> 语言的结构体（<strong>struct</strong>），上面说的 <strong>isa</strong> 指针就是这个结构体的第一个成员变量，而类的其它成员变量依次排列在结构体中。排列顺序如下图所示（图片来自《iOS 6 Programming Pushing the Limits》）：</p>

<p><img src="http://orinchen.github.io/images/posts/2014-03-20-objective-c-object-model/class-member.jpg"></p>

<p>为了验证该说法，我们在 XCode 中新建一个工程，在 main.m 中运行如下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;UIKit/UIKit.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Father</span> : <span class="bp">NSObject</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">_father</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Father</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Child</span> : <span class="nc">Father</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">_child</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Child</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">Child</span> <span class="o">*</span> <span class="n">child</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Child</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>  <span class="k">@autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// ...</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们将断点下在 <code>@autoreleasepool</code> 处，然后在 <strong>Console</strong> 中输入 <code>p *child</code>,则可以看到 Xcode 输出如下内容，这与我们上面的说法一致。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">(</span><span class="n">lldb</span><span class="p">)</span> <span class="n">p</span> <span class="o">*</span><span class="n">child</span>
</span><span class='line'><span class="p">(</span><span class="n">Child</span><span class="p">)</span> <span class="err">$</span><span class="mi">0</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">(</span><span class="n">Father</span><span class="p">)</span> <span class="n">Father</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">(</span><span class="bp">NSObject</span><span class="p">)</span> <span class="bp">NSObject</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">(</span><span class="kt">Class</span><span class="p">)</span> <span class="n">isa</span> <span class="o">=</span> <span class="n">Child</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">_father</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">_child</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>可变与不可变</h2>

<p>因为对象在内存中的排布可以看成一个结构体，该结构体的大小并不能动态变化。所以无法在运行时动态给对象增加成员变量。</p>

<p>相对的，对象的方法定义都保存在类的可变区域中。Objective-C 2.0 并未在头文件中将实现暴露出来，但在 Objective-C 1.0 中，我们可以看到方法的定义列表是一个名为 <strong>methodLists</strong> 的指针的指针（如下图所示）。通过修改该指针指向的指针的值，就可以实现动态地为某一个类增加成员方法。这也是 <strong>Category</strong> 实现的原理。同时也说明了为什么 <strong>Category</strong> 只可为对象增加成员方法，却不能增加成员变量。</p>

<p><img src="http://orinchen.github.io/images/posts/2014-03-20-objective-c-object-model/class-objc-class-isa.jpg"></p>

<p>需要特别说明一下，通过 <code>objc_setAssociatedObject</code> 和 <code>objc_getAssociatedObject</code> 方法可以变相地给对象增加成员变量，但由于实现机制不一样，所以并不是真正改变了对象的内存结构。</p>

<p>除了对象的方法可以动态修改，因为 <strong>isa</strong> 本身也只是一个指针，所以我们也可以在运行时动态地修改 <strong>isa</strong> 指针的值，达到替换对象整个行为的目的。不过该应用场景较少。</p>

<h2>系统相关API及应用</h2>

<h3>isa swizzling 的应用</h3>

<p>系统提供的 <strong>KVO</strong> 的实现，就利用了动态地修改 <strong>isa</strong> 指针的值的技术。在苹果的文档中可以看到如下描述：</p>

<blockquote><p>Key-Value Observing Implementation Details</p>

<p>Automatic key-value observing is implemented using a technique called isa-swizzling.</p>

<p>The isa pointer, as the name suggests, points to the object’s class which maintains a dispatch table. This dispatch table essentially contains pointers to the methods the class implements, among other data.</p>

<p>When an observer is registered for an attribute of an object the isa pointer of the observed object is modified, pointing to an intermediate class rather than at the true class. As a result the value of the isa pointer does not necessarily reflect the actual class of the instance.</p>

<p>You should never rely on the isa pointer to determine class membership. Instead, you should use the class method to determine the class of an object instance.</p></blockquote>

<h3>Method Swizzling API说明</h3>

<p>Objective-C 提供了以下 API 来动态替换类方法或实例方法的实现：</p>

<ul>
<li><code>class_replaceMethod</code> 替换类方法的定义</li>
<li><code>method_exchangeImplementations</code> 交换2个方法的实现</li>
<li><code>method_setImplementation</code> 设置1个方法的实现</li>
</ul>


<p>这 3 个方法有一些细微的差别，给大家介绍如下：</p>

<ul>
<li><code>class_replaceMethod</code> 在苹果的文档（如下图所示）中能看到，它有两种不同的行为。当类中没有想替换的原方法时，该方法会调用 <code>class_addMethod</code> 来为该类增加一个新方法，也因为如此，<code>class_replaceMethod</code> 在调用时需要传入 <code>types</code> 参数，而 <code>method_exchangeImplementations</code> 和 <code>method_setImplementation</code> 却不需要。</li>
</ul>


<p><img src="http://orinchen.github.io/images/posts/2014-03-20-objective-c-object-model/class-replace-method.jpg"></p>

<ul>
<li><code>method_exchangeImplementations</code> 的内部实现其实是调用了2次 <code>method_setImplementation</code> 方法，从苹果的文档中能清晰地了解到（如下图所示）</li>
</ul>


<p><img src="http://orinchen.github.io/images/posts/2014-03-20-objective-c-object-model/class-method-exchange-imp.jpg"></p>

<p>从以上的区别我们可以总结出这3个API的使用场景:</p>

<ul>
<li><code>class_replaceMethod</code>, 当需要替换的方法可能有不存在的情况时，可以考虑使用该方法。</li>
<li><code>method_exchangeImplementations</code>，当需要交换2个方法的实现时使用。</li>
<li><code>method_setImplementation</code> 最简单的用法，当仅仅需要为一个方法设置其实现方式时使用。</li>
</ul>


<h2>使用示例</h2>

<p>我们在开发猿题库客户端的笔记功能时，需要使用系统的 <code>UIImagePickerController</code>。但是，我们发现，在 iOS6.0.2 系统下，系统提供的 <code>UIImagePickerController</code> 在 iPad 横屏下有转屏的 Bug，造成其方向错误。具体的 Bug 详情可以见<a href="http://stackoverflow.com/questions/12522491/crash-on-presenting-uiimagepickercontroller-under-ios-6-0">这里</a>。</p>

<p>为了修复该 Bug，我们需要替换 <code>UIImagePickerController</code> 的如下2个方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">shouldAutorotate</span><span class="p">;</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">UIInterfaceOrientation</span><span class="p">)</span><span class="nf">preferredInterfaceOrientationForPresentation</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们先实现了一个名为 <code>ImagePickerReplaceMethodsHolder</code> 的类，用于定义替换后的方法和实现。如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// ImagePickerReplaceMethodsHolder.h</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ImagePickerReplaceMethodsHolder</span> : <span class="bp">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">shouldAutorotate</span><span class="p">;</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">UIInterfaceOrientation</span><span class="p">)</span><span class="nf">preferredInterfaceOrientationForPresentation</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ImagePickerReplaceMethodsHolder.m</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">ImagePickerReplaceMethodsHolder</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">shouldAutorotate</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">UIInterfaceOrientation</span><span class="p">)</span><span class="nf">preferredInterfaceOrientationForPresentation</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">UIInterfaceOrientationPortrait</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后，我们在调用处，判断当前的 iOS 版本，对于[iOS6.0, iOS6.1)之间的版本，我们将 <code>UIImagePickerController</code> 的有问题的方法替换。具体代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#define SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(v)  ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] != NSOrderedAscending)</span>
</span><span class='line'><span class="cp">#define SYSTEM_VERSION_LESS_THAN(v)                 ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedAscending)</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">load</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span> <span class="n">hackForImagePicker</span><span class="p">];</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">hackForImagePicker</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// fix bug of image picker under iOS 6.0</span>
</span><span class='line'>    <span class="c1">// http://stackoverflow.com/questions/12522491/crash-on-presenting-uiimagepickercontroller-under-ios-6-0</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO</span><span class="p">(</span><span class="s">@&quot;6.0&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="o">&amp;&amp;</span> <span class="n">SYSTEM_VERSION_LESS_THAN</span><span class="p">(</span><span class="s">@&quot;6.1&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Method</span> <span class="n">oldMethod1</span> <span class="o">=</span> <span class="n">class_getInstanceMethod</span><span class="p">([</span><span class="bp">UIImagePickerController</span> <span class="k">class</span><span class="p">],</span> <span class="k">@selector</span><span class="p">(</span><span class="n">shouldAutorotate</span><span class="p">));</span>
</span><span class='line'>        <span class="n">Method</span> <span class="n">newMethod1</span> <span class="o">=</span> <span class="n">class_getInstanceMethod</span><span class="p">([</span><span class="n">ImagePickerReplaceMethodsHolder</span> <span class="k">class</span><span class="p">],</span> <span class="k">@selector</span><span class="p">(</span><span class="n">shouldAutorotate</span><span class="p">));</span>
</span><span class='line'>        <span class="n">method_setImplementation</span><span class="p">(</span><span class="n">oldMethod1</span><span class="p">,</span> <span class="n">method_getImplementation</span><span class="p">(</span><span class="n">newMethod1</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Method</span> <span class="n">oldMethod2</span> <span class="o">=</span> <span class="n">class_getInstanceMethod</span><span class="p">([</span><span class="bp">UIImagePickerController</span> <span class="k">class</span><span class="p">],</span> <span class="k">@selector</span><span class="p">(</span><span class="n">preferredInterfaceOrientationForPresentation</span><span class="p">));</span>
</span><span class='line'>        <span class="n">Method</span> <span class="n">newMethod2</span> <span class="o">=</span> <span class="n">class_getInstanceMethod</span><span class="p">([</span><span class="n">ImagePickerReplaceMethodsHolder</span> <span class="k">class</span><span class="p">],</span> <span class="k">@selector</span><span class="p">(</span><span class="n">preferredInterfaceOrientationForPresentation</span><span class="p">));</span>
</span><span class='line'>        <span class="n">method_setImplementation</span><span class="p">(</span><span class="n">oldMethod2</span><span class="p">,</span> <span class="n">method_getImplementation</span><span class="p">(</span><span class="n">newMethod2</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过如上代码，我们就针对 iOS 特定版本的有问题的系统库函数打了 Patch，使问题得到解决。</p>

<h2>开源界的使用</h2>

<p>有少量不明真相的同学以为苹果在审核时会拒绝 App 使用以上 API，这其实是对苹果的误解。使用如上 API 是安全的。另外，开源界也对以上方法都适当的使用。例如：</p>

<ul>
<li><p>著名的网络库 <strong>AFNetworking</strong>。<strong>AFNetworking</strong> 网络库(v1.x版本)使用了 <code>class_replaceMethod</code> 方法（AFHTTPRequestOperation.m文件第105行）</p></li>
<li><p>Nimbus。Nimbus 是著名的工具类库，它在其 core 模块中提供了 NIRuntimeClassModifications.h文件，用于提供上述 API 的封装。</p></li>
<li><p>国内的大众点评 iOS 客户端。该客户端使用了他们自己开发的基于 Wax 修改而来的 <a href="https://github.com/mmin18/WaxPatch">WaxPatch</a>，WaxPatch 可以实现通过服务器更新来动态修改客户端的逻辑。而 WaxPatch 主要是修改了 Wax 中的 wax_instance.m文件，在其中加入了 <code>class_replaceMethod</code> 来替换原始实现，从而实现修改客户端的原有行为。</p></li>
</ul>


<h2>总结</h2>

<p>通过本文，我们了解到了 Objective-C 语言的对象模型，以及 Objective-C 语言对象模型中对 <strong>isa swizzling</strong> 和 <strong>method swizzling</strong> 的支持。本文也通过具体的实例代码和开源项目，让我们对该对象模型提供的动态性有了更加深刻的认识。</p>

<h2>后记</h2>

<p>文章发表后，一些同行指出在 ARM64 的 CP U下，<strong>isa</strong> 的内部结构有变化。这点我是知道的，不过希望以后再撰文讨论。感兴趣的同学可以查看苹果今年WWDC2013的视频：《Session 404 Advanced in Objective-C》。</p>

<h2>参考链接</h2>

<ul>
<li><p><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html">https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html</a></p></li>
<li><p><a href="http://www.sealiesoftware.com/blog/archive/2009/04/14/objc_explain_Classes_and_metaclasses.html">http://www.sealiesoftware.com/blog/archive/2009/04/14/objc_explain_Classes_and_metaclasses.html</a></p></li>
<li><p><a href="http://www.devalot.com/articles/2011/11/objc-object-model.html">http://www.devalot.com/articles/2011/11/objc-object-model.html</a></p></li>
<li><p><a href="http://www.cocoawithlove.com/2010/01/what-is-meta-class-in-objective-c.html">http://www.cocoawithlove.com/2010/01/what-is-meta-class-in-objective-c.html</a></p></li>
<li><p><a href="http://www.sealiesoftware.com/blog/archive/2009/04/14/objc_explain_Classes_and_metaclasses.html">http://www.sealiesoftware.com/blog/archive/2009/04/14/objc_explain_Classes_and_metaclasses.html</a></p></li>
<li><p><a href="http://wwwmain.gnustep.org/resources/downloads.php">gunstep的实现源码</a></p></li>
<li><p><a href="http://algorithm.com.au/downloads/talks/objective-c-internals/objective-c-internals.pdf">http://algorithm.com.au/downloads/talks/objective-c-internals/objective-c-internals.pdf</a></p></li>
<li><p><a href="http://opensource.apple.com/source/objc4/objc4-532/runtime/">http://opensource.apple.com/source/objc4/objc4-532/runtime/</a></p></li>
<li><p><a href="https://github.com/AFNetworking/AFNetworking">https://github.com/AFNetworking/AFNetworking</a></p></li>
<li><p><a href="https://github.com/jverkoey/nimbus">https://github.com/jverkoey/nimbus</a></p></li>
<li><p><a href="https://github.com/mmin18/WaxPatch">https://github.com/mmin18/WaxPatch</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 GCD]]></title>
    <link href="http://orinchen.github.io/blog/2014/03/15/use-gcd/"/>
    <updated>2014-03-15T10:35:36+08:00</updated>
    <id>http://orinchen.github.io/blog/2014/03/15/use-gcd</id>
    <content type="html"><![CDATA[<p>本文转载自:<a href="http://blog.devtang.com/blog/2012/02/22/use-gcd/">唐巧的技术博客</a></p>

<h2>什么是GCD</h2>

<p>Grand Central Dispatch (GCD)是 Apple 开发的一个多核编程的解决方法。该方法在 Mac OS X 10.6 雪豹中首次推出，并随后被引入到了 iOS4.0 中。GCD 是一个替代诸如 NSThread, NSOperationQueue, NSInvocationOperation 等技术的很高效和强大的技术，它看起来象就其它语言的闭包(Closure)一样，但苹果把它叫做 blocks。</p>

<!--more-->


<h2>应用举例</h2>

<p>让我们来看一个编程场景。我们要在 iPhone 上做一个下载网页的功能，该功能非常简单，就是在 iPhone 上放置一个按钮，点击该按钮时，显示一个转动的圆圈，表示正在进行下载，下载完成之后，将内容加载到界面上的一个文本控件中。</p>

<h2>不用GCD前</h2>

<p>虽然功能简单，但是我们必须把下载过程放到后台线程中，否则会阻塞UI线程显示。所以，如果不用 GCD, 我们需要写如下3个方法：</p>

<ul>
<li>someClick 方法是点击按钮后的代码，可以看到我们用 NSInvocationOperation 建了一个后台线程，并且放到 NSOperationQueue 中。后台线程执行 download 方法。</li>
<li>download 方法处理下载网页的逻辑。下载完成后用 performSelectorOnMainThread 执行download_completed 方法。</li>
<li>download_completed 进行 clear up 的工作，并把下载的内容显示到文本控件中。</li>
</ul>


<p>这3个方法的代码如下。可以看到，虽然 开始下载 –> 下载中 –> 下载完成 这3个步骤是整个功能的三步。但是它们却被切分成了3块。他们之间因为是3个方法，所以还需要传递数据参数。如果是复杂的应用，数据参数很可能就不象本例子中的 NSString 那么简单了，另外，下载可能放到 Model 的类中来做，而界面的控制放到 View Controller 层来做，这使得本来就分开的代码变得更加散落。代码的可读性大大降低。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="bp">NSOperationQueue</span> <span class="o">*</span> <span class="n">queue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">someClick:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">indicator</span><span class="p">.</span><span class="n">hidden</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">indicator</span> <span class="n">startAnimating</span><span class="p">];</span>
</span><span class='line'>    <span class="n">queue</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSOperationQueue</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">NSInvocationOperation</span> <span class="o">*</span> <span class="n">op</span> <span class="o">=</span> <span class="p">[[[</span><span class="bp">NSInvocationOperation</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget</span><span class="p">:</span><span class="nb">self</span> <span class="nl">selector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">download</span><span class="p">)</span> <span class="nl">object</span><span class="p">:</span><span class="nb">nil</span><span class="p">]</span> <span class="n">autorelease</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">queue</span> <span class="nl">addOperation</span><span class="p">:</span><span class="n">op</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">download</span> <span class="p">{</span>
</span><span class='line'>    <span class="bp">NSURL</span> <span class="o">*</span> <span class="n">url</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSURL</span> <span class="nl">URLWithString</span><span class="p">:</span><span class="s">@&quot;http://www.youdao.com&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">NSError</span> <span class="o">*</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'>    <span class="bp">NSString</span> <span class="o">*</span> <span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSString</span> <span class="nl">stringWithContentsOfURL</span><span class="p">:</span><span class="n">url</span> <span class="nl">encoding</span><span class="p">:</span><span class="n">NSUTF8StringEncoding</span> <span class="nl">error</span><span class="p">:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">data</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span> <span class="nl">performSelectorOnMainThread</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">download_completed</span><span class="p">:)</span> <span class="nl">withObject</span><span class="p">:</span><span class="n">data</span> <span class="nl">waitUntilDone</span><span class="p">:</span><span class="nb">NO</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;error when download:%@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
</span><span class='line'>        <span class="p">[</span><span class="n">queue</span> <span class="k">release</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">download_completed:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span> <span class="nv">data</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;call back&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">indicator</span> <span class="n">stopAnimating</span><span class="p">];</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">indicator</span><span class="p">.</span><span class="n">hidden</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">content</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">queue</span> <span class="k">release</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>使用GCD后</h2>

<p>如果使用 GCD，以上3个方法都可以放到一起，如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 原代码块一</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">indicator</span><span class="p">.</span><span class="n">hidden</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">indicator</span> <span class="n">startAnimating</span><span class="p">];</span>
</span><span class='line'><span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="c1">// 原代码块二</span>
</span><span class='line'>    <span class="bp">NSURL</span> <span class="o">*</span> <span class="n">url</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSURL</span> <span class="nl">URLWithString</span><span class="p">:</span><span class="s">@&quot;http://www.youdao.com&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">NSError</span> <span class="o">*</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'>    <span class="bp">NSString</span> <span class="o">*</span> <span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSString</span> <span class="nl">stringWithContentsOfURL</span><span class="p">:</span><span class="n">url</span> <span class="nl">encoding</span><span class="p">:</span><span class="n">NSUTF8StringEncoding</span> <span class="nl">error</span><span class="p">:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">data</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 原代码块三</span>
</span><span class='line'>        <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">indicator</span> <span class="n">stopAnimating</span><span class="p">];</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">indicator</span><span class="p">.</span><span class="n">hidden</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">content</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;error when download:%@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>首先我们可以看到，代码变短了。因为少了原来3个方法的定义，也少了相互之间需要传递的变量的封装。</p>

<p>另外，代码变清楚了，虽然是异步的代码，但是它们被 GCD 合理的整合在一起，逻辑非常清晰。如果应用上 MVC 模式，我们也可以将 View Controller 层的回调函数用 GCD 的方式传递给 Modal 层，这相比以前用 @selector 的方式，代码的逻辑关系会更加清楚。</p>

<h2>GCD的定义</h2>

<p>简单 GCD 的定义有点象函数指针，差别是用 ^ 替代了函数指针的 * 号，如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 申明变量</span>
</span><span class='line'> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">(</span><span class="o">^</span><span class="n">loggerBlock</span><span class="p">)(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'> <span class="c1">// 定义</span>
</span><span class='line'>
</span><span class='line'> <span class="n">loggerBlock</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>      <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Hello world&quot;</span><span class="p">);</span>
</span><span class='line'> <span class="p">};</span>
</span><span class='line'> <span class="c1">// 调用</span>
</span><span class='line'> <span class="n">loggerBlock</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是大多数时候，我们通常使用内联的方式来定义它，即将它的程序块写在调用的函数里面，例如这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>      <span class="c1">// something</span>
</span><span class='line'> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>从上面大家可以看出，block 有如下特点：</p>

<ol>
<li>程序块可以在代码中以内联的方式来定义。</li>
<li>程序块可以访问在创建它的范围内的可用的变量。</li>
</ol>


<h2>系统提供的 dispatch 方法</h2>

<p>为了方便地使用 GCD，苹果提供了一些方法方便我们将 block 放在主线程或后台线程执行，或者延后执行。使用的例子如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//  后台执行：</span>
</span><span class='line'> <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>      <span class="c1">// something</span>
</span><span class='line'> <span class="p">});</span>
</span><span class='line'> <span class="c1">// 主线程执行：</span>
</span><span class='line'> <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>      <span class="c1">// something</span>
</span><span class='line'> <span class="p">});</span>
</span><span class='line'> <span class="c1">// 一次性执行：</span>
</span><span class='line'> <span class="k">static</span> <span class="kt">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
</span><span class='line'> <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>     <span class="c1">// code to be executed once</span>
</span><span class='line'> <span class="p">});</span>
</span><span class='line'> <span class="c1">// 延迟2秒执行：</span>
</span><span class='line'> <span class="kt">double</span> <span class="n">delayInSeconds</span> <span class="o">=</span> <span class="mf">2.0</span><span class="p">;</span>
</span><span class='line'> <span class="kt">dispatch_time_t</span> <span class="n">popTime</span> <span class="o">=</span> <span class="n">dispatch_time</span><span class="p">(</span><span class="n">DISPATCH_TIME_NOW</span><span class="p">,</span> <span class="n">delayInSeconds</span> <span class="o">*</span> <span class="n">NSEC_PER_SEC</span><span class="p">);</span>
</span><span class='line'> <span class="n">dispatch_after</span><span class="p">(</span><span class="n">popTime</span><span class="p">,</span> <span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class='line'>     <span class="c1">// code to be executed on the main queue after delay</span>
</span><span class='line'> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>dispatch_queue_t 也可以自己定义，如要要自定义 queue，可以用 dispatch_queue_create 方法，示例如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">dispatch_queue_t</span> <span class="n">urls_queue</span> <span class="o">=</span> <span class="n">dispatch_queue_create</span><span class="p">(</span><span class="s">&quot;blog.devtang.com&quot;</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'><span class="n">dispatch_async</span><span class="p">(</span><span class="n">urls_queue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>     <span class="c1">// your code</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="n">dispatch_release</span><span class="p">(</span><span class="n">urls_queue</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外，GCD 还有一些高级用法，例如让后台2个线程并行执行，然后等2个线程都结束后，再汇总执行结果。这个可以用 dispatch_group, dispatch_group_async 和 dispatch_group_notify 来实现，示例如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">dispatch_group_t</span> <span class="n">group</span> <span class="o">=</span> <span class="n">dispatch_group_create</span><span class="p">();</span>
</span><span class='line'> <span class="n">dispatch_group_async</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>      <span class="c1">// 并行执行的线程一</span>
</span><span class='line'> <span class="p">});</span>
</span><span class='line'> <span class="n">dispatch_group_async</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>      <span class="c1">// 并行执行的线程二</span>
</span><span class='line'> <span class="p">});</span>
</span><span class='line'> <span class="n">dispatch_group_notify</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>      <span class="c1">// 汇总结果</span>
</span><span class='line'> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>修改block之外的变量</h2>

<p>默认情况下，在程序块中访问的外部变量是复制过去的，即写操作不对原变量生效。但是你可以加上 __block 来让其写操作生效，示例代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">__block</span> <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'> <span class="kt">void</span>  <span class="p">(</span><span class="o">^</span><span class="n">foo</span><span class="p">)(</span><span class="kt">void</span><span class="p">)</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>      <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'> <span class="n">foo</span><span class="p">();</span>
</span><span class='line'> <span class="c1">// 这里，a的值被修改为1</span>
</span></code></pre></td></tr></table></div></figure>


<h2>后台运行</h2>

<p>使用 block 的另一个用处是可以让程序在后台较长久的运行。在以前，当 app 被按 home 键退出后，app 仅有最多5秒钟的时候做一些保存或清理资源的工作。但是应用可以调用UIApplication 的 beginBackgroundTaskWithExpirationHandler 方法，让app最多有 10 分钟的时间在后台长久运行。这个时间可以用来做清理本地缓存，发送统计数据等工作。</p>

<p>让程序在后台长久运行的示例代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// AppDelegate.h文件</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">assign</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="n">UIBackgroundTaskIdentifier</span> <span class="n">backgroundUpdateTask</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// AppDelegate.m文件</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">applicationDidEnterBackground:</span><span class="p">(</span><span class="bp">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="n">beingBackgroundUpdateTask</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">// 在这里加上你需要长久运行的代码</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="n">endBackgroundUpdateTask</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">beingBackgroundUpdateTask</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">backgroundUpdateTask</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="nl">beginBackgroundTaskWithExpirationHandler</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span> <span class="n">endBackgroundUpdateTask</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">endBackgroundUpdateTask</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[[</span><span class="bp">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="nl">endBackgroundTask</span><span class="p">:</span> <span class="nb">self</span><span class="p">.</span><span class="n">backgroundUpdateTask</span><span class="p">];</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">backgroundUpdateTask</span> <span class="o">=</span> <span class="n">UIBackgroundTaskInvalid</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>总结</h2>

<p>总体来说，GCD 能够极大地方便开发者进行多线程编程。大家应该尽量使用 GCD 来处理后台线程和 UI 线程的交互。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[玩转字符串]]></title>
    <link href="http://orinchen.github.io/blog/2014/03/07/working-with-strings/"/>
    <updated>2014-03-07T23:32:36+08:00</updated>
    <id>http://orinchen.github.io/blog/2014/03/07/working-with-strings</id>
    <content type="html"><![CDATA[<p>在每个应用里我们都大量使用字符串。下面我们将快速看看一些常见的操作字符串的方法，过一遍常见操作的最佳实践。</p>

<!--more-->


<h2>字符串的比较、搜索和排序</h2>

<p>排序和比较字符串比第一眼看上去要复杂得多。不只是因为字符串可以包含 <strong>代理对（surrogate pairs）</strong> (详见 <a href="http://www.objc.io/issue-9/unicode.html#peculiar-unicode-features">Ole 写的这篇关于 Unicode 的文章</a>) ，而且比较还与字符串的本地化相关。在某些极端情况下相当棘手。</p>

<p>苹果文档中 <strong><em>String Programming Guide</em></strong> 里有一节叫做<strong>“字符与字形集群（Characters and Grapheme Clusters）”</strong>，里面提到一些陷阱。例如对于排序来说，一些欧洲语言将序列“ch”当作单个字母。在一些语言里，“ä”被认为等同于“a”，而在其它语言里它却被排在“z”后面。</p>

<p>而 <code>NSString</code> 有一些方法来帮助我们处理这种复杂性。首先看下面的方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">NSComparisonResult</span><span class="p">)</span><span class="nf">compare:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">aString</span>
</span><span class='line'>                      <span class="nf">options:</span><span class="p">(</span><span class="n">NSStringCompareOptions</span><span class="p">)</span><span class="nv">mask</span>
</span><span class='line'>                        <span class="nf">range:</span><span class="p">(</span><span class="n">NSRange</span><span class="p">)</span><span class="nv">range</span>
</span><span class='line'>                       <span class="nf">locale:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">locale</span>
</span></code></pre></td></tr></table></div></figure>


<p>它带给我们充分的灵活性。另外，还有很多“便捷函数”都使用了这个方法。
与比较有关的可用参数如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSCaseInsensitiveSearch</span>
</span><span class='line'><span class="n">NSLiteralSearch</span>
</span><span class='line'><span class="n">NSNumericSearch</span>
</span><span class='line'><span class="n">NSDiacriticInsensitiveSearch</span>
</span><span class='line'><span class="n">NSWidthInsensitiveSearch</span>
</span><span class='line'><span class="n">NSForcedOrderingSearch</span>
</span></code></pre></td></tr></table></div></figure>


<p>它们都可以用逻辑或运算组合在一起。</p>

<ul>
<li><p><code>NSCaseInsensitiveSearch</code>：“A”等同于“a”，然而在某些地方还有更复杂的情况。例如，在德国，“ß” 和“SS”是等价的。</p></li>
<li><p><code>NSLiteralSearch</code>：Unicode 的点对 Unicode 点比较。它只在所有字符都用相同的方式组成的情况下才会返回相等。LATIN CAPITAL LETTER A 加上 COMBINING RING ABOVE 并不等同于 LATIN CAPITAL LETTER A WITH RING ABOVE.</p></li>
</ul>


<blockquote><p>译注：这个要解释一下，首先，每一个Unicode都是有官方名字的！LATIN CAPITAL  LETTER A是一个大写“A”，COMBINING RING ABOVE是一个  ̊，LATIN CAPITAL LETTER A WITH RING ABOVE，这是Å前两者的组合不等同于后者。</p>

<p>Clients that use persistent connections SHOULD limit the number of simultaneous connections that they maintain to a given server. A single-user client SHOULD NOT maintain more than 2 connections with any server or proxy. A proxy SHOULD use up to 2*N connections to another server or proxy, where N is the number of simultaneously active users. These guidelines are intended to improve HTTP response times and avoid congestion.</p></blockquote>

<p> <blockquote><p>Clients that use persistent connections SHOULD limit the number of simultaneous connections that they maintain to a given server. A single-user client SHOULD NOT maintain more than 2 connections with any server or proxy. A proxy SHOULD use up to 2*N connections to another server or proxy, where N is the number of simultaneously active users. These guidelines are intended to improve HTTP response times and avoid congestion.</p><footer><strong><a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec8.html#sec8.1.4">http://www.w3.org/Protocols/rfc2616/rfc2616-sec8.html#sec8.1.4</a></strong> <cite>Hypertext Transfer Protocol &ndash; HTTP/1.1 - Sec. 8.1.4</cite></footer></blockquote></p>

<ul>
<li><p><code>NSNumericSearch</code>：它对字符串里的数字排序，所以 “Section 9” &lt; “Section 20” &lt; “Section 100.”</p></li>
<li><p><code>NSDiacriticInsensitiveSearch</code> : “A”等同于“Å”等同于“Ä.”</p></li>
<li><p><code>NSWidthInsensitiveSearch</code> : 一些东亚文字（平假名 和 片假名）有全宽与半宽两种形式。
很值得一提的是 <code>- (NSComparisonResult)localizedStandardCompare:</code>，它排序的方式和 Finder 一样。它对应的选项是 <code>NSCaseInsensitiveSearch</code>、<code>NSNumericSearch</code>、 <code>NSWidthInsensitiveSearch</code> 以及 <code>NSForcedOrderingSearch</code> 。如果我们要在UI上显示一个文件列表，用它就最合适不过了。</p></li>
</ul>


<p>大小写不敏感的比较和音调符号不敏感的比较都是相对复杂和昂贵的操作。如果我们需要比较很多次字符串那这就会成为一个性能上的瓶颈（例如对一个大的数据集进行排序），一个常见的解决方法是同时存储原始字符串和折叠字符串。例如，我们的 <code>Contact</code>  类有一个正常的 <code>name</code>  属性，在内部它还有一个 <code>foldedName</code>  属性，它将自动在 <code>name</code> 变化时更新。那么我们就可以使用 <code>NSLiteralSearch</code>  来比较 <code>name</code> 的折叠版本。<code>NSString</code> 有一个方法来创建折叠版本：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">stringByFoldingWithOptions:</span><span class="p">(</span><span class="n">NSStringCompareOptions</span><span class="p">)</span><span class="nv">options</span>
</span><span class='line'>                                  <span class="nf">locale:</span><span class="p">(</span><span class="bp">NSLocale</span> <span class="o">*</span><span class="p">)</span><span class="nv">locale</span>
</span></code></pre></td></tr></table></div></figure>


<h2>搜索</h2>

<p>要在一个字符串中搜索子字符串，最灵活性的方法是:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">NSRange</span><span class="p">)</span><span class="nf">rangeOfString:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">aString</span>
</span><span class='line'>                 <span class="nf">options:</span><span class="p">(</span><span class="n">NSStringCompareOptions</span><span class="p">)</span><span class="nv">mask</span>
</span><span class='line'>                   <span class="nf">range:</span><span class="p">(</span><span class="n">NSRange</span><span class="p">)</span><span class="nv">searchRange</span>
</span><span class='line'>                  <span class="nf">locale:</span><span class="p">(</span><span class="bp">NSLocale</span> <span class="o">*</span><span class="p">)</span><span class="nv">locale</span>
</span></code></pre></td></tr></table></div></figure>


<p>同时，还有一些“便捷方法”，它们在最终都会调用上面这个方法，我们可以传入上面列出的参数，以及以下这些额外的参数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSBackwardsSearch</span>
</span><span class='line'><span class="n">NSAnchoredSearch</span>
</span><span class='line'><span class="n">NSRegularExpressionSearch</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p><code>NSBackwardsSearch</code>：在字符串的末尾开始反向搜索。</p></li>
<li><p><code>NSAnchoredSearch</code>： 只考虑搜索的起始点（单独使用）或终止点（当与  <code>NSBackwardsSearch</code> 结合使用时）。这个方法可以用来检查前缀或者后缀，以及 <em>大小写不敏感（case-insensitive）</em>或者 <em>音调不敏感（diacritic-insensitive）</em>的比较。</p></li>
<li><p><code>NSRegularExpressionSearch</code>：使用正则表达式搜索，要了解更多与使用正则表达式有关的信息，请关注 Chris’s 的 String Parsing 。</p></li>
</ul>


<p>另外，还有一个方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">NSRange</span><span class="p">)</span><span class="nf">rangeOfCharacterFromSet:</span><span class="p">(</span><span class="bp">NSCharacterSet</span> <span class="o">*</span><span class="p">)</span><span class="nv">aSet</span>
</span><span class='line'>                           <span class="nf">options:</span><span class="p">(</span><span class="n">NSStringCompareOptions</span><span class="p">)</span><span class="nv">mask</span>
</span><span class='line'>                             <span class="nf">range:</span><span class="p">(</span><span class="n">NSRange</span><span class="p">)</span><span class="nv">aRange</span>
</span></code></pre></td></tr></table></div></figure>


<p>与前面搜索字符串不同的是， 它只搜索给定字符集的第一个字符。即使只搜索一个字符，但如果由于此字符是由元字符组成的序列（composed character sequence），所以返回范围的长度也可能大于1。</p>

<h2>大写与小写</h2>

<p>一定不要使用 <code>NSString</code> 的 <code>-uppercaseString</code>  或者 <code>-lowercaseString</code> 的方法来处理 UI 显示的字符串，而应该使用 <code>-uppercaseStringWithLocale</code> 来代替， 比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSString</span> <span class="o">*</span><span class="n">name</span> <span class="o">=</span> <span class="s">@&quot;Tómas&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">cell</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="p">[</span><span class="n">name</span> <span class="nl">uppercaseStringWithLocale</span><span class="p">:[</span><span class="bp">NSLocale</span> <span class="n">currentLocale</span><span class="p">]];</span>
</span></code></pre></td></tr></table></div></figure>


<h2>格式化字符串</h2>

<p>同 <strong>C</strong> 语言中的 <code>sprintf</code> 函数( ANSI C89 中的一个函数 )类似, <strong>Objective-C</strong> 中的 <code>NSString</code> 类也有如下的3个方法:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span><span class="nf">initWithFormat:</span>
</span><span class='line'><span class="p">-</span><span class="nf">initWithFormat:arguments:</span>
</span><span class='line'><span class="p">+</span><span class="nf">stringWithFormat:</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要注意这些格式化方法都是 <strong><em>非本地化</em></strong> 的 。所以这些方法得到的字符串是不能直接拿来显示在用户界面上的。如果需要本地化，那我们需要使用下面这些方法:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span><span class="nf">initWithFormat:locale:</span>
</span><span class='line'><span class="p">-</span><span class="nf">initWithFormat:locale:arguments:</span>
</span><span class='line'><span class="p">+</span><span class="nf">localizedStringWithFormat:</span>
</span></code></pre></td></tr></table></div></figure>


<p>Florian 有一篇关于<a href="http://www.objc.io/issue-9/string-localization.html#localized-format-strings">字符串的本地化</a>的文章更详细地讨论了这个问题。</p>

<p><a href="http://linux.die.net/man/3/printf">printf(3)</a>的man页面有关于它如何格式化字符串的全部细节。除了所谓的转换格式（它以％字符开始），格式化字符串会被逐字复制：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">double</span> <span class="n">a</span> <span class="o">=</span> <span class="mf">25812.8074434</span><span class="p">;</span>
</span><span class='line'><span class="kt">float</span> <span class="n">b</span> <span class="o">=</span> <span class="mf">376.730313461</span><span class="p">;</span>
</span><span class='line'><span class="bp">NSString</span> <span class="o">*</span><span class="n">s</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;%g :: %g&quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">];</span>
</span><span class='line'><span class="c1">// &quot;25812.8 :: 376.73&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们格式化了两个浮点数。注意单精度浮点数和双精度浮点数能同一个转换格式。</p>

<h2>对象</h2>

<p>除了来自 <a href="http://linux.die.net/man/3/printf">printf(3)</a> 的转换规范，我们还可以使用 <code>%@</code> 来输出一个对象。在对象描述那一节中有述，如果对象响应 <code>-descriptionWithLocale:</code> 方法，则调用它，否则调用 <code>-description</code>。<code>%@</code> 被结果替换。</p>

<h2>整数</h2>

<p>使用整形数字时，有些需要注意的细节。首先，有符号数（d和i）和无符号数（o、u、x和X）分别有转换规范。需要使用者选择具体的类型。
如果我们使用的东西是 <code>printf</code> 不知道的，我们必须要做类型转换。<code>NSUInteger</code> 正是这样一个例子，它在64位和32位平台上是不一样的。下面的例子可以同时工作在32位和64位平台。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">uint64_t</span> <span class="n">p</span> <span class="o">=</span> <span class="mi">2305843009213693951</span><span class="p">;</span>
</span><span class='line'><span class="bp">NSString</span> <span class="o">*</span><span class="n">s</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;The ninth Mersenne prime is %llu&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span><span class="p">)</span> <span class="n">p</span><span class="p">];</span>
</span><span class='line'><span class="c1">// &quot;The ninth Mersenne prime is 2305843009213693951&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<table>
<thead>
<tr>
<th style="text-align:center;">    Modifier   </th>
<th style="text-align:center;">      d, i      </th>
<th style="text-align:center;">     o, u, x, X        </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">  hh           </td>
<td style="text-align:center;">  signed char   </td>
<td style="text-align:center;">  unsigned char        </td>
</tr>
<tr>
<td style="text-align:center;">  h            </td>
<td style="text-align:center;">  short         </td>
<td style="text-align:center;">  unsigned short       </td>
</tr>
<tr>
<td style="text-align:center;">  (none)       </td>
<td style="text-align:center;">  int           </td>
<td style="text-align:center;">  unsigned int         </td>
</tr>
<tr>
<td style="text-align:center;">  l (ell)      </td>
<td style="text-align:center;">  long          </td>
<td style="text-align:center;">  unsigned long        </td>
</tr>
<tr>
<td style="text-align:center;">  ll (ell ell) </td>
<td style="text-align:center;">  long long     </td>
<td style="text-align:center;">  unsigned long long   </td>
</tr>
<tr>
<td style="text-align:center;">  j            </td>
<td style="text-align:center;">  intmax_t      </td>
<td style="text-align:center;">  uintmax_t            </td>
</tr>
<tr>
<td style="text-align:center;">  t            </td>
<td style="text-align:center;">  ptrdiff_t     </td>
<td style="text-align:center;">                       </td>
</tr>
<tr>
<td style="text-align:center;">  z            </td>
<td style="text-align:center;">                </td>
<td style="text-align:center;">  size_t               </td>
</tr>
</tbody>
</table>


<p>适用于整数的转换规则有：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="o">-</span><span class="mi">150004021</span><span class="p">;</span>
</span><span class='line'><span class="n">uint</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">150004021U</span><span class="p">;</span>
</span><span class='line'><span class="bp">NSString</span> <span class="o">*</span><span class="n">s</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;d:%d i:%i o:%o u:%u x:%x X:%X&quot;</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">n</span><span class="p">];</span>
</span><span class='line'><span class="c1">// &quot;d:-150004021 i:-150004021 o:1074160465 u:150004021 x:8f0e135 X:8F0E135&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>%d</code> 和 <code>%i</code> 具有一样的功能，它们都打印出有符号十进制数。<code>%o</code> 就较为晦涩了：它使用八进制表示。<code>%u</code> 输出无符号十进制数——它是我们常用的。最后 <code>%x</code> 和 <code>%X</code> 使用十六进制表示——后者使用大写字母。</p>

<p>对于 <code>x%</code> 和 <code>X%</code>，我们可以在 0x 前面添加 “#” 井字符前缀看，增加可读性。
我们可以传入特定参数，来设置最小字段宽度和最小数字位数（默认两者都是0），以及左/右对齐。请查看man页面获取详细信息。下面是一些例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
</span><span class='line'><span class="bp">NSString</span> <span class="o">*</span><span class="n">s</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;&#39;%4d&#39; &#39;%-4d&#39; &#39;%+4d&#39; &#39;%4.3d&#39; &#39;%04d&#39;&quot;</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">m</span><span class="p">];</span>
</span><span class='line'><span class="c1">// ‘42’ ‘42 ’ ‘ +42’ ‘ 042’ ‘0042’</span>
</span><span class='line'><span class="n">m</span> <span class="o">=</span> <span class="o">-</span><span class="mi">42</span><span class="p">;</span>
</span><span class='line'><span class="bp">NSString</span> <span class="o">*</span><span class="n">s</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;&#39;%4d&#39; &#39;%-4d&#39; &#39;%+4d&#39; &#39;%4.3d&#39; &#39;%04d&#39;&quot;</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">m</span><span class="p">];</span>
</span><span class='line'><span class="c1">// ‘ -42’ ‘-42 ’ ‘ -42’ ‘-042’ ‘-042’</span>
</span></code></pre></td></tr></table></div></figure>


<p>%p  可用于打印出指针——它和 %#x  相似但可同时在32位和64位平台上正常工作。</p>

<h2>浮点数</h2>

<p>关于浮点数的转换规则有8个：eEfFgGaA。但除了 <code>%f</code> 和 <code>%g</code> 外我们很少使用其它的。对于指数部分，小写的版本使用小写 e，大写的版本就使用大写 E。
通常 <code>%g</code>  是浮点数的全能转换符 ，它与 <code>%f</code>  的不同在下面的例子里显示得很清楚：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">double</span> <span class="n">v</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">12345</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mf">0.12</span><span class="p">,</span> <span class="mf">0.12345678901234</span><span class="p">,</span> <span class="mf">0.0000012345678901234</span><span class="p">};</span>
</span><span class='line'><span class="bp">NSString</span> <span class="o">*</span><span class="n">s</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;%g %g %g %g %g&quot;</span><span class="p">,</span> <span class="n">v</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">v</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">v</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">v</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="n">v</span><span class="p">[</span><span class="mi">4</span><span class="p">]];</span>
</span><span class='line'><span class="c1">// &quot;12345 12 0.12 0.123457 1.23457e-06&quot;</span>
</span><span class='line'><span class="bp">NSString</span> <span class="o">*</span><span class="n">s</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;%f %f %f %f %f&quot;</span><span class="p">,</span> <span class="n">v</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">v</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">v</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">v</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="n">v</span><span class="p">[</span><span class="mi">4</span><span class="p">]];</span>
</span><span class='line'><span class="c1">// &quot;12345.000000 12.000000 0.120000 0.123457 0.000001&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>和整数一样，我们依然可以指定最小字段宽度和最小数字数。</p>

<h2>指定位置</h2>

<p>格式化字符串允许使用参数来改变顺序：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;%2$@ %1$@&quot;</span><span class="p">,</span> <span class="s">@&quot;1st&quot;</span><span class="p">,</span> <span class="s">@&quot;2nd&quot;</span><span class="p">];</span>
</span><span class='line'><span class="c1">// &quot;2nd 1st&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们只需将从1开始的参数与一个$接在%后面。这种写法在进行本地化的时候极其常见，因为在不同语言中，各个参数所处的顺序位置可能不尽相同。</p>

<h2>NSLog()</h2>

<p><code>NSLog()</code> 函数与 <code>+stringWithFormat:</code> 的工作方式一样。我们可以调用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">int</span> <span class="n">magic</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;The answer is %d&quot;</span><span class="p">,</span> <span class="n">magic</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面的代码可以用同样的方式构造字符串：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">int</span> <span class="n">magic</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
</span><span class='line'><span class="bp">NSString</span> <span class="o">*</span><span class="n">output</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;The answer is %d&quot;</span><span class="p">,</span> <span class="n">magic</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>显然 <code>NSLog()</code> 会输出字符串，并且它会加上时间戳、进程名、进程ID以及线程ID作为前缀。</p>

<h2>实现能接受格式化字符串的方法</h2>

<p>有时在我们自己的类中提供一个能接受格式化字符串的方法会很方便使用。假设我们要实现的是一个 To Do 应用，它包含一个 <code>Item</code> 类。我们想要提供：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">itemWithTitleFormat:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">format</span><span class="p">,</span> <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>如此我们就可以使用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">Item</span> <span class="o">*</span><span class="n">item</span> <span class="o">=</span> <span class="p">[</span><span class="n">Item</span> <span class="nl">itemWithFormat</span><span class="p">:</span><span class="s">@&quot;Need to buy %@ for %@&quot;</span><span class="p">,</span> <span class="n">food</span><span class="p">,</span> <span class="n">pet</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种类型的方法可以接受可变数量的参数，所以被称为可变参数方法。我们必须使用一个定义在 <code>stdarg.h</code> 里的宏来使用可变参数。上面方法的实现代码可能会像下面这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">itemWithTitleFormat:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">format</span><span class="p">,</span> <span class="p">...;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">va_list</span> <span class="n">ap</span><span class="p">;</span>
</span><span class='line'>    <span class="n">va_start</span><span class="p">(</span><span class="n">ap</span><span class="p">,</span> <span class="n">format</span><span class="p">);</span>
</span><span class='line'>    <span class="bp">NSString</span> <span class="o">*</span><span class="n">title</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFormat</span><span class="p">:</span><span class="n">format</span> <span class="nl">locale</span><span class="p">:[</span><span class="bp">NSLocale</span> <span class="n">currentLocale</span><span class="p">]</span> <span class="nl">arguments</span><span class="p">:</span><span class="n">ap</span><span class="p">];</span>
</span><span class='line'>    <span class="n">va_end</span><span class="p">(</span><span class="n">ap</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">itemWithTitle</span><span class="p">:</span><span class="n">title</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>进一步，我们要添加 <code>NS_FORMAT_FUNCTION</code> 到方法的定义里（在头文件中），如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">itemWithTitleFormat:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">format</span><span class="p">,</span> <span class="p">...</span> <span class="n">NS_FORMAT_FUNCTION</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>NS_FORMAT_FUNCTION</code> 展开为一个方法 <code>__attribute__</code>，它会告诉编译器在索引 1 处的参数是一个格式化字符串，而实际参数从索引2开始。这将允许编译器检查格式化字符串而且会像 <code>NSLog()</code> 和 <code>-[NSString stringWithFormat:]</code> 一样输出警告信息。</p>

<h2>字符与字符串组件</h2>

<p>如有一个字符串“bird”，找出组成它的独立字母是很简单的。第二个字母是“i”（Unicode: LATIN SMALL LETTER I）。而对于像Åse这样的字符串就没那么简单了。看起来像三个字母的组合可有多种方式，例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">A</span> <span class="n">LATIN</span> <span class="n">CAPITAL</span> <span class="n">LETTER</span> <span class="n">A</span>
</span><span class='line'><span class="err">̊</span> <span class="n">COMBINING</span> <span class="n">RING</span> <span class="n">ABOVE</span>
</span><span class='line'><span class="n">s</span> <span class="n">LATIN</span> <span class="n">SMALL</span> <span class="n">LETTER</span> <span class="n">S</span>
</span><span class='line'><span class="n">e</span> <span class="n">LATIN</span> <span class="n">SMALL</span> <span class="n">LETTER</span> <span class="n">E</span>
</span></code></pre></td></tr></table></div></figure>


<p>或者</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="err">Å</span> <span class="n">LATIN</span> <span class="n">CAPITAL</span> <span class="n">LETTER</span> <span class="n">A</span> <span class="n">WITH</span> <span class="n">RING</span> <span class="n">ABOVE</span>
</span><span class='line'><span class="n">s</span> <span class="n">LATIN</span> <span class="n">SMALL</span> <span class="n">LETTER</span> <span class="n">S</span>
</span><span class='line'><span class="n">e</span> <span class="n">LATIN</span> <span class="n">SMALL</span> <span class="n">LETTER</span> <span class="n">E</span>
</span></code></pre></td></tr></table></div></figure>


<p>从 <a href="http://www.objc.io/issue-9/unicode.html#peculiar-unicode-features">Ole 写的这篇关于 Unicode 的文章</a> 里可以读到更多关于联合标记（<strong>combining marks</strong>）的信息，其他语言文字有更多复杂的代理对（<strong>complicated surrogate pairs</strong>）。</p>

<p>如果我们要在字符层面处理一个字符串，那我们就要小心翼翼。苹果官方文档中 <strong>String Programming Guide</strong> 有一节叫做 “<strong>Characters and Grapheme Clusters</strong>”，里面有更多关于这一点的细节。</p>

<p><code>NSString</code> 有两个方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span><span class="nf">rangeOfComposedCharacterSequencesForRange:</span>
</span><span class='line'><span class="p">-</span><span class="nf">rangeOfComposedCharacterSequenceAtIndex:</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面这两个方法在有的时候很有帮助，例如，分开一个字符串时保证我们不会分开被称为代理对（<strong>surrogate pairs</strong>）的东西。</p>

<p>如果我们要在字符串的字符上做工作，<code>NSString</code> 有个叫做 <code>-enumerateSubstringsInRange:options:usingBlock:</code> 的方法。
将 <code>NSStringEnumerationByComposedCharacterSequences</code> 作为选项传递，我们就能扫描所有的字符。例如，用下面的方法，我们可将字符串 “International Business Machines” 变成 “IBM”。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">initials</span><span class="p">;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="bp">NSMutableString</span> <span class="o">*</span><span class="n">result</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableString</span> <span class="n">string</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="nl">enumerateSubstringsInRange</span><span class="p">:</span><span class="n">NSMakeRange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">self</span><span class="p">.</span><span class="n">length</span><span class="p">)</span>
</span><span class='line'>                             <span class="nl">options</span><span class="p">:</span><span class="n">NSStringEnumerationByWords</span> <span class="o">|</span> <span class="n">NSStringEnumerationLocalized</span>
</span><span class='line'>                          <span class="nl">usingBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="n">word</span><span class="p">,</span> <span class="n">NSRange</span> <span class="n">wordRange</span><span class="p">,</span> <span class="n">NSRange</span> <span class="n">enclosingWordRange</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">__block</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">firstLetter</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span> <span class="nl">enumerateSubstringsInRange</span><span class="p">:</span><span class="n">NSMakeRange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">word</span><span class="p">.</span><span class="n">length</span><span class="p">)</span>
</span><span class='line'>                                 <span class="nl">options</span><span class="p">:</span><span class="n">NSStringEnumerationByComposedCharacterSequences</span>
</span><span class='line'>                              <span class="nl">usingBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="n">letter</span><span class="p">,</span> <span class="n">NSRange</span> <span class="n">letterRange</span><span class="p">,</span> <span class="n">NSRange</span> <span class="n">enclosingLetterRange</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">firstLetter</span> <span class="o">=</span> <span class="n">letter</span><span class="p">;</span>
</span><span class='line'>            <span class="o">*</span><span class="n">stop2</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">letter</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="n">result</span> <span class="nl">appendString</span><span class="p">:</span><span class="n">letter</span><span class="p">];</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如文档所示，词和句的分界可能基于地区的变化而变化。因此有 <code>NSStringEnumerationLocalized</code> 选项。</p>

<h2>多行文字字面量</h2>

<p>编译器的确有一个隐蔽的特性：把空格分隔开的字符串衔接到一起。这是什么意思呢？下面两段代码是完全等价的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSString</span> <span class="o">*</span><span class="n">limerick</span> <span class="o">=</span> <span class="s">@&quot;A lively young damsel named Menzies</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">@&quot;Inquired: «Do you know what this thenzies?»</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">@&quot;Her aunt, with a gasp,</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">@&quot;Replied: &quot;</span><span class="n">It</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">a</span> <span class="n">wasp</span><span class="p">,</span><span class="err">\</span><span class="n">n</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">@&quot;And you&#39;re holding the end where the stenzies.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>和</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSString</span> <span class="o">*</span><span class="n">limerick</span> <span class="o">=</span> <span class="s">@&quot;A lively young damsel named Menzies</span><span class="se">\n</span><span class="s">Inquired: «Do you know what this thenzies?»</span><span class="se">\n</span><span class="s">Her aunt, with a gasp,</span><span class="se">\n</span><span class="s">Replied: &quot;</span><span class="n">It</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">a</span> <span class="n">wasp</span><span class="p">,</span><span class="err">\</span><span class="n">nAnd</span> <span class="n">you</span><span class="err">&#39;</span><span class="n">re</span> <span class="n">holding</span> <span class="n">the</span> <span class="n">end</span> <span class="n">where</span> <span class="n">the</span> <span class="n">stenzies</span><span class="p">.</span><span class="err">\</span><span class="n">n</span><span class="s">&quot;;</span>
</span></code></pre></td></tr></table></div></figure>


<p>前者看起来更舒服，但是有一点要注意千万不要在任意一行末尾加入逗号或者分号。
同时也可以这样做：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSString</span> <span class="o">*</span> <span class="n">string</span> <span class="o">=</span> <span class="s">@&quot;The man &quot;</span> <span class="s">@&quot;who knows everything &quot;</span> <span class="s">@&quot;learns nothing&quot;</span> <span class="s">@&quot;.&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>*译者注：上面这行代码原文是有误的，原文是</p>

<pre><code class="objc">NSString *@"The man " @"who knows everything " @"learns nothing" @".";
</code></pre>

<p>读者可以尝试一下，如果这样写是无法通过编译的;</p></blockquote>

<p>编译器只是为我们提供了一个便捷的方式，将多个字符串在编译期组合在了一起。</p>

<h2>可变字符串</h2>

<p>可变字符串有两个常见的使用场景：</p>

<blockquote><ol>
<li>拼接字符串</li>
<li>替换部分字符串</li>
</ol>
</blockquote>

<h3>创建字符串</h3>

<p>可变字符串可以很轻易地把多个字符串在你需要的时候组合起来。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">magicToken</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="bp">NSMutableString</span> <span class="o">*</span><span class="n">string</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableString</span> <span class="n">string</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">usePrefix</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">string</span> <span class="nl">appendString</span><span class="p">:</span><span class="s">@&quot;&gt;&gt;&gt;&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">[</span><span class="n">string</span> <span class="nl">appendFormat</span><span class="p">:</span><span class="s">@&quot;%d--%d&quot;</span><span class="p">,</span> <span class="nb">self</span><span class="p">.</span><span class="n">foo</span><span class="p">,</span> <span class="nb">self</span><span class="p">.</span><span class="n">bar</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">useSuffix</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">string</span> <span class="nl">appendString</span><span class="p">:</span><span class="s">@&quot;&gt;&gt;&gt;&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">string</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里要注意的是，虽然原本返回值应该是一个 <code>NSString</code> 类型的对象，我们只是简单地返回一个 <code>NSMutableString</code> 类型的对象。</p>

<h3>替换字符串</h3>

<p>可变字符串除了追加组合之外，还提供了以下4个方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span><span class="nf">deleteCharactersInRange:</span>
</span><span class='line'><span class="p">-</span><span class="nf">insertString:atIndex:</span>
</span><span class='line'><span class="p">-</span><span class="nf">replaceCharactersInRange:withString:</span>
</span><span class='line'><span class="p">-</span><span class="nf">replaceOccurrencesOfString:withString:options:range:</span>
</span></code></pre></td></tr></table></div></figure>


<p>这些方法和 <code>NSString</code> 的类似：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span><span class="nf">stringByReplacingOccurrencesOfString:withString:</span>
</span><span class='line'><span class="p">-</span><span class="nf">stringByReplacingOccurrencesOfString:withString:options:range:</span>
</span><span class='line'><span class="p">-</span><span class="nf">stringByReplacingCharactersInRange:withString:</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是它没有创建新的字符串仅仅把当前字符串变成了一个可变的类型，这样让代码更容易阅读，以及提升些许性能。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSMutableString</span> <span class="o">*</span><span class="n">string</span><span class="p">;</span> <span class="c1">// 假设我们已经有了一个名为 string 的字符串</span>
</span><span class='line'><span class="c1">// 现在要去掉它的一个前缀，做法如下:</span>
</span><span class='line'><span class="bp">NSString</span> <span class="o">*</span><span class="n">prefix</span> <span class="o">=</span> <span class="s">@&quot;WeDon’tWantThisPrefix&quot;</span>
</span><span class='line'><span class="n">NSRange</span> <span class="n">r</span> <span class="o">=</span> <span class="p">[</span><span class="n">string</span> <span class="nl">rangeOfString</span><span class="p">:</span><span class="n">prefix</span>
</span><span class='line'>                          <span class="nl">options</span><span class="p">:</span><span class="n">NSAnchoredSearch</span>
</span><span class='line'>                            <span class="nl">range</span><span class="p">:</span><span class="n">NSMakeRange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">string</span><span class="p">.</span><span class="n">length</span><span class="p">)</span>
</span><span class='line'>                           <span class="nl">locale</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">location</span> <span class="o">!=</span> <span class="n">NSNotFound</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">string</span> <span class="nl">deleteCharactersInRange</span><span class="p">:</span><span class="n">r</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>连接组件</h2>

<p>一个看似微不足道但很常见的情况是字符串连接。比如现在有这样几个字符串：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">Hildr</span>
</span><span class='line'><span class="n">Heidrun</span>
</span><span class='line'><span class="n">Gerd</span>
</span><span class='line'><span class="n">Gu</span><span class="err">ð</span><span class="n">r</span><span class="err">ú</span><span class="n">n</span>
</span><span class='line'><span class="n">Freya</span>
</span><span class='line'><span class="n">Nanna</span>
</span><span class='line'><span class="n">Siv</span>
</span><span class='line'><span class="n">Ska</span><span class="err">ð</span><span class="n">i</span>
</span><span class='line'><span class="n">Gr</span><span class="err">ó</span><span class="n">a</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们想用它们来创建下面这样的一个字符串：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">Hildr</span><span class="p">,</span> <span class="n">Heidrun</span><span class="p">,</span> <span class="n">Gerd</span><span class="p">,</span> <span class="n">Gu</span><span class="err">ð</span><span class="n">r</span><span class="err">ú</span><span class="n">n</span><span class="p">,</span> <span class="n">Freya</span><span class="p">,</span> <span class="n">Nanna</span><span class="p">,</span> <span class="n">Siv</span><span class="p">,</span> <span class="n">Ska</span><span class="err">ð</span><span class="n">i</span><span class="p">,</span> <span class="n">Gr</span><span class="err">ó</span><span class="n">a</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么就可以这样做：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSArray</span> <span class="o">*</span><span class="n">names</span> <span class="o">=</span> <span class="l">@[</span><span class="s">&quot;Hildr&quot;</span><span class="p">,</span> <span class="s">@&quot;Heidrun&quot;</span><span class="p">,</span> <span class="s">@&quot;Gerd&quot;</span><span class="p">,</span> <span class="s">@&quot;Guðrún&quot;</span><span class="p">,</span> <span class="s">@&quot;Freya&quot;</span><span class="p">,</span> <span class="s">@&quot;Nanna&quot;</span><span class="p">,</span> <span class="s">@&quot;Siv&quot;</span><span class="p">,</span> <span class="s">@&quot;Skaði&quot;</span><span class="p">,</span> <span class="s">@&quot;Gróa&quot;</span><span class="l">]</span><span class="p">;</span>
</span><span class='line'><span class="bp">NSString</span> <span class="o">*</span><span class="n">result</span> <span class="o">=</span> <span class="p">[</span><span class="n">names</span> <span class="nl">componentsJoinedByString</span><span class="p">:</span><span class="s">@&quot;, &quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果我们将其显示给用户，我们就要使用本地化表达，确保将最后一部分替换相应语言的 “, and” ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@implementation</span> <span class="bp">NSArray</span> <span class="nl">(ObjcIO_GroupedComponents)</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">groupedComponentsWithLocale:</span><span class="p">(</span><span class="bp">NSLocale</span> <span class="o">*</span><span class="p">)</span><span class="nv">locale</span><span class="p">;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">count</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">@&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">count</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">self</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">count</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="bp">NSString</span> <span class="o">*</span><span class="n">joiner</span> <span class="o">=</span> <span class="n">NSLocalizedString</span><span class="p">(</span><span class="s">@&quot;joiner.2components&quot;</span><span class="p">,</span> <span class="s">@&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;%@%@%@&quot;</span><span class="p">,</span> <span class="nb">self</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">joiner</span><span class="p">,</span> <span class="nb">self</span><span class="p">[</span><span class="mi">1</span><span class="p">]];</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="bp">NSString</span> <span class="o">*</span><span class="n">joiner</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;%@ &quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">locale</span> <span class="nl">objectForKey</span><span class="p">:</span><span class="n">NSLocaleGroupingSeparator</span><span class="p">]];</span>
</span><span class='line'>        <span class="bp">NSArray</span> <span class="o">*</span><span class="n">first</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">subarrayWithRange</span><span class="p">:</span><span class="n">NSMakeRange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">self</span><span class="p">.</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)];</span>
</span><span class='line'>        <span class="bp">NSMutableString</span> <span class="o">*</span><span class="n">result</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableString</span> <span class="nl">stringWithString</span><span class="p">:[</span><span class="n">first</span> <span class="nl">componentsJoinedByString</span><span class="p">:</span><span class="n">joiner</span><span class="p">]];</span>
</span><span class='line'>        <span class="bp">NSString</span> <span class="o">*</span><span class="n">lastJoiner</span> <span class="o">=</span> <span class="n">NSLocalizedString</span><span class="p">(</span><span class="s">@&quot;joiner.3components&quot;</span><span class="p">,</span> <span class="s">@&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">[</span><span class="n">result</span> <span class="nl">appendString</span><span class="p">:</span><span class="n">lastJoiner</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">result</span> <span class="nl">appendString</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">lastObject</span><span class="p">];</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么在本地化的时候，如果是英语，应该是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="s">&quot;joiner.2components&quot;</span> <span class="o">=</span> <span class="s">&quot; and &quot;</span><span class="p">;</span>
</span><span class='line'><span class="s">&quot;joiner.3components&quot;</span> <span class="o">=</span> <span class="s">&quot;, and &quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果是德语，则应该是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="s">&quot;joiner.2components&quot;</span> <span class="o">=</span> <span class="s">&quot; und &quot;</span><span class="p">;</span>
</span><span class='line'><span class="s">&quot;joiner.3components&quot;</span> <span class="o">=</span> <span class="s">&quot; und &quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>结合组件的逆过程可以用 <code>-componentsSeparatedByString:</code>，这个方法会将一个字符串变成一个数组。例如，将 “12|5|3” 变成 “12”、“5” 和 “3”。</p>

<h2>对象描述</h2>

<p>在许多面向对象编程语言里，对象有一个叫做 <code>toString()</code> 或类似的方法。在 <strong>Objective-C</strong> 里，这个方法是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">description</span>
</span></code></pre></td></tr></table></div></figure>


<p>以及它的兄弟方法:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">debugDescription</span>
</span></code></pre></td></tr></table></div></figure>


<p>当自定义模型对象时，覆写 <code>-description</code> 方法是一个好习惯，在UI上显示该对象时调用的就是 <code>-description</code> 方法的返回值。假定我们有一个 <code>Contact</code> 类，下面是它的 <code>-description</code> 方法实现。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">description</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">.</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们可以像下面代码这样格式化字符串：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">label</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="n">NSLocalizedString</span><span class="p">(</span><span class="s">@&quot;%@ has been added to the group “%@”.&quot;</span><span class="p">,</span> <span class="s">@&quot;&quot;</span><span class="p">),</span> <span class="n">contact</span><span class="p">,</span> <span class="n">group</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为该字符串是用来做UI显示的，我们可能需要做本地化，那么我们就需要覆写</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">descriptionWithLocale:</span><span class="p">(</span><span class="bp">NSLocale</span> <span class="o">*</span><span class="p">)</span><span class="nv">locale</span>
</span></code></pre></td></tr></table></div></figure>


<p>方法。</p>

<p><code>%@</code> 会首先调用 <code>-descriptionWithLocale</code>，如果没有返回值，再调用 <code>-description</code>，在调试时，打印一个对象，我们用 <code>po</code> 这个命令（它是 print object 的缩写）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">(</span><span class="n">lldb</span><span class="p">)</span> <span class="n">po</span> <span class="n">contact</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果在调试窗口的终端下输入 <code>po contact</code>，它会调用对象的 <code>-debugDescription</code> 方法。默认情况下 <code>-debugDescription</code> 是直接调用 <code>-description</code>。如果你希望输出不同的信息，那么就分别覆写两个方法。大多数情况下，尤其是对于非数据模型的对象，你只需要覆写 <code>-description</code> 就能满足需求了。</p>

<p>实际上对象的标准格式化输出是这样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">description</span><span class="p">;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;&lt;%@: %p&gt;&quot;</span><span class="p">,</span> <span class="nb">self</span><span class="p">.</span><span class="k">class</span><span class="p">,</span> <span class="nb">self</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>NSObject</code> 就是这么干的。当你覆写该方法时，也可以像这样写。假定我们有一个 <code>DetailViewController</code>，在它的UI上要显示一个 <code>contact</code> ，我们可能会这样覆写该方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">description</span><span class="p">;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;&lt;%@: %p&gt; contact = %@&quot;</span><span class="p">,</span> <span class="nb">self</span><span class="p">.</span><span class="k">class</span><span class="p">,</span> <span class="nb">self</span><span class="p">,</span> <span class="nb">self</span><span class="p">.</span><span class="n">contact</span><span class="p">.</span><span class="n">debugDescription</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>NSManagedObject 子类的描述</h2>

<p>我们将特别注意向 <code>NSManagedObject</code> 的子类添加 <code>-description</code> / <code>-debugDescription</code> 的情况。由于 <strong>Core Data</strong> 的惰性加载机制（<strong>faulting mechanism</strong>）允许未加载数据的对象存在，所以当我们调用 <code>-debugDescription</code> 我们并不希望改变我们的应用程序的状态，因此我要确保检查 isFault  这个属性。例如，我们可如下这样实现它：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">debugDescription</span><span class="p">;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="bp">NSMutableString</span> <span class="o">*</span><span class="n">description</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;&lt;%@: %p&gt;&quot;</span><span class="p">,</span> <span class="nb">self</span><span class="p">.</span><span class="k">class</span><span class="p">,</span> <span class="nb">self</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span> <span class="nb">self</span><span class="p">.</span><span class="n">isFault</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">description</span> <span class="nl">appendFormat</span><span class="p">:</span><span class="s">@&quot; %@ </span><span class="se">\&quot;</span><span class="s">%@</span><span class="se">\&quot;</span><span class="s"> %gL&quot;</span><span class="p">,</span> <span class="nb">self</span><span class="p">.</span><span class="n">identifier</span><span class="p">,</span> <span class="nb">self</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="nb">self</span><span class="p">.</span><span class="n">metricVolume</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">description</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>再次，因为它们是模型对象，重载 <code>-description</code> 简单地返回描述实例的属性名就可以了。</p>

<h2>文件路径</h2>

<p>简单来说就是我们不应该使用 <code>NSString</code> 来描述文件路径。对于 OS X 10.7 和 iOS 5， <code>NSURL</code> 更便于使用，而且更有效率，它还能缓存文件系统的属性。
再者，<code>NSURL</code> 有八个方法来访问被称为 <strong>resource values</strong> 的东西。它们提供给我们一个稳定的接口来获取和设置文件与目录的多种属性，例如本地化文件名（<code>NSURLLocalizedNameKey</code>）、文件大小（<code>NSURLFileSizeKey</code>），以及创建日期（ <code>NSURLCreationDateKey</code>），等等。
尤其是在遍历目录内容时，使用 <code>-[NSFileManager enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:]</code> 附带一个关键词列表，然后用 <code>-getResourceValue:forKey:error:</code> 检索它们，能带来显著的性能提升。</p>

<p>下面是一个简短的例子展示了如何将它们组合在一起：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSError</span> <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="bp">NSFileManager</span> <span class="o">*</span><span class="n">fm</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSFileManager</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="bp">NSURL</span> <span class="o">*</span><span class="n">documents</span> <span class="o">=</span> <span class="p">[</span><span class="n">fm</span> <span class="nl">URLForDirectory</span><span class="p">:</span><span class="n">NSDocumentationDirectory</span>
</span><span class='line'>                              <span class="nl">inDomain</span><span class="p">:</span><span class="n">NSUserDomainMask</span>
</span><span class='line'>                     <span class="nl">appropriateForURL</span><span class="p">:</span><span class="nb">nil</span>
</span><span class='line'>                                <span class="nl">create</span><span class="p">:</span><span class="nb">NO</span>
</span><span class='line'>                                 <span class="nl">error</span><span class="p">:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'><span class="bp">NSArray</span> <span class="o">*</span><span class="n">properties</span> <span class="o">=</span> <span class="l">@[</span><span class="n">NSURLLocalizedNameKey</span><span class="p">,</span> <span class="n">NSURLCreationDateKey</span><span class="l">]</span><span class="p">;</span>
</span><span class='line'><span class="bp">NSDirectoryEnumerator</span> <span class="o">*</span><span class="n">dirEnumerator</span> <span class="o">=</span> <span class="p">[</span><span class="n">fm</span> <span class="nl">enumeratorAtURL</span><span class="p">:</span><span class="n">documents</span>
</span><span class='line'>                                <span class="nl">includingPropertiesForKeys</span><span class="p">:</span><span class="n">properties</span>
</span><span class='line'>                                                   <span class="nl">options</span><span class="p">:</span><span class="mi">0</span>
</span><span class='line'>                                              <span class="nl">errorHandler</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="bp">NSURL</span> <span class="o">*</span><span class="n">fileURL</span> <span class="k">in</span> <span class="n">dirEnumerator</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="bp">NSString</span> <span class="o">*</span><span class="n">name</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="bp">NSDate</span> <span class="o">*</span><span class="n">creationDate</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">fileURL</span> <span class="nl">getResourceValue</span><span class="p">:</span><span class="o">&amp;</span><span class="n">name</span>
</span><span class='line'>                           <span class="nl">forKey</span><span class="p">:</span><span class="n">NSURLLocalizedNameKey</span>
</span><span class='line'>                            <span class="nl">error</span><span class="p">:</span><span class="nb">NULL</span><span class="p">]</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>        <span class="p">[</span><span class="n">fileURL</span> <span class="nl">getResourceValue</span><span class="p">:</span><span class="o">&amp;</span><span class="n">creationDate</span>
</span><span class='line'>                           <span class="nl">forKey</span><span class="p">:</span><span class="n">NSURLCreationDateKey</span>
</span><span class='line'>                            <span class="nl">error</span><span class="p">:</span><span class="nb">NULL</span><span class="p">])</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;&#39;%@&#39; was created at %@&quot;</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">creationDate</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们把属性的键传给  <code>-enumeratorAtURL:</code> 方法中，在遍历目录内容时，这个方法能确保用非常高效的方式获取它们。在循环中，调用 <code>-getResourceValue:</code>… 能简单地从 <code>NSURL</code> 得到已缓存的值，而不用去访问文件系统。</p>

<h2>传递路径到UNIX API</h2>

<p>因为 Unicode 非常复杂，同一个字母有多种表示方式，所以我们需要很小心地传递路径给 UNIX API。在这些情况里，一定不能使用 <code>UTF8String</code>，正确地做法是使用 <code>-fileSystemRepresentation</code> 方法，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSURL</span> <span class="o">*</span><span class="n">documentURL</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSFileManager</span> <span class="n">defaultManager</span><span class="p">]</span> <span class="nl">URLForDirectory</span><span class="p">:</span><span class="n">NSDocumentDirectory</span>
</span><span class='line'>                                                            <span class="nl">inDomain</span><span class="p">:</span><span class="n">NSUserDomainMask</span>
</span><span class='line'>                                                   <span class="nl">appropriateForURL</span><span class="p">:</span><span class="nb">nil</span>
</span><span class='line'>                                                              <span class="nl">create</span><span class="p">:</span><span class="nb">NO</span>
</span><span class='line'>                                                               <span class="nl">error</span><span class="p">:</span><span class="nb">NULL</span><span class="p">];</span>
</span><span class='line'><span class="n">documentURL</span> <span class="o">=</span> <span class="p">[</span><span class="n">documentURL</span> <span class="nl">URLByAppendingPathComponent</span><span class="p">:</span><span class="n">name</span><span class="p">];</span>
</span><span class='line'><span class="kt">int</span> <span class="n">fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="n">documentURL</span><span class="p">.</span><span class="n">fileSystemRepresentation</span><span class="p">,</span> <span class="n">O_RDONLY</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>与 <code>NSURL</code> 类似，同样的情况也发生在 <code>NSString</code> 上。如果我们不这么做，在打开一个文件名或路径名包含合成字符的文件时我们将看到随机错误。在 OS X 上，当用户的短名刚好包含合成字符时就会显得特别糟糕。
我们需要一个 <code>char const *</code> 版本的路径的一些常见情况是 UNIX <code>open()</code> 和 <code>close()</code> 指令。但这也可能发生在 GCD / libdispatch 的 I/O API 上。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">dispatch_io_t</span>
</span><span class='line'><span class="nf">dispatch_io_create_with_path</span><span class="p">(</span><span class="kt">dispatch_io_type_t</span> <span class="n">type</span><span class="p">,</span>
</span><span class='line'>        <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">path</span><span class="p">,</span> <span class="kt">int</span> <span class="n">oflag</span><span class="p">,</span> <span class="kt">mode_t</span> <span class="n">mode</span><span class="p">,</span>
</span><span class='line'>        <span class="kt">dispatch_queue_t</span> <span class="n">queue</span><span class="p">,</span>
</span><span class='line'>        <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">cleanup_handler</span><span class="p">)(</span><span class="kt">int</span> <span class="n">error</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果我们要使用 <code>NSString</code> 来做，那我们要保证像下面这样做：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSString</span> <span class="o">*</span><span class="n">path</span> <span class="o">=</span> <span class="p">...</span> <span class="c1">// 假设我们已经有一个名为 path 的字符串</span>
</span><span class='line'><span class="n">io</span> <span class="o">=</span> <span class="n">dispatch_io_create_with_path</span><span class="p">(</span><span class="n">DISPATCH_IO_STREAM</span><span class="p">,</span>
</span><span class='line'>    <span class="n">path</span><span class="p">.</span><span class="n">fileSystemRepresentation</span><span class="p">,</span>
</span><span class='line'>    <span class="n">O_RDONLY</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">queue</span><span class="p">,</span> <span class="n">cleanupHandler</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>-fileSystemRepresentation</code> 所做的是它首先将这个字符串转换成文件系统的规范形式然后用 UTF-8 编码。</p>

<p>原文链接：<a href="http://www.objc.io/issue-9/working-with-strings.html">Working with Strings</a>
翻译：<a href="http://iosinit.com/?author=5"> 朱宏旭</a>，<a href="http://weibo.com/riven0951">riven</a>，<a href="http://weibo.com/u/1709283185?sudaref=iosinit.com">@唯木念</a>
译文链接：<a href="http://iosinit.com/?p=854">objc.io 第9期之玩转字符串</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[认识 TextKit]]></title>
    <link href="http://orinchen.github.io/blog/2014/03/04/getting-to-know-textkit/"/>
    <updated>2014-03-04T19:36:12+08:00</updated>
    <id>http://orinchen.github.io/blog/2014/03/04/getting-to-know-textkit</id>
    <content type="html"><![CDATA[<p>iOS7 的发布给开发者的案头带来了很多新工具。其中一个就是 TextKit（文本工具箱）。TextKit 由许多新的 UIKit 类组成，顾名思义，这些类就是用来处理文本的。在这里，我们将介绍 TextKit 的来由、它的组成，以及通过几个例子解释开发者怎样将它派上大用场。</p>

<p>但是首先我们得有一点背景知识：TextKit 可能是近期对 UIKit 最重要的补充了。iOS7 的新界面用纯文本按钮替换了大量的图标和边框。总的来说，文本和文本布局在新的操作系统的外观方面比以前重要多了。iOS7 的重新设计完全是被文本驱动，这样说也许并不夸张——而文本全部是TextKit来处理的。</p>

<p>告诉你这个变动到底有多大吧：iOS7 之前的所有版本，（几乎）所有的文本都是 WebKit 来处理的。对：WebKit，web 浏览器引擎。所有UILabel、UITextField，以及 UITextView 都在后台以某种方式使用 web 视图来进行文本布局和渲染。为了新的界面风格，它们全都被重新设计以使用TextKit。</p>

<!--more-->


<h2>iOS上文本的简短历史</h2>

<p>这些新类并不是用来替换开发者以前使用的类。对 SDK 来说，TextKit 提供的是全新的功能。iOS7 之前，TextKit 提供的功能必须都手动完成。这是现有功能之间缺失的环节。</p>

<p>长期以来，只有一个基本的文本布局和渲染框架：CoreText。也有一个途径读取用户的键盘输入：UITextInput 协议。iOS6 甚至有一个途径来简单地获取系统的文本选择：继承 UITextView。</p>

<p>（这可能是重点，我应该公开我开发文本编辑器的十年经验了）在渲染文本和读取键盘输入之间存在着巨大（跟我读：巨大）的缺口。这个缺口可能也是导致很少有富文本或者语法高亮编辑器的原因了——毫无疑问，开发一个好用的文本编辑器得耗费几个月的时间。</p>

<p>就这样——下面是 iOS 文本（不那么）简短历史的简短概要：</p>

<ul>
<li><p><strong>iOS 2</strong>：这是第一个公开的 SDK，包括一个简单的文本显示组件（ UILabel ），一个简单的文本输入组件（ UITextField ），以及一个简单的、可滚动、可编辑的并且支持更大量文本的组件：UITextView。这些组件都只支持纯文本，没有文本选择支持（仅支持插入点），除了设置字体和文本颜色外几乎没有其他可定制功能。</p></li>
<li><p><strong>iOS 3</strong>：新特性有复制和粘贴，以及复制粘贴所需要的文本选择功能。数据探测器（Data Detector）为文本视图提供了一个高亮电话号码和链接的方法。然而，除了打开或关闭这些特性外，开发者基本上没有什么别的事情可以做。</p></li>
<li><p><strong>iOS 3.2</strong>：iPad 的出现带来了 CoreText，也就是前面提到的低级文本布局和渲染引擎（从Mac OS X 10.5 移植过来的），以及 UITextInput，前面也提到的键盘存取协议。Apple 将 Pages 作为移动设备上文本编辑功能的样板工程（附注1）。然而，由于我前面提到的框架缺口，只有很少的应用使用它们。</p></li>
<li><p><strong>iOS 4</strong>：iOS 3.2 发布仅仅几个月后就发布了，文本方面没有一丁点新功能。（个人经历：在 WWDC，我走近工程师们，告诉他们我想要一个完善的 iOS 文本布局系统。回答是：“哦…提交个请求。”不出所料…）</p></li>
<li><p><strong>iOS 5</strong>：文本方面没啥变化。（个人经历：在 WWDC，我和工程师们谈及 iOS 上文本系统。回答是：“我们没有看到太多的请求…” 靠！）</p></li>
<li><p><strong>iOS 6</strong>：有些动作了：属性文本编辑被加入了UITextView。很不幸的是，它很难定制。默认的UI有粗体、斜体和下划线。用户可以设置字体大小和颜色。粗看起来相当不错，但还是没法控制布局或者提供一个便利的途径来定制文本属性。然而对于（文本编辑）开发者，有一个大的新功能：可以继承 UITextView 了，这样的话，除了以前版本提供的键盘输入外，开发者可以“免费”获得文本选择功能。必须实现一个完全自定义的文本选择功能，可能是很多对非纯文本工具开发的尝试半途而废的原因。（个人经历：我，WWDC，工程师们。我想要一个 iOS 的文本系统。回答：“嗯。吖。是的。也许？看，它只是不执行…” 所以毕竟还是有希望，对吧？）</p></li>
</ul>


<p>iOS 7：终于来了，TextKit。</p>

<h2>功能</h2>

<p>所以咱们到了。iOS7 带着 TextKit 登陆了。咱们看看它可以做什么！深入之前，我还想提一下，严格来说，这些事情中的大部分以前都可以做。如果你有大量的资源和时间来用 CoreText 构建一个文本引擎，这些都是可以做的。但是如果以前你想构建一个完善的富文本编辑器，你得花费几个月的时间。现在就非常简单，你只需要到在 Xcode 里打开一个界面文件，然后将 UITextView 拖到你的试图控制器，就可以获得所有的功能：</p>

<ul>
<li><p><strong>字距调整（Kerning）：</strong>所有的字符都有简单的二次的形状，这些形状必须被精确地放置，彼此相邻的，别这样想了。例如，现代文本布局会考虑到一个大写的“T”的“两翼”下面有一些空白，所以它会把后面的小写字母向左移让它们更靠近点。从而大大提高了文本的易读性，特别是在更长的文字中：
<img src="http://orinchen.github.io/images/posts/2014-03-04-getting-to-know-textkit/kerning.png"></p></li>
<li><p><strong>连写：</strong>我认为这主要是个艺术功能，但当某些字符组合（如“f”后面是“l”）使用组合符号（所谓的字形(glyph)）绘制时，有些文本确实看起来更好（更美观）。
<img src="http://orinchen.github.io/images/posts/2014-03-04-getting-to-know-textkit/ligature.png"></p></li>
<li><p><strong>图像附件：</strong>现在可以在文本视图里面添加图像了。</p></li>
<li><p><strong>断字：</strong>编辑文本时没那么重要，但如果要以好看易读的方式展现文本时，这就相当重要。断字意味着在行边界处分割单词，从而为整体文本创建一个更整齐的排版和外观。个人经历：iOS7 之前，开发者必须直接使用 CoreText。像这样：首先以句子为基础检测文本语言，然后获取句子中每个单词可能的断字点，然后在每一个可能的断字点上插入定制的连字占位字符。准备好之后，运行 CoreText 的布局方法并手动将连字符插入到断行。如果你想得到好的效果，之后你得检查带有连字符的文本没有超出行边界，如果超出了，在运行一次行的布局方法，这一次不要使用上次使用的断字点。使用 TextKit 的话，就非常简单了，设置 hyphenationFactor 属性就可以启用断字。</p></li>
<li><p><strong>可定制性：</strong>对我来说，甚至比改进过的排版还多，这是个新的功能。以前开发者必须在使用现有的功能和自己全部重头写之间做出选择。现在提供了一整套类，它们有代理协议，或者可以被覆盖从而改变部分行为。例如，不必重写整个文本组件，你现在就可以改变指定单词的断行行为。我认为这是个胜利。</p></li>
<li><p><strong>更多的富文本属性：</strong>现在可以设置不同的下划线样式（双线、粗线、虚线、点线，或者它们的组合）。提高文本的基线非常容易，这可用来设置上标数字。开发者也不再需要自己为定制渲染的文本绘制背景颜色了（CoreText 不支持这些功能）。</p></li>
<li><p><strong>序列化：</strong>过去没有内置的方法从磁盘读取带文本属性的字符串。或者再写回磁盘。现在有了。</p></li>
<li><p><strong>文本样式：</strong>iOS7 的界面引入了一个全局预定义的文本类型的新概念。这些文本类型分配了一个全局预定义的外观。理想情况下，这可以让整个系统的标题和连续文本具有一致的风格。通过设置应用，用户可以定义他们的阅读习惯（例如文本大小），那些使用文本样式的应用将自动拥有正确的文本大小和外观。</p></li>
<li><p><strong>文本效果：</strong>最后也是最不重要的。iOS7 有且仅有一个文本效果：凸版。使用此效果的文本看起来像是盖在纸上面一样。内阴影，等等。个人观点：真的？靠…？在一个已经完全彻底不可饶恕地枪毙了所有无用的怀旧装饰的操作系统上，谁会需要这个像文本盖在纸上的外观？</p></li>
</ul>


<h2>结构</h2>

<p>可能概览一个系统最好的方法是画一幅图。这是UIKit文本系统——TextKit的简图：</p>

<p><img src="http://orinchen.github.io/images/posts/2014-03-04-getting-to-know-textkit/TextKit.png"></p>

<p>从上图可以看出来，要让一个文本引擎工作，需要几个参与者。我们将从外到里介绍它们：</p>

<ul>
<li><p><strong>字符串（String）：</strong>要绘制文本，那么必然在某个地方有个字符串存储它。在默认的结构中，NSTextStorage 保存并管理这个字符串，在这种情况中，它可以远离绘制。但并不一定非得这样。使用 TextKit 时，文本可以来自任何适合的来源。例如，对于一个代码编辑器，字符串可以是一棵包含所有显示的代码的结构信息的注释语法树（annotated syntax tree, AST）。使用一个定制的文本存储，这个文本只在后面动态地添加字体或颜色高亮等文本属性装饰。这是第一次，开发者可以直接为文本组件使用自己的模型。只需要一个特别设计的文本存储。即：</p></li>
<li><p><strong>NSTextStorage：</strong>如果你把文本系统看做一个模型-视图-控制器（MVC）架构，这个类代表的是模型。文本存储是中心对象，它知道所有的文本和属性信息。它只提供了两个存取器方法存取它们，并提供了另外两个方法来修改它们。后面我们将进一步了解它们。现在重要的是你得理解 NSTextStorage 是从它的父类 NSAttributedString 继承了这些方法。这就很清楚了，文本存储——从文本系统看来——仅仅是一个带有属性的字符串，以及几个扩展。这两者唯一的重大不同点是文本存储包含了一个方法来发送内容改变的通知。我们会马上介绍这部分内容。</p></li>
<li><p><strong>UITextView：</strong>堆栈的另一头是实际的视图。在 TextKit 中，文本视图有两个目的：第一，它是文本系统用来绘制的视图。文本视图它自己并不会做任何绘制；它仅仅提供一个供其它类绘制的区域。作为视图层级机构中唯一的组件，第二个目的是处理所有的用户交互。具体来说，文本视图实现 UITextInput 的协议来处理键盘事件，它为用户提供了一种途径来设置一个插入点或选择文本。它并不对文本做任何实际上的改变，仅仅将这些改变请求转发给刚刚讨论的文本存储。</p></li>
<li><p><strong>NSTextContainer：</strong>每个文本视图定义了一个文本可以绘制的区域。为此，每个文本视图都有一个文本容器，它精确地描述了这个可用的区域。在简单的情况下，这是一个垂直的无限相当大的矩形区域。文本被填充到这个区域，并且文本视图允许用户滚动它。然而，在更高级的情况下，这个区域可能是一个无限大的矩形。例如，当渲染一本书时，每一页都有最大的高度和宽度。文本容器会定义这个大小，并且不接受任何超出的文本。相同情况下，一幅图像可能占据了页面的一部分，文本应该沿着它的边缘重新排版。这也是由文本容器来处理的，我们会在后面的例子中看到这一点。</p></li>
<li><p><strong>NSLayoutManager：</strong>布局管理器是中心组件，它把所有组件粘合在一起：</p>

<ol>
<li> 这个管理器监听文本存储中文本或属性改变的通知，一旦接收到通知就触发布局进程。</li>
<li> 从文本存储提供的文本开始，它将所有的字符翻译为字形（Glyph）（附注2）.</li>
<li> 一旦字形全部生成，这个管理器向它的文本容器（们）查询文本可用以绘制的区域</li>
<li> 然后这些区域被行逐步填充，而行又被字形逐步填充。一旦一行填充完毕，下一行开始填充。</li>
<li> 对于每一行，布局管理器必须考虑断行行为（放不下的单词必须移到下一行）、连字符、内联的图像附件等等。</li>
<li> 当布局完成，文本的当前显示状态被设为无效，然后文本管理器将前面几步排版好的文本设给文本视图。</li>
</ol>
</li>
<li><p><strong>CoreText：</strong>没有直接包含在 TextKit 中，CoreText 是进行实际排版的库。对于布局管理器的每一步，CoreText 被这样或那样的方式调用。它提供了从字符到字形的翻译，用它们来填充行，以及建议断字点。</p></li>
</ul>


<h2>Cocoa 文本系统</h2>

<p>创建像 TextKit 这样庞大复杂的系统肯定不是件简单快速的事情，而且肯定需要丰富的经验和知识。在 iOS 的前面6个主版本中，一直没有提供一个“真正的”文本组件，这也说明了这一点。Apple 把它视为一个大的新特性，当然没啥问题。但是它真的是全新的吗？</p>

<p>这里有个数字：在 UIKit 的 131 个公共类中，只有 9 个的名字没有使用UI作为前缀。这 9 个类使用的是旧系统的的、旧世界的（跟我读：Mac OS）前缀 NS。而且这九个类里面，有七个是用来处理文本的。巧合？好吧…</p>

<p>这是 Cocoa 文本系统的简图。不妨和上面 TextKit 的那幅图作一下对比。</p>

<p><img src="http://orinchen.github.io/images/posts/2014-03-04-getting-to-know-textkit/CocoaTextSystem.png"></p>

<p>惊人地相似。很明显，最起码主要部分，两者是相同的。很明显——除了右边部分以及 NSTextView 和 UITextView ——主要的类全部相同。TextKit 是（起码部分是）从 Cocoa 文本系统移植到 iOS。（我之前一直请求的那个，耶！）</p>

<p>进一步比较还是能看出一些不同的。最值得注意的有：</p>

<p>在 iOS 上没有 NSTypesetter 和 NSGlyphGenerator 这两个类。在 Mac OS 上有很多方法来定制排版，这被极大地简化了。这可以去掉一些抽象概念，并将这个过程合并到 NSLayoutManager 中来。保留下来的是少数的代理方法，以用来更改文本布局和断行行为。</p>

<p>这些类的 iOS 实现提供了几个新的而且非常便利的功能。在 Cocoa 中，必须手工地将确定的区域从文本容器分离出来（见上）。而 UIKit 类提供了一个简单的 exclusionPaths 属性就可以做到这一点。</p>

<p>有些功能未能提供，比如，内嵌表格，以及对非图像的附件的支持。</p>

<p>尽管有这些区别，总的来说系统还是一样的。NSTextStorage 在两个系统是是一模一样的，NSLayoutManager 和 NSTextContainer 也没有太大的不同。这些变动，在没有太多去除对一些特例的支持的情况下，看来（某些情况下大大地）使文本系统的使用变得更为容易。我认为这是件好事。</p>

<p>事后回顾我从 Apple 工程师那里得到的关于将 Cocoa 文本系统移植到 iOS 的答案，我们可以得到一些背景信息。拖到现在并削减功能的原因很简单：性能、性能、性能。文本布局可能是极度昂贵的任务——内存方面、电量方面以及时间方面——特别是在移动设备上。Apple 必须采用更简单的解决方案，并等到处理能力能够至少部分支持一个完善的文本布局引擎。</p>

<h2>示例</h2>

<p>为了说明 TextKit 的能力，我创建了一个小的演示项目，你可以在 <a href="https://github.com/objcio/issue-5-textkit">GitHub</a> 上找到它。在这个演示程序中，我只完成了一些以前不容易完成的功能。我必须承认编码工作只花了我礼拜天的一个上午的时间；如果以前要做同样的事情，我得花几天甚至几个星期。</p>

<p>TextKit 包括了超过 100 个方法，一篇文章根本没办法尽数涉及。而事实上，大多数时候，你需要的仅仅是一个正确的方法，TextKit 的使用和定制性也仍有待探索。所以我决定做四个更小的演示程序，而非一个大的演示程序来展示所有功能。每个演示程序中，我试着演示针对不同的方面和不同的</p>

<h2>演示程序1：配置</h2>

<p>让我们从最简单的开始：配置文本系统。正如你在上面 TextKit 简图中看到的，NSTextStorage、NSLayoutManager 和 NSTextContainer 之间的箭头都是有两个头的。我试图描述它们的关系是 1 对 N 的关系。就是那样：一个文本存储可以拥有多个布局管理器，一个布局管理器也可以拥有多个文本容器。这些多重性带来了很好的特性：</p>

<ul>
<li><p>将多个文本管理器附加到一个文本存储上，可以产生相同文本的多种视觉表现，而且它们可以并排显示。每一个表现可以独立地布置和修改大小。如果相应的文本视图可编辑，那么在某个视图上做的所有修改都会马上反映到所有视图上。</p></li>
<li><p>将多个文本容器附加到一个文本管理器上，可以将一个文本分布到多个视图展现出来。例如很有用的基于页面的布局：每个页面包含一个单独的视图。一个文本管理器利用这些视图的文本容器，将文本分布到这些视图上。</p></li>
</ul>


<p>在 storyboard 或者 interface 文件中实例化 UITextView 时，它会预配置一个文本系统：一个文本存储，引用一个文本管理器，而后者又引用一个文本容器。同样地，一个文本系统栈也可以通过代码直接创建：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSTextStorage</span> <span class="o">*</span><span class="n">textStorage</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSTextStorage</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="bp">NSLayoutManager</span> <span class="o">*</span><span class="n">layoutManager</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSLayoutManager</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">textStorage</span> <span class="nl">addLayoutManager</span><span class="p">:</span> <span class="n">layoutManager</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="bp">NSTextContainer</span> <span class="o">*</span><span class="n">textContainer</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSTextContainer</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">layoutManager</span> <span class="nl">addTextContainer</span><span class="p">:</span> <span class="n">textContainer</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="bp">UITextView</span> <span class="o">*</span><span class="n">textView</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UITextView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame</span><span class="p">:</span><span class="n">someFrame</span>
</span><span class='line'>                                           <span class="nl">textContainer</span><span class="p">:</span><span class="n">textContainer</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是最简单的方式。手工创建一个文本系统，唯一需要记住的事情是你的视图控制器必须 retain 文本存储。在栈底的文本视图只保留了对文本存储和布局管理器的弱引用。当文本存储被释放时，布局管理器也被释放了，这样留给文本视图的就只有一个断开的容器了。</p>

<p>这个规则有一个例外。只有从一个 interface 文件或 storyboard 实例化一个文本视图时，文本视图确实会 retain 文本存储。框架使用了一些黑魔法以确保所有的对象都被 retain，而无需建立一个 retain 环。</p>

<p>记住这些之后，创建一个更高级的设置也非常简单。假设在一个视图里面依旧有一个从 nib 实例化的文本视图，叫做 originalTextView。增加对相同文本的第二个文本视图只需要复制上面的代码，并重用 originalTextView 的文本存储：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSTextStorage</span> <span class="o">*</span><span class="n">sharedTextStorage</span> <span class="o">=</span> <span class="n">originalTextView</span><span class="p">.</span><span class="n">textStorage</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="bp">NSLayoutManager</span> <span class="o">*</span><span class="n">otherLayoutManager</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSLayoutManager</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">sharedTextStorage</span> <span class="nl">addLayoutManager</span><span class="p">:</span> <span class="n">otherLayoutManager</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="bp">NSTextContainer</span> <span class="o">*</span><span class="n">otherTextContainer</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSTextContainer</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">otherLayoutManager</span> <span class="nl">addTextContainer</span><span class="p">:</span> <span class="n">otherTextContainer</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="bp">UITextView</span> <span class="o">*</span><span class="n">otherTextView</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UITextView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame</span><span class="p">:</span><span class="n">someFrame</span>
</span><span class='line'>                                                <span class="nl">textContainer</span><span class="p">:</span><span class="n">otherTextContainer</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>将第二个文本容器附加到布局管理器也差不多。比方说我们希望上面例子中的文本填充两个文本视图，而非一个。简单：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSTextContainer</span> <span class="o">*</span><span class="n">thirdTextContainer</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSTextContainer</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">otherLayoutManager</span> <span class="nl">addTextContainer</span><span class="p">:</span> <span class="n">thirdTextContainer</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="bp">UITextView</span> <span class="o">*</span><span class="n">thirdTextView</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UITextView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame</span><span class="p">:</span><span class="n">someFrame</span>
</span><span class='line'>                                                <span class="nl">textContainer</span><span class="p">:</span><span class="n">thirdTextContainer</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>但有一点需要注意：由于在 otherTextView 中的文本容器可以无限地调整大小，thirdTextView 永远不会得到任何文本。因此，我们必须指定文本应该从一个视图回流到其它视图，而不应该调整大小或者滚动：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">otherTextView</span><span class="p">.</span><span class="n">scrollEnabled</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>不幸的是，看来将多个文本容器附加到一个文本管理器会禁用编辑功能。如果必须保留编辑功能的话，你只可以将一个文本容器附加到一个文本管理器上。</p>

<p>想要一个这个配置的可运行的例子的话，请在前面提到的 <a href="https://github.com/objcio/issue-5-textkit">TextKitDemo</a> 中查看“Configuration”标签页。</p>

<h2>演示程序2：语法高亮</h2>

<p>如果配置文本视图不是那么令人激动，那么这里有更有趣的：语法高亮！</p>

<p>看看 TextKit 组件的责任划分，就很清楚语法高亮应该在文本存储上实现。因为 NSTextStorage 是一个类簇（附注3），创建它的子类需要做不少工作。我的想法是建立一个复合对象：实现所有的方法，但只是将对它们的调用转发给一个实际的实例，将输入输出参数或者结果修改为希望的样子。</p>

<p>NSTextStorage 继承自 NSMutableAttributedString，并且必须实现以下四个方法——两个 getter 和两个 setter：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">string</span><span class="p">;</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nf">attributesAtIndex:</span><span class="p">(</span><span class="bp">NSUInteger</span><span class="p">)</span><span class="nv">location</span>
</span><span class='line'>                     <span class="nf">effectiveRange:</span><span class="p">(</span><span class="n">NSRangePointer</span><span class="p">)</span><span class="nv">range</span><span class="p">;</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">replaceCharactersInRange:</span><span class="p">(</span><span class="n">NSRange</span><span class="p">)</span><span class="nv">range</span> <span class="nf">withString:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">str</span><span class="p">;</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setAttributes:</span><span class="p">(</span><span class="bp">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">attrs</span> <span class="nf">range:</span><span class="p">(</span><span class="n">NSRange</span><span class="p">)</span><span class="nv">range</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>一个类簇的子类的复合对象的实现也相当简单。首先，找到一个满足所有要求的最简单的类。在我们的例子中，它是 NSMutableAttributedString，我们用它作为实现自定义存储的实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@implementation</span> <span class="nc">TKDHighlightingTextStorage</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="bp">NSMutableAttributedString</span> <span class="o">*</span><span class="n">_imp</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">init</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nb">self</span> <span class="o">=</span> <span class="p">[</span><span class="nb">super</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_imp</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableAttributedString</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>有了这个对象，只需要一行代码就可以实现两个 getter 方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">string</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_imp</span><span class="p">.</span><span class="n">string</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nf">attributesAtIndex:</span><span class="p">(</span><span class="bp">NSUInteger</span><span class="p">)</span><span class="nv">location</span> <span class="nf">effectiveRange:</span><span class="p">(</span><span class="n">NSRangePointer</span><span class="p">)</span><span class="nv">range</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">_imp</span> <span class="nl">attributesAtIndex</span><span class="p">:</span><span class="n">location</span> <span class="nl">effectiveRange</span><span class="p">:</span><span class="n">range</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>实现两个 setter 方法也几乎同样简单。但也有一个小麻烦：文本存储需要通知它的文本管理器变化发生了。因此 settter 方法必须也要调用 -edited:range:changeInLegth: 并传给它变化的描述。听起来更糟糕，实现变成：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">replaceCharactersInRange:</span><span class="p">(</span><span class="n">NSRange</span><span class="p">)</span><span class="nv">range</span> <span class="nf">withString:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">str</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">_imp</span> <span class="nl">replaceCharactersInRange</span><span class="p">:</span><span class="n">range</span> <span class="nl">withString</span><span class="p">:</span><span class="n">str</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="nl">edited</span><span class="p">:</span><span class="n">NSTextStorageEditedCharacters</span> <span class="nl">range</span><span class="p">:</span><span class="n">range</span>
</span><span class='line'>                                      <span class="nl">changeInLength</span><span class="p">:(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="n">str</span><span class="p">.</span><span class="n">length</span> <span class="o">-</span> <span class="p">(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="n">range</span><span class="p">.</span><span class="n">length</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setAttributes:</span><span class="p">(</span><span class="bp">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">attrs</span> <span class="nf">range:</span><span class="p">(</span><span class="n">NSRange</span><span class="p">)</span><span class="nv">range</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">_imp</span> <span class="nl">setAttributes</span><span class="p">:</span><span class="n">attrs</span> <span class="nl">range</span><span class="p">:</span><span class="n">range</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="nl">edited</span><span class="p">:</span><span class="n">NSTextStorageEditedAttributes</span> <span class="nl">range</span><span class="p">:</span><span class="n">range</span> <span class="nl">changeInLength</span><span class="p">:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>就这样，我们在文本系统栈里面有了一个文本存储的全功能替换版本。在从 interface 文件中载入时，可以像这样将它插入文本视图——但是记住从一个实例变量引用文本存储：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">_textStorage</span> <span class="o">=</span> <span class="p">[</span><span class="n">TKDHighlightingTextStorage</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">_textStorage</span> <span class="nl">addLayoutManager</span><span class="p">:</span> <span class="nb">self</span><span class="p">.</span><span class="n">textView</span><span class="p">.</span><span class="n">layoutManager</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>到目前为止，一切都很好。我们设法插入了一个自定义的文本存储，接下来我们需要真正高亮文本的某些部分了。现在，一个简单的高亮应该就是够了：我们希望将所有 iWords 的颜色变成红色——也就是那些以小写“i”开头，后面跟着一个大写字母的单词。</p>

<p>一个方便实现高亮的办法是覆盖 -processEditing。每次文本存储有修改时，这个方法都自动被调用。每次编辑后，NSTextStorage 会用这个方法来清理字符串。例如，有些字符无法用选定的字体显示时，文本存储使用一个可以显示它们的字体来进行替换。</p>

<p>和其它一样，为 iWords 增加一个简单的高亮也相当简单。我们覆盖 -processEditing，调用父类的实现，并设置一个正则表达式来查找单词：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">processEditing</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="n">processEditing</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">static</span> <span class="bp">NSRegularExpression</span> <span class="o">*</span><span class="n">iExpression</span><span class="p">;</span>
</span><span class='line'>    <span class="bp">NSString</span> <span class="o">*</span><span class="n">pattern</span> <span class="o">=</span> <span class="s">@&quot;i[</span><span class="se">\\</span><span class="s">p{Alphabetic}&amp;&amp;</span><span class="se">\\</span><span class="s">p{Uppercase}][</span><span class="se">\\</span><span class="s">p{Alphabetic}]+&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">iExpression</span> <span class="o">=</span> <span class="n">iExpression</span> <span class="o">?:</span> <span class="p">[</span><span class="bp">NSRegularExpression</span> <span class="nl">regularExpressionWithPattern</span><span class="p">:</span><span class="n">pattern</span>
</span><span class='line'>                                                                           <span class="nl">options</span><span class="p">:</span><span class="mi">0</span>
</span><span class='line'>                                                                             <span class="nl">error</span><span class="p">:</span><span class="nb">NULL</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后，首先清除之前的所有高亮：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSRange</span> <span class="n">paragaphRange</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">string</span> <span class="nl">paragraphRangeForRange</span><span class="p">:</span> <span class="nb">self</span><span class="p">.</span><span class="n">editedRange</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span> <span class="nl">removeAttribute</span><span class="p">:</span><span class="n">NSForegroundColorAttributeName</span> <span class="nl">range</span><span class="p">:</span><span class="n">paragaphRange</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>其次遍历所有的样式匹配项并高亮它们：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">iExpression</span> <span class="nl">enumerateMatchesInString</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">string</span>
</span><span class='line'>                                  <span class="nl">options</span><span class="p">:</span><span class="mi">0</span> <span class="nl">range</span><span class="p">:</span><span class="n">paragaphRange</span>
</span><span class='line'>                               <span class="nl">usingBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSTextCheckingResult</span> <span class="o">*</span><span class="n">result</span><span class="p">,</span> <span class="n">NSMatchingFlags</span> <span class="n">flags</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span> <span class="nl">addAttribute</span><span class="p">:</span><span class="n">NSForegroundColorAttributeName</span> <span class="nl">value</span><span class="p">:[</span><span class="bp">UIColor</span> <span class="n">redColor</span><span class="p">]</span> <span class="nl">range</span><span class="p">:</span><span class="n">result</span><span class="p">.</span><span class="n">range</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>就是这样。我们创建了一个支持语法高亮的动态文本视图。当用户键入时，高亮将被实时应用。而且这只需几行代码。酷吧？</p>

<p><img src="http://orinchen.github.io/images/posts/2014-03-04-getting-to-know-textkit/SyntaxHighlighting.png"></p>

<p>请注意仅仅使用 edited range 是不够的。例如，当手动键入 iWords，只有一个单词的第三个字符被键入后，正则表达式才开始匹配。但那时 editedRange 仅包含第三个字符，因此所有的处理只会检查这个字符。通过重新处理整个段落，我们可以完成高亮功能，又不会太过影响性能。</p>

<p>想要一个这个配置的可运行的例子的话，请在前面提到的 <a href="https://github.com/objcio/issue-5-textkit">TextKitDemo</a> 中查看“Highlighting”标签页。</p>

<h2>演示程序3：布局修改</h2>

<p>如前所述，布局管理器是核心的布局主力。Mac OS 上 NSTypesetter 的高度可定制功能被并入 iOS 上的 NSLayoutManager。虽然 TextKit 不具备像 Cocoa 文本系统那样的完全可定制性，但它提供很多代理方法来允许做一些调整。如前所述，TextKit 与 CoreText 更紧密地集成在一起，主要是基于性能方面的考虑。但是两个文本系统的理念在一定程度上是不一样的：</p>

<ul>
<li><p><strong>Cocoa 文本系统：</strong>在 Mac OS上，性能不是问题，设计考量的全部是灵活性。可能是这样：“这个东西可以做这个事情。如果你想的话，你可以覆盖它。性能不是问题。你也可以提供完全由自己实现的字符到字形的转换，去做吧…”</p></li>
<li><p><strong>TextKit：</strong>性能看来真是个问题。理念（起码现在）更多的是像这样：“我们用简单但是高性能的方法实现了这个功能。这是结果，但是我们给你一个机会去更改它的一些东西。但是你只能在不太损害性能的地方进行修改。”</p></li>
</ul>


<p>足够的理念，让我们来定制些东西。例如，调整行高如何？听起来不可思议，但是在之前的 iOS 发布版上调整行高至少是很黑客的行为，或者需要使用私有 API。幸运的是，现在（再一次）不用那么搞脑子了。设置布局管理器的代理并实现仅仅一个方法即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span>      <span class="nf">layoutManager:</span><span class="p">(</span><span class="bp">NSLayoutManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">layoutManager</span>
</span><span class='line'>  <span class="nf">lineSpacingAfterGlyphAtIndex:</span><span class="p">(</span><span class="bp">NSUInteger</span><span class="p">)</span><span class="nv">glyphIndex</span>
</span><span class='line'>  <span class="nf">withProposedLineFragmentRect:</span><span class="p">(</span><span class="bp">CGRect</span><span class="p">)</span><span class="nv">rect</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">floorf</span><span class="p">(</span><span class="n">glyphIndex</span> <span class="o">/</span> <span class="mi">100</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在以上的代码中，我修改了行间距，让它与文本长度同时增长。这导致顶部的行比底部的行排列得更紧密。我承认这没什么实际的用处，但是它是可以做到的（而且肯定会有更实用的用例的）。</p>

<p>好，来一个更现实的场景。假设你的文本中有链接，你不希望这些链接被行包围。如果可能的话，一个 URL 应该始终显示为一个整体，一个单一的文本片段。没有什么比这更简单的了。</p>

<p>首先，我们通过使用自定义的文本存储，就像前面讨论过的那个。但是，它寻找链接并将其标记，而不是检测 iWords，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="bp">NSDataDetector</span> <span class="o">*</span><span class="n">linkDetector</span><span class="p">;</span>
</span><span class='line'><span class="n">linkDetector</span> <span class="o">=</span> <span class="n">linkDetector</span> <span class="o">?:</span> <span class="p">[[</span><span class="bp">NSDataDetector</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTypes</span><span class="p">:</span><span class="n">NSTextCheckingTypeLink</span> <span class="nl">error</span><span class="p">:</span><span class="nb">NULL</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">NSRange</span> <span class="n">paragaphRange</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">string</span> <span class="nl">paragraphRangeForRange</span><span class="p">:</span> <span class="n">NSMakeRange</span><span class="p">(</span><span class="n">range</span><span class="p">.</span><span class="n">location</span><span class="p">,</span> <span class="n">str</span><span class="p">.</span><span class="n">length</span><span class="p">)];</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span> <span class="nl">removeAttribute</span><span class="p">:</span><span class="n">NSLinkAttributeName</span> <span class="nl">range</span><span class="p">:</span><span class="n">paragaphRange</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">linkDetector</span> <span class="nl">enumerateMatchesInString</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">string</span>
</span><span class='line'>                               <span class="nl">options</span><span class="p">:</span><span class="mi">0</span>
</span><span class='line'>                                 <span class="nl">range</span><span class="p">:</span><span class="n">paragaphRange</span>
</span><span class='line'>                            <span class="nl">usingBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSTextCheckingResult</span> <span class="o">*</span><span class="n">result</span><span class="p">,</span> <span class="n">NSMatchingFlags</span> <span class="n">flags</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="nl">addAttribute</span><span class="p">:</span><span class="n">NSLinkAttributeName</span> <span class="nl">value</span><span class="p">:</span><span class="n">result</span><span class="p">.</span><span class="n">URL</span> <span class="nl">range</span><span class="p">:</span><span class="n">result</span><span class="p">.</span><span class="n">range</span><span class="p">];</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>有了这个，改变断行行为就只需要实现一个布局管理器的代理方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">layoutManager:</span><span class="p">(</span><span class="bp">NSLayoutManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">layoutManager</span> <span class="nf">shouldBreakLineByWordBeforeCharacterAtIndex:</span><span class="p">(</span><span class="bp">NSUInteger</span><span class="p">)</span><span class="nv">charIndex</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSRange</span> <span class="n">range</span><span class="p">;</span>
</span><span class='line'>    <span class="bp">NSURL</span> <span class="o">*</span><span class="n">linkURL</span> <span class="o">=</span> <span class="p">[</span><span class="n">layoutManager</span><span class="p">.</span><span class="n">textStorage</span> <span class="nl">attribute</span><span class="p">:</span><span class="n">NSLinkAttributeName</span>
</span><span class='line'>                                                  <span class="nl">atIndex</span><span class="p">:</span><span class="n">charIndex</span>
</span><span class='line'>                                           <span class="nl">effectiveRange</span><span class="p">:</span><span class="o">&amp;</span><span class="n">range</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="o">!</span><span class="p">(</span><span class="n">linkURL</span> <span class="o">&amp;&amp;</span> <span class="n">charIndex</span> <span class="o">&gt;</span> <span class="n">range</span><span class="p">.</span><span class="n">location</span> <span class="o">&amp;&amp;</span> <span class="n">charIndex</span> <span class="o">&lt;=</span> <span class="n">NSMaxRange</span><span class="p">(</span><span class="n">range</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>想要一个可运行的例子的话，请在前面提到的 <a href="https://github.com/objcio/issue-5-textkit">TextKitDemo</a> 中查看“Layout”标签页。以下是截屏：</p>

<p><img src="http://orinchen.github.io/images/posts/2014-03-04-getting-to-know-textkit/LineBreaking.png"></p>

<p>顺便说一句，上面截屏里面的绿色轮廓线是无法用 TextKit 实现的。在这个演示程序中，我用了个小技巧来在布局管理器的子类中给文本画轮廓线。也可以很容易以特定的方法来扩展 TextKit 的绘制功能。一定要看看！</p>

<h2>演示程序4：文本交互</h2>

<p>前面已经涉及到了 NSTextStorage 和 NSLayoutManager，最后一个演示程序将涉及 NSTextContainer。这个类并不复杂，而且它除了指定文本可不可以放置在某个地方外，什么都没做。</p>

<p>不要将文本放置在某些区域，这是很常见的需求，例如，在杂志应用中。对于这种情况，iOS 上的 NSTextContainer 提供了一个 Mac 开发者梦寐以求的属性：exclusionPaths，它允许开发者设置一个 NSBezierPath 数组来指定不可填充文本的区域。要了解这到底是什么东西，看一眼下面的截屏：</p>

<p><img src="http://orinchen.github.io/images/posts/2014-03-04-getting-to-know-textkit/ReflowingTextAndClippy.png"></p>

<p>正如你所看到的，所有的文本都放置在蓝色椭圆外面。在文本视图里面实现这个行为很简单，但是有个小麻烦：贝塞尔路径的坐标必须使用容器的坐标系。以下是转换方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">updateExclusionPaths</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="bp">CGRect</span> <span class="n">ovalFrame</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">textView</span> <span class="nl">convertRect</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">circleView</span><span class="p">.</span><span class="n">bounds</span>
</span><span class='line'>                                         <span class="nl">fromView</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">circleView</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ovalFrame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span> <span class="o">-=</span> <span class="nb">self</span><span class="p">.</span><span class="n">textView</span><span class="p">.</span><span class="n">textContainerInset</span><span class="p">.</span><span class="n">left</span><span class="p">;</span>
</span><span class='line'>    <span class="n">ovalFrame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">-=</span> <span class="nb">self</span><span class="p">.</span><span class="n">textView</span><span class="p">.</span><span class="n">textContainerInset</span><span class="p">.</span><span class="n">top</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">UIBezierPath</span> <span class="o">*</span><span class="n">ovalPath</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIBezierPath</span> <span class="nl">bezierPathWithOvalInRect</span><span class="p">:</span><span class="n">ovalFrame</span><span class="p">];</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">textView</span><span class="p">.</span><span class="n">textContainer</span><span class="p">.</span><span class="n">exclusionPaths</span> <span class="o">=</span> <span class="l">@[</span><span class="n">ovalPath</span><span class="l">]</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这个例子中，我使用了一个用户可移动的视图，它可以被自由移动，而文本会实时地围绕着它重新排版。我们首先将它的bounds（self.circleView.bounds）转换到文本视图的坐标系统。</p>

<p>因为没有 inset，文本会过于靠近视图边界，所以 UITextView 会在离边界还有几个点的距离的地方插入它的文本容器。因此，要得到以容器坐标表示的路径，必须从 origin 中减去这个插入点的坐标。</p>

<p>在此之后，只需将贝塞尔路径设置给文本容器即可将对应的区域排除掉。其它的过程对你来说是透明的，TextKit 会自动处理。</p>

<p>想要一个可运行的例子的话，请在前面提到的 <a href="https://github.com/objcio/issue-5-textkit">TextKitDemo</a> 中查看“Interaction”标签页。作为一个小噱头，它也包含了一个跟随当前文本选择的视图。应为，你也知道，没有一个小小的丑陋的烦人的回形针挡住你的话，那还是一个好的文本编辑器演示程序吗？</p>

<p>附注:</p>

<ol>
<li><p>Pages 确实——据 Apple 声称——绝对没有使用私有 API。<em>咳</em> 我的理论：它要么使用了一个 TextKit 的史前版本，要么复制了 UIKit 一半的私有源程序。或者两者的混合。</p></li>
<li><p>字形：如果说字符是一个字母的“语义”表达，字形则是它的可视化表达。取决于所使用的字体，字形要么是贝塞尔路径，或者位图图像，它定义了要绘制出来的形状。也请参考卓越的 Wikipedia 上关于字形的<strong><a href="http://en.wikipedia.org/wiki/Glyph">这篇文章</a></strong>。</p></li>
<li><p>在一个类簇中，只有一个抽象的父类是公共的。分配一个实例实际上就是创建其中一个私有类的对象。因此，你总是为一个抽象类创建子类，并且需要实现所有的方法。也请参考<strong><a href="https://developer.apple.com/library/ios/documentation/general/conceptual/CocoaEncyclopedia/ClassClusters/ClassClusters.html">class cluster documentation</a></strong>。</p></li>
</ol>


<p>原文链接：<a href="http://www.objc.io/issue-5/getting-to-know-textkit.html">Max Seelemann</a></p>

<p>翻译：<a href="http://blog.jobbole.com/">伯乐在线</a> - <a href="http://blog.jobbole.com/author/oldtown/">和谐老约翰</a></p>

<p>译文链接：<a href="http://blog.jobbole.com/51965/">http://blog.jobbole.com/51965/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Class-dump-z 和 Clutch 分析 iOS App]]></title>
    <link href="http://orinchen.github.io/blog/2014/02/10/crack-ios-apps-with-clutch-and-class-dump-z/"/>
    <updated>2014-02-10T09:26:19+08:00</updated>
    <id>http://orinchen.github.io/blog/2014/02/10/crack-ios-apps-with-clutch-and-class-dump-z</id>
    <content type="html"><![CDATA[<h2>什么是 class-dump-z</h2>

<p>class dump 是一个命令行工具，用来监测存储在 Mach-O 二进制文件理的 Objective-C 运行时信息。它为类（class），分类（category）和协议（protocol）生成声明信息。这些信息与 otool -ov 命令提供的信息是一样的，但表示得更像正常的 Objective-C 的声明，所以它更紧凑，更易读。</p>

<p>class dump 有三个版本：class-dump, class-dump-x 和 class-dump-z。class-dump-z 是对 class-dump 和 class-dump-x 改进版，完全用C++重写，避免动态调用，使得 class-dump-z 比它的前任们快10倍左右。并且可以在 Linux，Mac, iPhone 上运行。</p>

<!--more-->


<h2>安装 class-dump-z</h2>

<p>class-dump-z 的安装十分简单。只要到<a href="https://code.google.com/p/networkpx/wiki/class_dump_z"><em>这里</em></a>下载最新的版本并解压，然后将 <code>mac_x86/class-dump-z</code> 拷贝到 <code>/usr/bin/</code> 目录中即可。</p>

<h2>尝试导出 App 代码信息</h2>

<p>class-dump-z 安装完成之后就可以开始 App Crack 工作。</p>

<p>首先使用iExploer(或iFunbox)打开真机的应用程序目录，打开 目标程序 xxxx.app 子目录，按照文件大小排序，找到一个与父目录同名的程序文件xxxx，这个就是编译后的主程序了，将它导出到 Mac 中。</p>

<p>然后在终端中输入命令：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>class-dump-z xxxx
</span></code></pre></td></tr></table></div></figure>


<p>然后会看到如下的提示信息和输出：</p>

<p><em>Warning: Part of this binary is encrypted. Usually, the result will be not meaningful. Try to provide an unencrypted version instead.</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * This header is generated by class-dump-z 0.2a.</span>
</span><span class='line'><span class="cm"> * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Source: (null)</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="k">@protocol</span> <span class="nc">XXEncryptedProtocol_7c2bc</span>
</span><span class='line'><span class="p">-(</span><span class="o">?</span><span class="p">)</span><span class="nf">XXEncryptedMethod_63de7</span><span class="p">;</span>
</span><span class='line'><span class="p">-(</span><span class="o">?</span><span class="p">)</span><span class="nf">XXEncryptedMethod_64b92</span><span class="p">;</span>
</span><span class='line'><span class="p">-(</span><span class="o">?</span><span class="p">)</span><span class="nf">XXEncryptedMethod_64b86</span><span class="p">;</span>
</span><span class='line'><span class="p">-(</span><span class="o">?</span><span class="p">)</span><span class="nf">XXEncryptedMethod_64b7e</span><span class="p">;</span>
</span><span class='line'><span class="p">-(</span><span class="o">?</span><span class="p">)</span><span class="nf">XXEncryptedMethod_64b77</span><span class="p">;</span>
</span><span class='line'><span class="p">-(</span><span class="o">?</span><span class="p">)</span><span class="nf">XXEncryptedMethod_64311</span><span class="p">;</span>
</span><span class='line'><span class="p">-(</span><span class="o">?</span><span class="p">)</span><span class="nf">XXEncryptedMethod_64b63</span><span class="p">;</span>
</span><span class='line'><span class="p">-(</span><span class="o">?</span><span class="p">)</span><span class="nf">XXEncryptedMethod_64b52</span><span class="p">;</span>
</span><span class='line'><span class="p">-(</span><span class="o">?</span><span class="p">)</span><span class="nf">XXEncryptedMethod_64b43</span><span class="p">;</span>
</span><span class='line'><span class="p">-(</span><span class="o">?</span><span class="p">)</span><span class="nf">XXEncryptedMethod_64b3b</span><span class="p">;</span>
</span><span class='line'><span class="p">-(</span><span class="o">?</span><span class="p">)</span><span class="nf">XXEncryptedMethod_64b14</span><span class="p">;</span>
</span><span class='line'><span class="p">-(</span><span class="o">?</span><span class="p">)</span><span class="nf">XXEncryptedMethod_64af8</span><span class="p">;</span>
</span><span class='line'><span class="p">-(</span><span class="o">?</span><span class="p">)</span><span class="nf">XXEncryptedMethod_64ae7</span><span class="p">;</span>
</span><span class='line'><span class="p">-(</span><span class="o">?</span><span class="p">)</span><span class="nf">XXEncryptedMethod_64ae2</span><span class="p">;</span>
</span><span class='line'><span class="p">-(</span><span class="o">?</span><span class="p">)</span><span class="nf">XXEncryptedMethod_64add</span><span class="p">;</span>
</span><span class='line'><span class="p">-(</span><span class="o">?</span><span class="p">)</span><span class="nf">XXEncryptedMethod_63e09</span><span class="p">;</span>
</span><span class='line'><span class="p">-(</span><span class="o">?</span><span class="p">)</span><span class="nf">XXEncryptedMethod_64ad2</span><span class="p">;</span>
</span><span class='line'><span class="p">-(</span><span class="o">?</span><span class="p">)</span><span class="nf">XXEncryptedMethod_64acd</span><span class="p">;</span>
</span><span class='line'><span class="p">-(</span><span class="o">?</span><span class="p">)</span><span class="nf">XXEncryptedMethod_64ac4</span><span class="p">;</span>
</span><span class='line'><span class="k">@optional</span>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="o">?</span><span class="p">)</span><span class="n">XXEncryptedMethod_64b9e</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这明显不是我们想要的结果！原因是苹果会对所有发布到 App Store 上的 App 进行加密，简单的 class-dump-z 无法导出其代码信息！现在我们需要另外一个工具将目标 App 解密，这个工具就是 Clutch。</p>

<h2>什么是 Clutch</h2>

<p><a href="https://github.com/KJCracks/Clutch"><em>Clutch</em></a>是一个 iOS 工具，专门用来将手机中的 App 进行解密。安装 Clutch 首先要将设备越狱，而且由于 Clutch 是一个命令行工具，要想使用它还必在设备中须安装 MobileTerminal 或 OpenSSH。</p>

<h2>安装和配置 Clutch</h2>

<p>首先到<a href="https://github.com/KJCracks/Clutch/releases"><em>这里</em></a>下载 Clutch 的最新版本并将其拷贝到设备的 /usr/bin 目录中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>scp scp Clutch-1.4.2 root@192.168.xxx.xxx:/usr/bin <span class="c">#拷贝文件</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后使用 ssh 连接到设备，重命名文件并设置权限：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ssh root@192.168.100.158 <span class="c">#使用SSH连接设备</span>
</span><span class='line'><span class="nb">cd</span> /usr/bin
</span><span class='line'>mv Clutch-1.4.2 clutch <span class="c">#将 Clutch-1.4.2 重命名为 Clutch</span>
</span><span class='line'>chmod 0x777 clutch <span class="c">#修改 clutch 的权限</span>
</span></code></pre></td></tr></table></div></figure>


<p>接着在 ssh 连接中使用 <code>Clucth -C</code> 命令，根据提示设置好 clutch 即可。</p>

<h2>使用 Clucth 解密 App</h2>

<p>经过上面的安装和设置 Clucth 已经可以正常使用了。在 ssh 连接中使用 <code>Clutch</code> 命令后会看到一个如下的 App 列表：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Clutch 1.4.2
</span><span class='line'>---------------------------------
</span><span class='line'>
</span><span class='line'>1<span class="o">)</span> AiCai
</span><span class='line'>2<span class="o">)</span> App
</span><span class='line'>3<span class="o">)</span> Articles
</span><span class='line'>4<span class="o">)</span> calendar
</span><span class='line'>5<span class="o">)</span> CalendarsLite
</span><span class='line'>6<span class="o">)</span> CarrotFantasy
</span><span class='line'>7<span class="o">)</span> ConverterInfinity
</span><span class='line'>8<span class="o">)</span> converti
</span><span class='line'>9<span class="o">)</span> Convertible
</span><span class='line'>10<span class="o">)</span> CYLS
</span></code></pre></td></tr></table></div></figure>


<p>在列表中找到需要解密的 App，记住前面的编号比如是 9，然后执行命令 <code>Clutch 9</code>稍等片刻就可完成对目标 App 的解密。</p>

<h2>再次尝试导出 App 代码信息</h2>

<p>提示完成之后，会看见解密后的 ipa 文件路径，将其拷贝到 Mac 中，修改后缀名为 zip 并解压。找到其中的主程序文件，再次使用命令 <code>class-dump-z xxxx</code>，就可以看到目标程序的头文件信息啦。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * This header is generated by class-dump-z 0.2a.</span>
</span><span class='line'><span class="cm"> * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Source: (null)</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="bp">_NSZone</span> <span class="n">NSZone</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="bp">CGPoint</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">_field1</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">_field2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="bp">CGPoint</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="bp">CGSize</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">_field1</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">_field2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="bp">CGSize</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="bp">CGRect</span> <span class="p">{</span>
</span><span class='line'>    <span class="bp">CGPoint</span> <span class="n">_field1</span><span class="p">;</span>
</span><span class='line'>    <span class="bp">CGSize</span> <span class="n">_field2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="bp">CGRect</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="bp">_NSRange</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="n">_field1</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="n">_field2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">NSRange</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@protocol</span> <span class="bp">NSObject</span>
</span><span class='line'><span class="p">-(</span><span class="kt">id</span><span class="p">)</span><span class="nf">description</span><span class="p">;</span>
</span><span class='line'><span class="p">-(</span><span class="kt">unsigned</span><span class="p">)</span><span class="nf">retainCount</span><span class="p">;</span>
</span><span class='line'><span class="p">-(</span><span class="kt">id</span><span class="p">)</span><span class="nf">autorelease</span><span class="p">;</span>
</span><span class='line'><span class="p">-(</span><span class="n">oneway</span> <span class="kt">void</span><span class="p">)</span><span class="nf">release</span><span class="p">;</span>
</span><span class='line'><span class="p">-(</span><span class="kt">id</span><span class="p">)</span><span class="nf">retain</span><span class="p">;</span>
</span><span class='line'><span class="p">-(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">respondsToSelector:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">selector</span><span class="p">;</span>
</span><span class='line'><span class="p">-(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">conformsToProtocol:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">protocol</span><span class="p">;</span>
</span><span class='line'><span class="p">-(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isMemberOfClass:</span><span class="p">(</span><span class="kt">Class</span><span class="p">)</span><span class="nv">aClass</span><span class="p">;</span>
</span><span class='line'><span class="p">-(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isKindOfClass:</span><span class="p">(</span><span class="kt">Class</span><span class="p">)</span><span class="nv">aClass</span><span class="p">;</span>
</span><span class='line'><span class="p">-(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isProxy</span><span class="p">;</span>
</span><span class='line'><span class="p">-(</span><span class="kt">id</span><span class="p">)</span><span class="nf">performSelector:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">selector</span> <span class="nf">withObject:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">object</span> <span class="nf">withObject:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">object3</span><span class="p">;</span>
</span><span class='line'><span class="p">-(</span><span class="kt">id</span><span class="p">)</span><span class="nf">performSelector:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">selector</span> <span class="nf">withObject:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">object</span><span class="p">;</span>
</span><span class='line'><span class="p">-(</span><span class="kt">id</span><span class="p">)</span><span class="nf">performSelector:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">selector</span><span class="p">;</span>
</span><span class='line'><span class="p">-(</span><span class="n">NSZone</span><span class="o">*</span><span class="p">)</span><span class="nf">zone</span><span class="p">;</span>
</span><span class='line'><span class="p">-(</span><span class="kt">id</span><span class="p">)</span><span class="nf">self</span><span class="p">;</span>
</span><span class='line'><span class="p">-(</span><span class="kt">Class</span><span class="p">)</span><span class="nf">class</span><span class="p">;</span>
</span><span class='line'><span class="p">-(</span><span class="kt">Class</span><span class="p">)</span><span class="nf">superclass</span><span class="p">;</span>
</span><span class='line'><span class="p">-(</span><span class="kt">unsigned</span><span class="p">)</span><span class="nf">hash</span><span class="p">;</span>
</span><span class='line'><span class="p">-(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isEqual:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">equal</span><span class="p">;</span>
</span><span class='line'><span class="k">@optional</span>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="n">debugDescription</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<h3><strong>ps:</strong></h3>

<ol>
<li>使用 <code>class-dump-z xxxx &gt; ./xxxx-classdump.txt</code> 可以将目标程序的代码信息导出到单个文本文件中方便查找。</li>
<li>使用 <code>class-dump-z -H -o xxxx ./SourceCode</code> 可以将目标程序的所有代码信息以头文件的形式输出到指定目录，每个类一个文件。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何查看第三方 App 的视图结构]]></title>
    <link href="http://orinchen.github.io/blog/2014/01/25/how-to-inspect-view-hierarchy-of-3rd-party-apps/"/>
    <updated>2014-01-25T15:48:49+08:00</updated>
    <id>http://orinchen.github.io/blog/2014/01/25/how-to-inspect-view-hierarchy-of-3rd-party-apps</id>
    <content type="html"><![CDATA[<p><a href="http://revealapp.com/"><strong>Reveal</strong></a> 和 <a href="http://sparkinspector.com/"><strong>Spark Inspector</strong></a> 是两款 iOS 上比较好用的 <strong>Inspector View Hierarchy</strong> 工具。它们能够将 App 界面的视图层次结构实时的展示出来，以便于调试分析，就好像用 <strong>FireBug</strong> 分析 Web 页面一样。</p>

<p>一般情况下，<strong>Reveal</strong> 和 <strong>Spark Inspector</strong> 都只能用在自己的项目中，因为必须在项目中包含他们的库文件。如果我们能够在没有源码的情况下使用 <strong>Reveal</strong> 或 <strong>Spark Inspector</strong> 分析他人的 App <strong>View Hierarchy</strong>，无疑是一个很好的学习途径。</p>

<!--more-->


<h2>越狱设备，安装软件</h2>

<p>如前面所说，一般情况下，<strong>Reveal</strong> 和 <strong>Spark Inspector</strong> 都只能用在自己的项目中，查看自己项目的 <strong>View Hierarchy</strong>。如果想要查看第三方 App 的 <strong>View Hierarchy</strong> 就必须让第三方软件去调用 <strong>Reveal</strong> 或 <strong>Spark Inspector</strong> 的动态库文件（<em>libReveal.dylib</em> 和 <em>SparkInspector.dylib</em>）。想要完成这个任务那就得使出非常手段了 &ndash; <strong>越狱！</strong>。</p>

<p>越狱完成后还需要安装两个软件：</p>

<ol>
<li><strong>OpenSSH</strong> &ndash; 可以让你在 <strong>Mac</strong> 上通过<strong>终端</strong>操作设备；</li>
<li><strong>Cydia Substrate</strong>（原名 <strong>Mobile Substrate</strong>）&ndash; 就是通过它让第三方 App 调用 <strong>Reveal</strong> 或 <strong>Spark Inspector</strong> 的动态库文件</li>
</ol>


<p>在 Cydia 中找到并安装它们。</p>

<h2>拷贝库文件</h2>

<p>设备越狱并安装好上面的两个软件之后，就可以将 <strong>Reveal</strong> 或 <strong>Spark Inspector</strong> 的库文件拷贝到设备中了。</p>

<p><strong>Reveal</strong> 使用如下命令：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>scp /Applications/Reveal.app/Contents/SharedSupport/iOS-Libraries/libReveal.dylib root@192.168.XXX.XXX:/Library/MobileSubstrate/DynamicLibraries
</span></code></pre></td></tr></table></div></figure>


<p><strong>Spark Inspector</strong> 使用如下命令：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>scp <span class="s2">&quot;/Applications/Spark Inspector.app/Contents/Resources/Frameworks/SparkInspector.dylib&quot;</span> root@192.168.XXX.XXX:/Library/MobileSubstrate/DynamicLibraries
</span></code></pre></td></tr></table></div></figure>


<h2>创建 plist 文件</h2>

<p>将库文件拷贝到设备中之后，还需要创建相应的 plist 文件使其运行。
可以使用 iFunbox 打开目标 App，在根目录下找到 iTunesMetadata.plist，将 softwareVersionBundleId 项中的值记下来，然后创建文件 libReveal.plist 或者 SparkInspector.plist，将目标 App 的 BundleId 按照如下格式写好（Bundles 可以多个）:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nx">Filter</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">Bundles</span> <span class="o">=</span> <span class="p">(</span><span class="s2">&quot;com.sina.weibo&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">Bundles</span> <span class="o">=</span> <span class="p">(</span><span class="s2">&quot;com.burbn.instagram&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>plist 文件创建完成之后将其拷贝到设备 <em>/Library/MobileSubstrate/DynamicLibraries</em> 目录中去：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>scp XXXXXXX.plist root@192.168.XXX.XXX:/Library/MobileSubstrate/DynamicLibraries
</span></code></pre></td></tr></table></div></figure>


<h2>完成！</h2>

<p>使用 <code>killall SpringBoard</code> 命令或者重启设备之后就可以使用 <strong>Reveal</strong> 或 <strong>Spark Inspector</strong> 查看目标程序的 <strong>View
 Hierarchy</strong> 了。</p>

<h2>可能出现的问题</h2>

<p>某些情况下可能出现重启设备后 <strong>Cydia Substrate</strong> 没用工作，<em>libReveal.dylib</em> 或 <em>SparkInspector.dylib</em> 没有加载。这时 <strong>Reveal</strong> 和 <strong>Spark Inspector</strong> 仍然无法工作。可以共通过下面的方法手动加载。</p>

<p><strong>Reveal</strong> 使用如下命令：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>launchctl setenv DYLD_INSERT_LIBRARIES /Library/MobileSubstrate/DynamicLibraries/libReveal.dylib
</span><span class='line'>launchctl setenv DYLD_FORCE_FLAT_NAMESPACE <span class="s1">&#39;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Spark Inspector</strong> 使用如下命令：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>launchctl setenv DYLD_INSERT_LIBRARIES /Library/MobileSubstrate/DynamicLibraries/SparkInspector.dylib
</span><span class='line'>launchctl setenv DYLD_FORCE_FLAT_NAMESPACE <span class="s1">&#39;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然也可以同时加载这两个 <strong><em>dylib</em></strong>，使用如下命令：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>launchctl setenv DYLD_INSERT_LIBRARIES /Library/MobileSubstrate/DynamicLibraries/libReveal.dylib:/Library/MobileSubstrate/DynamicLibraries/SparkInspector.dylib
</span><span class='line'>launchctl setenv DYLD_FORCE_FLAT_NAMESPACE <span class="s1">&#39;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后使用 <code>killall SpringBoard</code> 命令之后就可以使用 <strong>Reveal</strong> 或 <strong>Spark Inspector</strong> 查看目标程序的 <strong>View
 Hierarchy</strong> 了。但是当设备重新启动之后还是得重新手动加载一次 <strong><em>dylib</em></strong>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 iOS 设备上安装和使用 OpenSSH]]></title>
    <link href="http://orinchen.github.io/blog/2014/01/15/install-and-use-openssh-on-ios/"/>
    <updated>2014-01-15T13:01:05+08:00</updated>
    <id>http://orinchen.github.io/blog/2014/01/15/install-and-use-openssh-on-ios</id>
    <content type="html"><![CDATA[<h2>什么是 OpenSSH</h2>

<p>OpenSSH 是一个在 Linux 下很实用的一个软件。iPhone 本身就是一个运行 BSD 系统（可认为是一种 Liunx）的硬件，因此，Cydia 的作者 Saurik 把 OpenSSH 这一软件移植到了 iOS 平台上，并且简化了安全认证密钥的繁琐，使之成为一款可以在 iPhone 上运行的 Cydia 软件。</p>

<!--more-->


<h2>OpenSSH 的用途</h2>

<p>OpenSSH 可以让你在 PC 或者 Mac 上远程输入命令操作 iOS 设备，免去使用 MobileTerminal 的不方便，同时，也是一种在多系统下管理 iPhone、iPad 系统文件的方法。</p>

<h2>安装和使用 OpenSSH</h2>

<p>要安装 OpenSSH 首先需要将设备越狱。越狱完成之后,就可以在 Cydia 中直接查找和安装 OpenSSH。安装完成之后就可以通过下面的步骤来将你的 Mac 连接到 iOS 设备。</p>

<ol>
<li>首先得保证你的 iOS 设备和 Mac 在同一局域网的同一网段中。</li>
<li>打开终端，输入 <code>ssh root@192.168.xxx.xxx</code></li>
<li>输入 iOS 设备密码，默认 alpine</li>
<li>等待连接，稍后，您就连接到您的iPhone、iPad上，可以执行 Unix 命令了。</li>
<li>还可以使用 Transmit 等软件来管理 iOS 设备的文件系统，非常方便。</li>
</ol>


<h2>可能出现的问题</h2>

<p>如果之前使用 Mac 终端连接过 iOS 设备，然后设备被还原，重新越狱，安装 OpenSSH。再次使用 终端连接 iOS 设备的时候会出现如下错误:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
</span><span class='line'>@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @
</span><span class='line'>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
</span><span class='line'>IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!
</span><span class='line'>Someone could be eavesdropping on you right now <span class="o">(</span>man-in-the-middle attack<span class="o">)</span>!
</span><span class='line'>It is also possible that a host key has just been changed.
</span><span class='line'>The fingerprint <span class="k">for</span> the RSA key sent by the remote host is
</span><span class='line'>a3:63:1f:45:ed:91:3e:67:e3:d0:37:83:dd:24:83:f6.
</span><span class='line'>Please contact your system administrator.
</span><span class='line'>Add correct host key in /Users/orinchen/.ssh/known_hosts to get rid of this message.
</span><span class='line'>Offending RSA key in /Users/orinchen/.ssh/known_hosts:10
</span><span class='line'>RSA host key <span class="k">for</span> 192.168.xxx.xxx has changed and you have requested strict checking.
</span><span class='line'>Host key verification failed.
</span></code></pre></td></tr></table></div></figure>


<p>解决方法是，使用编辑器打开 <code>~/.ssh/known_hosts</code> 文件，删除 192.168.xxx.xxx 的相关 rsa的信息即可.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 MobileTerminal 修改 iOS 设备 Root 权限密码]]></title>
    <link href="http://orinchen.github.io/blog/2014/01/07/change-your-ios-root-password/"/>
    <updated>2014-01-07T12:59:32+08:00</updated>
    <id>http://orinchen.github.io/blog/2014/01/07/change-your-ios-root-password</id>
    <content type="html"><![CDATA[<h2>为什么要修改 root 密码</h2>

<p>iOS 设备越狱后，就拥有了完全的权限，你可以任意安装任意的软件，但是也存在一定的风险，因为默认的root密码是一样的&ndash;alpine，这种弱口令是很不安全的。而且如果不修改，别人也会拥有管理你的系统的权限，这样当你的设备在网络中时就造成你的设备很容易被入侵，或者在不安全陌生的环境中会感染病毒（例如3G环境），所以，为了以后安全，建议最好修改。</p>

<!--more-->


<h2>什么是 MobileTerminal</h2>

<p>MobileTerminal 是一款在iPhone、iPad等iOS设备中的终端管理软件，采用类似于命令行的非图形界接口理您的 iOS 设备的进程，以及运行一些专门为命令行下工作的软件，类似于 Mac 下的 Terminal。</p>

<h2>安装 MobileTerminal 并修改 root 密码</h2>

<p>要安装 MobileTerminal 首先需要将设备越狱。越狱完成之后,就可以在 Cydia 中直接查找和安装 MobileTerminal。安装完成之后就可以通过下面的步骤来修改你的 root 密码。</p>

<ol>
<li>运行 MobileTerminal。</li>
<li>输入 <code>su root</code> 提升到管理员权限</li>
<li>输入 <code>passwd</code> 然后根据提示输入新密码</li>
<li>完成！</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让 Octopress 支持 LaTeX]]></title>
    <link href="http://orinchen.github.io/blog/2013/12/30/let-octopress-support-latex/"/>
    <updated>2013-12-30T09:13:35+08:00</updated>
    <id>http://orinchen.github.io/blog/2013/12/30/let-octopress-support-latex</id>
    <content type="html"><![CDATA[<h2>安装并使用kramdown解析器</h2>

<p><a href="http://kramdown.gettalong.org/index.html">kramdown</a> 是一个用Ruby实现的Markdown的解析器, 要让octopress 支持 <em>LaTeX</em> 首先要安装 kramdown。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem install kramdown
</span></code></pre></td></tr></table></div></figure>


<p>安装完成后修改 octopress 的 _config.yml 文件。</p>

<p>修改</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">markdown</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">rdiscount</span>
</span></code></pre></td></tr></table></div></figure>


<p>为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">markdown</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">kramdown</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<h2>添加 Mathjax 库</h2>

<p><a href="http://www.mathjax.org/">MathJax</a>是一个JavaScript引擎，用来显示网络上的数学公式。仅仅安装了kramdown并不能让博文正确显示各种数学公式，还必须添加MathJax库。</p>

<p>将下面的代码添加到:source/_includes/custom/head.html：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- mathjax config similar to math.stackexchange --&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/x-mathjax-config&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nx">MathJax</span><span class="p">.</span><span class="nx">Hub</span><span class="p">.</span><span class="nx">Config</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">jax</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;input/TeX&quot;</span><span class="p">,</span> <span class="s2">&quot;output/HTML-CSS&quot;</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">tex2jax</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">inlineMath</span><span class="o">:</span> <span class="p">[</span> <span class="p">[</span><span class="s1">&#39;$&#39;</span><span class="p">,</span> <span class="s1">&#39;$&#39;</span><span class="p">]</span> <span class="p">],</span>
</span><span class='line'>    <span class="nx">displayMath</span><span class="o">:</span> <span class="p">[</span> <span class="p">[</span><span class="s1">&#39;$$&#39;</span><span class="p">,</span> <span class="s1">&#39;$$&#39;</span><span class="p">]],</span>
</span><span class='line'>    <span class="nx">processEscapes</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">skipTags</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;script&#39;</span><span class="p">,</span> <span class="s1">&#39;noscript&#39;</span><span class="p">,</span> <span class="s1">&#39;style&#39;</span><span class="p">,</span> <span class="s1">&#39;textarea&#39;</span><span class="p">,</span> <span class="s1">&#39;pre&#39;</span><span class="p">,</span> <span class="s1">&#39;code&#39;</span><span class="p">]</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">messageStyle</span><span class="o">:</span> <span class="s2">&quot;none&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;HTML-CSS&quot;</span><span class="o">:</span> <span class="p">{</span> <span class="nx">preferredFont</span><span class="o">:</span> <span class="s2">&quot;TeX&quot;</span><span class="p">,</span> <span class="nx">availableFonts</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;STIX&quot;</span><span class="p">,</span><span class="s2">&quot;TeX&quot;</span><span class="p">]</span> <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML&quot;</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>修改sass/base/_theme.scss，以解决一个右键点击公式页面瞬间白化的小bug。</p>

<p>将</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">body</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">&gt;</span> <span class="n">div</span> <span class="err">{</span>
</span><span class='line'>    <span class="k">background</span><span class="o">:</span> <span class="err">$</span><span class="n">sidebar</span><span class="o">-</span><span class="n">bg</span> <span class="err">$</span><span class="n">noise</span><span class="o">-</span><span class="n">bg</span><span class="p">;</span>
</span><span class='line'>    <span class="k">border-bottom</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="err">$</span><span class="k">page</span><span class="o">-</span><span class="k">border-bottom</span><span class="p">;</span>
</span><span class='line'>    <span class="o">&gt;</span> <span class="n">div</span> <span class="err">{</span>
</span><span class='line'>      <span class="k">background</span><span class="o">:</span> <span class="err">$</span><span class="n">main</span><span class="o">-</span><span class="n">bg</span> <span class="err">$</span><span class="n">noise</span><span class="o">-</span><span class="n">bg</span><span class="p">;</span>
</span><span class='line'>      <span class="k">border-right</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="err">$</span><span class="n">sidebar</span><span class="o">-</span><span class="k">border</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>修改为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">body</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">&gt;</span> <span class="n">div</span><span class="m">#main</span> <span class="err">{</span>
</span><span class='line'>    <span class="k">background</span><span class="o">:</span> <span class="err">$</span><span class="n">sidebar</span><span class="o">-</span><span class="n">bg</span> <span class="err">$</span><span class="n">noise</span><span class="o">-</span><span class="n">bg</span><span class="p">;</span>
</span><span class='line'>    <span class="k">border-bottom</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="err">$</span><span class="k">page</span><span class="o">-</span><span class="k">border-bottom</span><span class="p">;</span>
</span><span class='line'>    <span class="o">&gt;</span> <span class="n">div</span> <span class="err">{</span>
</span><span class='line'>      <span class="k">background</span><span class="o">:</span> <span class="err">$</span><span class="n">main</span><span class="o">-</span><span class="n">bg</span> <span class="err">$</span><span class="n">noise</span><span class="o">-</span><span class="n">bg</span><span class="p">;</span>
</span><span class='line'>      <span class="k">border-right</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="err">$</span><span class="n">sidebar</span><span class="o">-</span><span class="k">border</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>OK~现在可以在博文中使用LaTeX写复杂的数学表达式了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='latex'><span class='line'><span class="k">\begin</span><span class="nb">{</span>align<span class="nb">}</span>
</span><span class='line'>    E <span class="nb">&amp;</span>= mc<span class="nb">^</span>2
</span><span class='line'><span class="k">\end</span><span class="nb">{</span>align<span class="nb">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>\begin{align}
    E &amp;= mc<sup>2</sup>
\end{align}</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='latex'><span class='line'><span class="k">\begin</span><span class="nb">{</span>align<span class="nb">}</span>
</span><span class='line'>    m <span class="nb">&amp;</span>= <span class="k">\frac</span><span class="nb">{</span>m<span class="nb">_</span>0<span class="nb">}{</span><span class="k">\sqrt</span><span class="nb">{</span>1-<span class="k">\frac</span><span class="nb">{</span>v<span class="nb">^</span>2<span class="nb">}{</span>c<span class="nb">^</span>2<span class="nb">}}}</span>
</span><span class='line'><span class="k">\end</span><span class="nb">{</span>align<span class="nb">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>\begin{align}
    m &amp;= \frac{m_0}{\sqrt{1-\frac{v<sup>2</sup>}{c<sup>2</sup>}}}
\end{align}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何在iOS地图上高效的显示大量数据]]></title>
    <link href="http://orinchen.github.io/blog/2013/12/28/how-to-handle-large-amounts-of-data-on-maps/"/>
    <updated>2013-12-28T16:19:52+08:00</updated>
    <id>http://orinchen.github.io/blog/2013/12/28/how-to-handle-large-amounts-of-data-on-maps</id>
    <content type="html"><![CDATA[<p>本文由 <a href="http://www.cocoachina.com/bbs/u.php?action=show&amp;uid=178143">崩月姐姐</a> 翻译自 <a href="http://robots.thoughtbot.com/how-to-handle-large-amounts-of-data-on-maps/">How To Efficiently Display Large Amounts of Data on iOS Maps</a></p>

<p>如何在iOS地图上以用户可以理解并乐于接受的方式来处理和显示大量数据。这个教程将会给大家进行示例说明。</p>

<p>我们要开发一款iOS的app应用，这个应用包含有<em>87000</em>个旅馆的信息，每个旅馆的信息中包括有一个坐标值，一个旅馆名跟一个电话号码。这款app可以在用户拖动、放大缩小地图时更新旅馆数据，而不需要用户重新进行搜索。</p>

<p>为了达到这个目的，我们需要构造一个可快速检索的数据结构。<em>C</em>语言的性能高，所以我们用C语言来构造这个数据结构。为了确保大量的数据不会让用户感到迷惑，所以我们还需要想出一个合并数据的解决方案。最后，为了更好的适应市场，我们需要把app做的更完善一些。</p>

<p>完成这个教学后，你将学到这款app的所有核心内容。</p>

<!--more-->


<p><img src="http://orinchen.github.io/images/posts/2013-12-28-how-to-handle-large-amounts-of-data-on-maps/4673_131216112620_1.gif"></p>

<h2>数据结构</h2>

<p>首先我们先来分析下数据，搞清我们要如何处理数据。旅馆数据中包含了一系列的坐标点(包括纬度和经度)，我们需要根据这些坐标点在地图上进行标注。地图可以任意的拖动并放大缩小，所以我们不需要把所有的点都全部绘制出来，我们只需要绘制可以显示在屏幕上的点。核心问题是：我们需要查询出显示在屏幕上的所有的点，所以我们要想出一个查找算法，查找存在于一个矩形范围内的所有点。</p>

<p>一个简单的解决方式就是遍历所有的点，然后判断<em>(xMin&lt;=x&lt;=xMax &amp;&amp; yMin&lt;=y&lt;=yMax)</em>，很不幸，这是一个复杂度为<em>O(N)</em>的算法，显然不适合我们的情况。</p>

<p>这儿有个更好的解决方法，就是我们可以利用对称性来减少我们的查询范围。那么如何能通过查询的每一次的迭代来减少查询的范围呢？我们可以在每个区域内都加索引，这样可以有效减少查询的范围。这种区域索引的方式可以用四叉树来实现，查询复杂度为<em>O(H)</em>(H是查询的那个点所在的树的高度)</p>

<h2>四叉树</h2>

<p>四叉树是一个数据结构，由一系列的结点(node)构成。每个结点包含一个桶(bucket)跟一个包围框(boundingbox)。每个桶里面有一系列的点(point)。如果一个点包含在一个外包围框A中，就会被添加到A所在结点的桶(bucket)中。一旦这个结点的桶满了，这个结点就会分裂成四个子结点，每个子节点的包围框分别是当前结点包围框的1/4。分裂之后那些本来要放到当前结点桶中的点就都会放到子容器的桶中。</p>

<p>那么我们该如何来对四叉树进行编码呢？</p>

<p>我们先来定义基本的结构：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">TBQuadTreeNodeData</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">y</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">void</span><span class="o">*</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">TBQuadTreeNodeData</span><span class="p">;</span>
</span><span class='line'><span class="n">TBQuadTreeNodeData</span> <span class="nf">TBQuadTreeNodeDataMake</span><span class="p">(</span><span class="kt">double</span> <span class="n">x</span><span class="p">,</span> <span class="kt">double</span> <span class="n">y</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span> <span class="n">data</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">TBBoundingBox</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">x0</span><span class="p">;</span> <span class="kt">double</span> <span class="n">y0</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">xf</span><span class="p">;</span> <span class="kt">double</span> <span class="n">yf</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">TBBoundingBox</span><span class="p">;</span>
</span><span class='line'><span class="n">TBBoundingBox</span> <span class="nf">TBBoundingBoxMake</span><span class="p">(</span><span class="kt">double</span> <span class="n">x0</span><span class="p">,</span> <span class="kt">double</span> <span class="n">y0</span><span class="p">,</span> <span class="kt">double</span> <span class="n">xf</span><span class="p">,</span> <span class="kt">double</span> <span class="n">yf</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">quadTreeNode</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">quadTreeNode</span><span class="o">*</span> <span class="n">northWest</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">quadTreeNode</span><span class="o">*</span> <span class="n">northEast</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">quadTreeNode</span><span class="o">*</span> <span class="n">southWest</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">quadTreeNode</span><span class="o">*</span> <span class="n">southEast</span><span class="p">;</span>
</span><span class='line'>    <span class="n">TBBoundingBox</span> <span class="n">boundingBox</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">bucketCapacity</span><span class="p">;</span>
</span><span class='line'>    <span class="n">TBQuadTreeNodeData</span> <span class="o">*</span><span class="n">points</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">count</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">TBQuadTreeNode</span><span class="p">;</span>
</span><span class='line'><span class="n">TBQuadTreeNode</span><span class="o">*</span> <span class="nf">TBQuadTreeNodeMake</span><span class="p">(</span><span class="n">TBBoundingBox</span> <span class="n">boundary</span><span class="p">,</span> <span class="kt">int</span> <span class="n">bucketCapacity</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>TBQuadTreeNodeData</code>结构包含了坐标点（纬度，经度）。<code>void* data</code>是一个普通的指针，用来存储我们需要的其他信息，如旅馆名跟电话号码。<code>TBBoundingBox</code>代表一个用于范围查询的长方形，也就是之前谈到<em>(xMin&lt;=x&lt;=xMax &amp;&amp; yMin&lt;=y&lt;=yMax)</em>查询的那个长方形。左上角是<em>(xMin,yMin)</em>，右下角是<em>(xMax,yMax)</em>。</p>

<p>最后，我们看下<code>TBQuadTreeNode</code>结构，这个结构包含了四个指针，每个指针分别指向这个结点的四个子节点。它还有一个外包围框和一个数组（数组中就是那个包含一系列坐标点的桶）。</p>

<p>在我们建立完四叉树的同时，空间上的索引也就同时形成了。这是生成四叉树的演示动画。</p>

<p><img src="http://orinchen.github.io/images/posts/2013-12-28-how-to-handle-large-amounts-of-data-on-maps/4673_131216113026_1.gif"></p>

<p>下面的代码准确描述了以上动画的过程：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="kt">void</span> <span class="nf">TBQuadTreeNodeSubdivide</span><span class="p">(</span><span class="n">TBQuadTreeNode</span><span class="o">*</span> <span class="n">node</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">TBBoundingBox</span> <span class="n">box</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">boundingBox</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">double</span> <span class="n">xMid</span> <span class="o">=</span> <span class="p">(</span><span class="n">box</span><span class="p">.</span><span class="n">xf</span> <span class="o">+</span> <span class="n">box</span><span class="p">.</span><span class="n">x0</span><span class="p">)</span> <span class="o">/</span> <span class="mf">2.0</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">yMid</span> <span class="o">=</span> <span class="p">(</span><span class="n">box</span><span class="p">.</span><span class="n">yf</span> <span class="o">+</span> <span class="n">box</span><span class="p">.</span><span class="n">y0</span><span class="p">)</span> <span class="o">/</span> <span class="mf">2.0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">TBBoundingBox</span> <span class="n">northWest</span> <span class="o">=</span> <span class="n">TBBoundingBoxMake</span><span class="p">(</span><span class="n">box</span><span class="p">.</span><span class="n">x0</span><span class="p">,</span> <span class="n">box</span><span class="p">.</span><span class="n">y0</span><span class="p">,</span> <span class="n">xMid</span><span class="p">,</span> <span class="n">yMid</span><span class="p">);</span>
</span><span class='line'>    <span class="n">node</span><span class="o">-&gt;</span><span class="n">northWest</span> <span class="o">=</span> <span class="n">TBQuadTreeNodeMake</span><span class="p">(</span><span class="n">northWest</span><span class="p">,</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">bucketCapacity</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">TBBoundingBox</span> <span class="n">northEast</span> <span class="o">=</span> <span class="n">TBBoundingBoxMake</span><span class="p">(</span><span class="n">xMid</span><span class="p">,</span> <span class="n">box</span><span class="p">.</span><span class="n">y0</span><span class="p">,</span> <span class="n">box</span><span class="p">.</span><span class="n">xf</span><span class="p">,</span> <span class="n">yMid</span><span class="p">);</span>
</span><span class='line'>    <span class="n">node</span><span class="o">-&gt;</span><span class="n">northEast</span> <span class="o">=</span> <span class="n">TBQuadTreeNodeMake</span><span class="p">(</span><span class="n">northEast</span><span class="p">,</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">bucketCapacity</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">TBBoundingBox</span> <span class="n">southWest</span> <span class="o">=</span> <span class="n">TBBoundingBoxMake</span><span class="p">(</span><span class="n">box</span><span class="p">.</span><span class="n">x0</span><span class="p">,</span> <span class="n">yMid</span><span class="p">,</span> <span class="n">xMid</span><span class="p">,</span> <span class="n">box</span><span class="p">.</span><span class="n">yf</span><span class="p">);</span>
</span><span class='line'>    <span class="n">node</span><span class="o">-&gt;</span><span class="n">southWest</span> <span class="o">=</span> <span class="n">TBQuadTreeNodeMake</span><span class="p">(</span><span class="n">southWest</span><span class="p">,</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">bucketCapacity</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">TBBoundingBox</span> <span class="n">southEast</span> <span class="o">=</span> <span class="n">TBBoundingBoxMake</span><span class="p">(</span><span class="n">xMid</span><span class="p">,</span> <span class="n">yMid</span><span class="p">,</span> <span class="n">box</span><span class="p">.</span><span class="n">xf</span><span class="p">,</span> <span class="n">box</span><span class="p">.</span><span class="n">yf</span><span class="p">);</span>
</span><span class='line'>    <span class="n">node</span><span class="o">-&gt;</span><span class="n">southEast</span> <span class="o">=</span> <span class="n">TBQuadTreeNodeMake</span><span class="p">(</span><span class="n">southEast</span><span class="p">,</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">bucketCapacity</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="nf">TBQuadTreeNodeInsertData</span><span class="p">(</span><span class="n">TBQuadTreeNode</span><span class="o">*</span> <span class="n">node</span><span class="p">,</span> <span class="n">TBQuadTreeNodeData</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// Bail if our coordinate is not in the boundingBox </span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">TBBoundingBoxContainsData</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">boundingBox</span><span class="p">,</span> <span class="n">data</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Add the coordinate to the points array </span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">count</span> <span class="o">&lt;</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">bucketCapacity</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">node</span><span class="o">-&gt;</span><span class="n">points</span><span class="p">[</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">count</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Check to see if the current node is a leaf, if it is, split </span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">northWest</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">TBQuadTreeNodeSubdivide</span><span class="p">(</span><span class="n">node</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Traverse the tree </span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">TBQuadTreeNodeInsertData</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">northWest</span><span class="p">,</span> <span class="n">data</span><span class="p">))</span> <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">TBQuadTreeNodeInsertData</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">northEast</span><span class="p">,</span> <span class="n">data</span><span class="p">))</span> <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">TBQuadTreeNodeInsertData</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">southWest</span><span class="p">,</span> <span class="n">data</span><span class="p">))</span> <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">TBQuadTreeNodeInsertData</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">southEast</span><span class="p">,</span> <span class="n">data</span><span class="p">))</span> <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在我们已经完成了四叉树的构造，我们还需要在四叉树上进行区域范围查询并返回<code>TBQuadTreeNodeData</code>结构。以下是区域范围查询的演示动画，在浅蓝区域内的是所有的标注点。当标注点被查询到在指定的区域范围内，则会被标注为绿色。</p>

<p><img src="http://orinchen.github.io/images/posts/2013-12-28-how-to-handle-large-amounts-of-data-on-maps/4673_131216180218_1.gif"></p>

<p>以下是查询代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="k">typedef</span> <span class="nf">void</span><span class="p">(</span><span class="o">^</span><span class="n">TBDataReturnBlock</span><span class="p">)(</span><span class="n">TBQuadTreeNodeData</span> <span class="n">data</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">TBQuadTreeGatherDataInRange</span><span class="p">(</span><span class="n">TBQuadTreeNode</span><span class="o">*</span> <span class="n">node</span><span class="p">,</span> <span class="n">TBBoundingBox</span> <span class="n">range</span><span class="p">,</span> <span class="n">TBDataReturnBlock</span> <span class="n">block</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// If range is not contained in the node&#39;s boundingBox then bail </span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">TBBoundingBoxIntersectsBoundingBox</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">boundingBox</span><span class="p">,</span> <span class="n">range</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">count</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Gather points contained in range </span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">TBBoundingBoxContainsData</span><span class="p">(</span><span class="n">range</span><span class="p">,</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">points</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">block</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">points</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Bail if node is leaf </span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">northWest</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Otherwise traverse down the tree </span>
</span><span class='line'>    <span class="n">TBQuadTreeGatherDataInRange</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">northWest</span><span class="p">,</span> <span class="n">range</span><span class="p">,</span> <span class="n">block</span><span class="p">);</span>
</span><span class='line'>    <span class="n">TBQuadTreeGatherDataInRange</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">northEast</span><span class="p">,</span> <span class="n">range</span><span class="p">,</span> <span class="n">block</span><span class="p">);</span>
</span><span class='line'>    <span class="n">TBQuadTreeGatherDataInRange</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">southWest</span><span class="p">,</span> <span class="n">range</span><span class="p">,</span> <span class="n">block</span><span class="p">);</span>
</span><span class='line'>    <span class="n">TBQuadTreeGatherDataInRange</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">southEast</span><span class="p">,</span> <span class="n">range</span><span class="p">,</span> <span class="n">block</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>用四叉树这种结构可以进行快速的查询。在一个包含成百上千条数据的数据库中，可以以<em>60fps</em>的速度查询上百条数据。</p>

<h2>用旅馆数据来填充四叉树</h2>

<p>旅馆的数据来自于<a href="http://poiplaza.com/">POIplaza</a>这个网站，而且已经格式化成csv文件。我们要从硬盘中读取出数据并对数据进行转换，最后用数据来填充四叉树。</p>

<p>创建四叉树的代码在<code>TBCoordinateQuadTree</code>类中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">TBHotelInfo</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span><span class="o">*</span> <span class="n">hotelName</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span><span class="o">*</span> <span class="n">hotelPhoneNumber</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">TBHotelInfo</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">TBQuadTreeNodeData</span> <span class="nf">TBDataFromLine</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="n">line</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// Example line: </span>
</span><span class='line'>    <span class="c1">// -80.26262, 25.81015, Everglades Motel, USA-United States, +1 305-888-8797 </span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">NSArray</span> <span class="o">*</span><span class="n">components</span> <span class="o">=</span> <span class="p">[</span><span class="n">line</span> <span class="nl">componentsSeparatedByString</span><span class="p">:</span><span class="s">@&quot;,&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">latitude</span> <span class="o">=</span> <span class="p">[</span><span class="n">components</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="n">doubleValue</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">longitude</span> <span class="o">=</span> <span class="p">[</span><span class="n">components</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="n">doubleValue</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">TBHotelInfo</span><span class="o">*</span> <span class="n">hotelInfo</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">TBHotelInfo</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">NSString</span> <span class="o">*</span><span class="n">hotelName</span> <span class="o">=</span> <span class="p">[</span><span class="n">components</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="nl">stringByTrimmingCharactersInSet</span><span class="p">:[</span><span class="bp">NSCharacterSet</span> <span class="n">whitespaceAndNewlineCharacterSet</span><span class="p">]];</span>
</span><span class='line'>    <span class="n">hotelInfo</span><span class="o">-&gt;</span><span class="n">hotelName</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">)</span> <span class="o">*</span> <span class="n">hotelName</span><span class="p">.</span><span class="n">length</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">strncpy</span><span class="p">(</span><span class="n">hotelInfo</span><span class="o">-&gt;</span><span class="n">hotelName</span><span class="p">,</span> <span class="p">[</span><span class="n">hotelName</span> <span class="n">UTF8String</span><span class="p">],</span> <span class="n">hotelName</span><span class="p">.</span><span class="n">length</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">NSString</span> <span class="o">*</span><span class="n">hotelPhoneNumber</span> <span class="o">=</span> <span class="p">[[</span><span class="n">components</span> <span class="n">lastObject</span><span class="p">]</span> <span class="nl">stringByTrimmingCharactersInSet</span><span class="p">:[</span><span class="bp">NSCharacterSet</span> <span class="n">whitespaceAndNewlineCharacterSet</span><span class="p">]];</span>
</span><span class='line'>    <span class="n">hotelInfo</span><span class="o">-&gt;</span><span class="n">hotelPhoneNumber</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">)</span> <span class="o">*</span> <span class="n">hotelPhoneNumber</span><span class="p">.</span><span class="n">length</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">strncpy</span><span class="p">(</span><span class="n">hotelInfo</span><span class="o">-&gt;</span><span class="n">hotelPhoneNumber</span><span class="p">,</span> <span class="p">[</span><span class="n">hotelPhoneNumber</span> <span class="n">UTF8String</span><span class="p">],</span> <span class="n">hotelPhoneNumber</span><span class="p">.</span><span class="n">length</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">TBQuadTreeNodeDataMake</span><span class="p">(</span><span class="n">latitude</span><span class="p">,</span> <span class="n">longitude</span><span class="p">,</span> <span class="n">hotelInfo</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">buildTree</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="bp">NSString</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSString</span> <span class="nl">stringWithContentsOfFile</span><span class="p">:[[</span><span class="bp">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="nl">pathForResource</span><span class="p">:</span><span class="s">@&quot;USA-HotelMotel&quot;</span> <span class="nl">ofType</span><span class="p">:</span><span class="s">@&quot;csv&quot;</span><span class="p">]</span> <span class="nl">encoding</span><span class="p">:</span><span class="n">NSASCIIStringEncoding</span> <span class="nl">error</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">NSArray</span> <span class="o">*</span><span class="n">lines</span> <span class="o">=</span> <span class="p">[</span><span class="n">data</span> <span class="nl">componentsSeparatedByString</span><span class="p">:</span><span class="s">@&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">NSInteger</span> <span class="n">count</span> <span class="o">=</span> <span class="n">lines</span><span class="p">.</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">TBQuadTreeNodeData</span> <span class="o">*</span><span class="n">dataArray</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">TBQuadTreeNodeData</span><span class="p">)</span> <span class="o">*</span> <span class="n">count</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="bp">NSInteger</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">count</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">dataArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">TBDataFromLine</span><span class="p">(</span><span class="n">lines</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">TBBoundingBox</span> <span class="n">world</span> <span class="o">=</span> <span class="n">TBBoundingBoxMake</span><span class="p">(</span><span class="mi">19</span><span class="p">,</span> <span class="o">-</span><span class="mi">166</span><span class="p">,</span> <span class="mi">72</span><span class="p">,</span> <span class="o">-</span><span class="mi">53</span><span class="p">);</span>
</span><span class='line'>    <span class="n">_root</span> <span class="o">=</span> <span class="n">TBQuadTreeBuildWithData</span><span class="p">(</span><span class="n">dataArray</span><span class="p">,</span> <span class="n">count</span><span class="p">,</span> <span class="n">world</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在我们用iPhone上预加载的数据创建了一个四叉树。接下来我们将处理app的下一个部分：合并数据（clustering）。</p>

<h2>合并数据（clustering）</h2>

<p>现在我们有了一个装满旅馆数据的四叉树，可以用来解决合并数据的问题了。首先，让我们来探索下合并数据的原因。我们合并数据是因为我们不想因为数据过于庞大而使用户迷惑。实际上有很多种方式可以解决这个问题。GoogleMaps根据地图的缩放等级（zoomlevel）来显示搜索结果数据中的一部分数据。地图放的越大，就越能清晰的看到更细节的标注，直到你能看到所有有效的标注。我们将采用这种合并数据的方式，只显示出来旅馆的个数，而不在地图上显示出所有的旅馆信息。</p>

<p>最终呈现的标注是一个中心显示旅馆个数的小圆圈。实现的原理跟如何把图片缩小的原理差不多。我们先在地图上画一个格子。每个格子中包含了很多个小单元格，每个小单元格中的所有旅馆数据合并出一个标注。然后通过每个小单元格中所有旅馆的坐标值的平均值来决定合并后这个标注的坐标值。</p>

<p>这是以上处理的演示动画。</p>

<p><img src="http://orinchen.github.io/images/posts/2013-12-28-how-to-handle-large-amounts-of-data-on-maps/4673_131216113354_1.gif"></p>

<p>以下是代码实现过程。在<code>TBCoordinateQuadTree</code>类中添加了一个方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nf">clusteredAnnotationsWithinMapRect:</span><span class="p">(</span><span class="n">MKMapRect</span><span class="p">)</span><span class="nv">rect</span> <span class="nf">withZoomScale:</span><span class="p">(</span><span class="kt">double</span><span class="p">)</span><span class="nv">zoomScale</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">TBCellSize</span> <span class="o">=</span> <span class="n">TBCellSizeForZoomScale</span><span class="p">(</span><span class="n">zoomScale</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">scaleFactor</span> <span class="o">=</span> <span class="n">zoomScale</span> <span class="o">/</span> <span class="n">TBCellSize</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">NSInteger</span> <span class="n">minX</span> <span class="o">=</span> <span class="n">floor</span><span class="p">(</span><span class="n">MKMapRectGetMinX</span><span class="p">(</span><span class="n">rect</span><span class="p">)</span> <span class="o">*</span> <span class="n">scaleFactor</span><span class="p">);</span>
</span><span class='line'>    <span class="bp">NSInteger</span> <span class="n">maxX</span> <span class="o">=</span> <span class="n">floor</span><span class="p">(</span><span class="n">MKMapRectGetMaxX</span><span class="p">(</span><span class="n">rect</span><span class="p">)</span> <span class="o">*</span> <span class="n">scaleFactor</span><span class="p">);</span>
</span><span class='line'>    <span class="bp">NSInteger</span> <span class="n">minY</span> <span class="o">=</span> <span class="n">floor</span><span class="p">(</span><span class="n">MKMapRectGetMinY</span><span class="p">(</span><span class="n">rect</span><span class="p">)</span> <span class="o">*</span> <span class="n">scaleFactor</span><span class="p">);</span>
</span><span class='line'>    <span class="bp">NSInteger</span> <span class="n">maxY</span> <span class="o">=</span> <span class="n">floor</span><span class="p">(</span><span class="n">MKMapRectGetMaxY</span><span class="p">(</span><span class="n">rect</span><span class="p">)</span> <span class="o">*</span> <span class="n">scaleFactor</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">clusteredAnnotations</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSMutableArray</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="bp">NSInteger</span> <span class="n">x</span> <span class="o">=</span> <span class="n">minX</span><span class="p">;</span> <span class="n">x</span> <span class="o">&lt;=</span> <span class="n">maxX</span><span class="p">;</span> <span class="n">x</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="bp">NSInteger</span> <span class="n">y</span> <span class="o">=</span> <span class="n">minY</span><span class="p">;</span> <span class="n">y</span> <span class="o">&lt;=</span> <span class="n">maxY</span><span class="p">;</span> <span class="n">y</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">MKMapRect</span> <span class="n">mapRect</span> <span class="o">=</span> <span class="n">MKMapRectMake</span><span class="p">(</span><span class="n">x</span> <span class="o">/</span> <span class="n">scaleFactor</span><span class="p">,</span> <span class="n">y</span> <span class="o">/</span> <span class="n">scaleFactor</span><span class="p">,</span> <span class="mf">1.0</span> <span class="o">/</span> <span class="n">scaleFactor</span><span class="p">,</span> <span class="mf">1.0</span> <span class="o">/</span> <span class="n">scaleFactor</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">__block</span> <span class="kt">double</span> <span class="n">totalX</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="k">__block</span> <span class="kt">double</span> <span class="n">totalY</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="k">__block</span> <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">TBQuadTreeGatherDataInRange</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">root</span><span class="p">,</span> <span class="n">TBBoundingBoxForMapRect</span><span class="p">(</span><span class="n">mapRect</span><span class="p">),</span> <span class="o">^</span><span class="p">(</span><span class="n">TBQuadTreeNodeData</span> <span class="n">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">totalX</span> <span class="o">+=</span> <span class="n">data</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>                <span class="n">totalY</span> <span class="o">+=</span> <span class="n">data</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>                <span class="n">count</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">count</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">CLLocationCoordinate2D</span> <span class="n">coordinate</span> <span class="o">=</span> <span class="n">CLLocationCoordinate2DMake</span><span class="p">(</span><span class="n">totalX</span> <span class="o">/</span> <span class="n">count</span><span class="p">,</span> <span class="n">totalY</span> <span class="o">/</span> <span class="n">count</span><span class="p">);</span>
</span><span class='line'>                <span class="n">TBClusterAnnotation</span> <span class="o">*</span><span class="n">annotation</span> <span class="o">=</span> <span class="p">[[</span><span class="n">TBClusterAnnotation</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithCoordinate</span><span class="p">:</span><span class="n">coordinate</span> <span class="nl">count</span><span class="p">:</span><span class="n">count</span><span class="p">];</span>
</span><span class='line'>                <span class="p">[</span><span class="n">clusteredAnnotations</span> <span class="nl">addObject</span><span class="p">:</span><span class="n">annotation</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="bp">NSArray</span> <span class="nl">arrayWithArray</span><span class="p">:</span><span class="n">clusteredAnnotations</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的方法在指定小单元格大小的前提下合并数据生成了最终的标注。现在我们需要做的就是把这些标注绘制到<em>MKMapView</em>上。首先我们创建一个<em>UIViewController</em>的子类，然后用<em>MKMapView</em>作为它的<em>view</em>视图。在可视区域改变的情况下，我们需要实时更新标注的显示，所以我们要实现<code>mapView:regionDidChangeAnimated:</code>的协议方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">mapView:</span><span class="p">(</span><span class="bp">MKMapView</span> <span class="o">*</span><span class="p">)</span><span class="nv">mapView</span> <span class="nf">regionDidChangeAnimated:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[[</span><span class="bp">NSOperationQueue</span> <span class="n">new</span><span class="p">]</span> <span class="nl">addOperationWithBlock</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="kt">double</span> <span class="n">zoomScale</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">mapView</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">/</span> <span class="nb">self</span><span class="p">.</span><span class="n">mapView</span><span class="p">.</span><span class="n">visibleMapRect</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">;</span>
</span><span class='line'>        <span class="bp">NSArray</span> <span class="o">*</span><span class="n">annotations</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">coordinateQuadTree</span> <span class="nl">clusteredAnnotationsWithinMapRect</span><span class="p">:</span><span class="n">mapView</span><span class="p">.</span><span class="n">visibleMapRect</span> <span class="nl">withZoomScale</span><span class="p">:</span><span class="n">zoomScale</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span> <span class="nl">updateMapViewAnnotationsWithAnnotations</span><span class="p">:</span><span class="n">annotations</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>只添加必要的标注</h1>

<p>在主线程中我们期望尽可能花费较少时间来做运算，这意味着我们要尽可能的把所有内容都放到后台的线程中。为了在主线程中花费更少的时间来做计算，我们只需要绘制一些必要的标注。这可以避免用户滑动过程中感到很卡，从而保证流畅的用户体验。</p>

<p>开始之前，我们看一下下面的图片：</p>

<p><img src="http://orinchen.github.io/images/posts/2013-12-28-how-to-handle-large-amounts-of-data-on-maps/4673_131216113807_1.jpg"></p>

<p>左边的屏幕截图是地图进行滑动前的地图快照。这个快照中的标注就是目前mapView中的标注，我们称这个为“before集合”。</p>

<p>右边的屏幕截图是地图进行滑动后的地图快照。这个快照中的标注就是从<code>clusteredAnnotationsWithinMapRect:withZoomScale:</code>这个函数中得到的返回值。我们称这个为“after集合”。</p>

<p>我们期望保留两个快照中都存在的标注点（即重合的那些标注点），去除在“after集合”中不存在的那些标注点，同时添加那些新的标注点。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">updateMapViewAnnotationsWithAnnotations:</span><span class="p">(</span><span class="bp">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nv">annotations</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="bp">NSMutableSet</span> <span class="o">*</span><span class="n">before</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableSet</span> <span class="nl">setWithArray</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">mapView</span><span class="p">.</span><span class="n">annotations</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">NSSet</span> <span class="o">*</span><span class="n">after</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSSet</span> <span class="nl">setWithArray</span><span class="p">:</span><span class="n">annotations</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Annotations circled in blue shared by both sets </span>
</span><span class='line'>    <span class="bp">NSMutableSet</span> <span class="o">*</span><span class="n">toKeep</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableSet</span> <span class="nl">setWithSet</span><span class="p">:</span><span class="n">before</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">toKeep</span> <span class="nl">intersectSet</span><span class="p">:</span><span class="n">after</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Annotations circled in green </span>
</span><span class='line'>    <span class="bp">NSMutableSet</span> <span class="o">*</span><span class="n">toAdd</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableSet</span> <span class="nl">setWithSet</span><span class="p">:</span><span class="n">after</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">toAdd</span> <span class="nl">minusSet</span><span class="p">:</span><span class="n">toKeep</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Annotations circled in red </span>
</span><span class='line'>    <span class="bp">NSMutableSet</span> <span class="o">*</span><span class="n">toRemove</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableSet</span> <span class="nl">setWithSet</span><span class="p">:</span><span class="n">before</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">toRemove</span> <span class="nl">minusSet</span><span class="p">:</span><span class="n">after</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// These two methods must be called on the main thread </span>
</span><span class='line'>    <span class="p">[[</span><span class="bp">NSOperationQueue</span> <span class="n">mainQueue</span><span class="p">]</span> <span class="nl">addOperationWithBlock</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">mapView</span> <span class="nl">addAnnotations</span><span class="p">:[</span><span class="n">toAdd</span> <span class="n">allObjects</span><span class="p">]];</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">mapView</span> <span class="nl">removeAnnotations</span><span class="p">:[</span><span class="n">toRemove</span> <span class="n">allObjects</span><span class="p">]];</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样我们尽可能的确保在主线程上做少量的工作，从而提升地图滑动的流畅性。</p>

<p>接下来我们来看下如何绘制标注，并且在标注上显示出来旅馆的个数。最后我们给标注加上点击事件，这样使得app从头到脚都可以表现的非常完美。</p>

<p>绘制标注
由于我们在地图上并没有完全显示出全部旅馆，所以我们需要在剩余的这些标注上表现出真实的旅馆总量。</p>

<p>首先创建一个圆形的标注，中间显示合并后的个数，也就是旅馆的真实总量。这个圆形的大小同样可以反映出合并后的个数。</p>

<p>为了实现这个需求，我们要找出一个方程式，允许我们在1到500+的数值中生成一个缩小后的数值。用这个数值来作为标注的大小。我们将用到以下的方程式。</p>

<p><img src="http://orinchen.github.io/images/posts/2013-12-28-how-to-handle-large-amounts-of-data-on-maps/4673_131216114009_1.png"></p>

<p>x值较低的时候f(x)增长的比较快，x在值变大的时候f(x)增长变缓慢，β值用来控制f(x)趋于1的速度。α值影响最小值（在我们的项目中，我们的最小合并值（也就是1）能占总共最大值的60%）。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="k">static</span> <span class="n">CGFloat</span> <span class="k">const</span> <span class="n">TBScaleFactorAlpha</span> <span class="o">=</span> <span class="mf">0.3</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="n">CGFloat</span> <span class="k">const</span> <span class="n">TBScaleFactorBeta</span> <span class="o">=</span> <span class="mf">0.4</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">CGFloat</span> <span class="nf">TBScaledValueForValue</span><span class="p">(</span><span class="n">CGFloat</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="mf">1.0</span> <span class="o">/</span> <span class="p">(</span><span class="mf">1.0</span> <span class="o">+</span> <span class="n">expf</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span> <span class="o">*</span> <span class="n">TBScaleFactorAlpha</span> <span class="o">*</span> <span class="n">powf</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">TBScaleFactorBeta</span><span class="p">)));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setCount:</span><span class="p">(</span><span class="bp">NSUInteger</span><span class="p">)</span><span class="nv">count</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">_count</span> <span class="o">=</span> <span class="n">count</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Our max size is (44,44) </span>
</span><span class='line'>    <span class="bp">CGRect</span> <span class="n">newBounds</span> <span class="o">=</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">roundf</span><span class="p">(</span><span class="mi">44</span> <span class="o">*</span> <span class="n">TBScaledValueForValue</span><span class="p">(</span><span class="n">count</span><span class="p">)),</span> <span class="n">roundf</span><span class="p">(</span><span class="mi">44</span> <span class="o">*</span> <span class="n">TBScaledValueForValue</span><span class="p">(</span><span class="n">count</span><span class="p">)));</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">TBCenterRect</span><span class="p">(</span><span class="n">newBounds</span><span class="p">,</span> <span class="nb">self</span><span class="p">.</span><span class="n">center</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">CGRect</span> <span class="n">newLabelBounds</span> <span class="o">=</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">newBounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">/</span> <span class="mf">1.3</span><span class="p">,</span> <span class="n">newBounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">/</span> <span class="mf">1.3</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">countLabel</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">TBCenterRect</span><span class="p">(</span><span class="n">newLabelBounds</span><span class="p">,</span> <span class="n">TBRectCenter</span><span class="p">(</span><span class="n">newBounds</span><span class="p">));</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">countLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="p">[</span><span class="l">@(</span><span class="n">_count</span><span class="l">)</span> <span class="n">stringValue</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="n">setNeedsDisplay</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在标注的大小已经OK了。让我们再来把这个标注做漂亮些。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setupLabel</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">_countLabel</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UILabel</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">frame</span><span class="p">];</span>
</span><span class='line'>    <span class="n">_countLabel</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">clearColor</span><span class="p">];</span>
</span><span class='line'>    <span class="n">_countLabel</span><span class="p">.</span><span class="n">textColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">whiteColor</span><span class="p">];</span>
</span><span class='line'>    <span class="n">_countLabel</span><span class="p">.</span><span class="n">textAlignment</span> <span class="o">=</span> <span class="n">NSTextAlignmentCenter</span><span class="p">;</span>
</span><span class='line'>    <span class="n">_countLabel</span><span class="p">.</span><span class="n">shadowColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="nl">colorWithWhite</span><span class="p">:</span><span class="mf">0.0</span> <span class="nl">alpha</span><span class="p">:</span><span class="mf">0.75</span><span class="p">];</span>
</span><span class='line'>    <span class="n">_countLabel</span><span class="p">.</span><span class="n">shadowOffset</span> <span class="o">=</span> <span class="n">CGSizeMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">_countLabel</span><span class="p">.</span><span class="n">adjustsFontSizeToFitWidth</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>    <span class="n">_countLabel</span><span class="p">.</span><span class="n">numberOfLines</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">_countLabel</span><span class="p">.</span><span class="n">font</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIFont</span> <span class="nl">boldSystemFontOfSize</span><span class="p">:</span><span class="mi">12</span><span class="p">];</span>
</span><span class='line'>    <span class="n">_countLabel</span><span class="p">.</span><span class="n">baselineAdjustment</span> <span class="o">=</span> <span class="n">UIBaselineAdjustmentAlignCenters</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="nl">addSubview</span><span class="p">:</span><span class="n">_countLabel</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">drawRect:</span><span class="p">(</span><span class="bp">CGRect</span><span class="p">)</span><span class="nv">rect</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">CGContextRef</span> <span class="n">context</span> <span class="o">=</span> <span class="n">UIGraphicsGetCurrentContext</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CGContextSetAllowsAntialiasing</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="nb">true</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">UIColor</span> <span class="o">*</span><span class="n">outerCircleStrokeColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="nl">colorWithWhite</span><span class="p">:</span><span class="mi">0</span> <span class="nl">alpha</span><span class="p">:</span><span class="mf">0.25</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">UIColor</span> <span class="o">*</span><span class="n">innerCircleStrokeColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">whiteColor</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">UIColor</span> <span class="o">*</span><span class="n">innerCircleFillColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="nl">colorWithRed</span><span class="p">:(</span><span class="mf">255.0</span> <span class="o">/</span> <span class="mf">255.0</span><span class="p">)</span> <span class="nl">green</span><span class="p">:(</span><span class="mi">95</span> <span class="o">/</span> <span class="mf">255.0</span><span class="p">)</span> <span class="nl">blue</span><span class="p">:(</span><span class="mi">42</span> <span class="o">/</span> <span class="mf">255.0</span><span class="p">)</span> <span class="nl">alpha</span><span class="p">:</span><span class="mf">1.0</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">CGRect</span> <span class="n">circleFrame</span> <span class="o">=</span> <span class="n">CGRectInset</span><span class="p">(</span><span class="n">rect</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">outerCircleStrokeColor</span> <span class="n">setStroke</span><span class="p">];</span>
</span><span class='line'>    <span class="n">CGContextSetLineWidth</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="mf">5.0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CGContextStrokeEllipseInRect</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">circleFrame</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">innerCircleStrokeColor</span> <span class="n">setStroke</span><span class="p">];</span>
</span><span class='line'>    <span class="n">CGContextSetLineWidth</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CGContextStrokeEllipseInRect</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">circleFrame</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">innerCircleFillColor</span> <span class="n">setFill</span><span class="p">];</span>
</span><span class='line'>    <span class="n">CGContextFillEllipseInRect</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">circleFrame</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>添加最后的touch事件</h2>

<p>目前的标注可以很好的呈现出我们的数据了，让我们最后添加一些touch事件来让我们的app用起来更有趣。</p>

<p>首先，我们需要为新添加到地图上的标注做一个动画。如果没有添加动画的话，新的标注就会在地图上突然出现，体验效果将会大打折扣。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">addBounceAnnimationToView:</span><span class="p">(</span><span class="bp">UIView</span> <span class="o">*</span><span class="p">)</span><span class="nv">view</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="bp">CAKeyframeAnimation</span> <span class="o">*</span><span class="n">bounceAnimation</span> <span class="o">=</span> <span class="p">[</span><span class="bp">CAKeyframeAnimation</span> <span class="nl">animationWithKeyPath</span><span class="p">:</span><span class="s">@&quot;transform.scale&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">bounceAnimation</span><span class="p">.</span><span class="n">values</span> <span class="o">=</span> <span class="l">@[@(</span><span class="mf">0.05</span><span class="l">)</span><span class="p">,</span> <span class="l">@(</span><span class="mf">1.1</span><span class="l">)</span><span class="p">,</span> <span class="l">@(</span><span class="mf">0.9</span><span class="l">)</span><span class="p">,</span> <span class="l">@(</span><span class="mi">1</span><span class="l">)]</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">bounceAnimation</span><span class="p">.</span><span class="n">duration</span> <span class="o">=</span> <span class="mf">0.6</span><span class="p">;</span>
</span><span class='line'>    <span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">timingFunctions</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSMutableArray</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="bp">NSInteger</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">timingFunctions</span> <span class="nl">addObject</span><span class="p">:[</span><span class="bp">CAMediaTimingFunction</span> <span class="nl">functionWithName</span><span class="p">:</span><span class="n">kCAMediaTimingFunctionEaseInEaseOut</span><span class="p">]];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">[</span><span class="n">bounceAnimation</span> <span class="nl">setTimingFunctions</span><span class="p">:</span><span class="n">timingFunctions</span><span class="p">.</span><span class="k">copy</span><span class="p">];</span>
</span><span class='line'>    <span class="n">bounceAnimation</span><span class="p">.</span><span class="n">removedOnCompletion</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">view</span><span class="p">.</span><span class="n">layer</span> <span class="nl">addAnimation</span><span class="p">:</span><span class="n">bounceAnimation</span> <span class="nl">forKey</span><span class="p">:</span><span class="s">@&quot;bounce&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">mapView:</span><span class="p">(</span><span class="bp">MKMapView</span> <span class="o">*</span><span class="p">)</span><span class="nv">mapView</span> <span class="nf">didAddAnnotationViews:</span><span class="p">(</span><span class="bp">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nv">views</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="bp">UIView</span> <span class="o">*</span><span class="n">view</span> <span class="k">in</span> <span class="n">views</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span> <span class="nl">addBounceAnnimationToView</span><span class="p">:</span><span class="n">view</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来，我们想要根据地图的缩放比例来改变在合并时的小单元格（cell）的大小。在地图进行放大时，小单元格变小。所以我们需要定义一下当前地图的缩放比例。也就是<code>scale=mapView.bounds.size.width/mapView.visibleMapRect.size.width</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="bp">NSInteger</span> <span class="nf">TBZoomScaleToZoomLevel</span><span class="p">(</span><span class="n">MKZoomScale</span> <span class="n">scale</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">totalTilesAtMaxZoom</span> <span class="o">=</span> <span class="n">MKMapSizeWorld</span><span class="p">.</span><span class="n">width</span> <span class="o">/</span> <span class="mf">256.0</span><span class="p">;</span>
</span><span class='line'>    <span class="bp">NSInteger</span> <span class="n">zoomLevelAtMaxZoom</span> <span class="o">=</span> <span class="n">log2</span><span class="p">(</span><span class="n">totalTilesAtMaxZoom</span><span class="p">);</span>
</span><span class='line'>    <span class="bp">NSInteger</span> <span class="n">zoomLevel</span> <span class="o">=</span> <span class="n">MAX</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">zoomLevelAtMaxZoom</span> <span class="o">+</span> <span class="n">floor</span><span class="p">(</span><span class="n">log2f</span><span class="p">(</span><span class="n">scale</span><span class="p">)</span> <span class="o">+</span> <span class="mf">0.5</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">zoomLevel</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们为每个地图缩放的比例都定义一个常量。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="kt">float</span> <span class="nf">TBCellSizeForZoomScale</span><span class="p">(</span><span class="n">MKZoomScale</span> <span class="n">zoomScale</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="bp">NSInteger</span> <span class="n">zoomLevel</span> <span class="o">=</span> <span class="n">TBZoomScaleToZoomLevel</span><span class="p">(</span><span class="n">zoomScale</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="n">zoomLevel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="mi">13</span><span class="o">:</span>
</span><span class='line'>        <span class="k">case</span> <span class="mi">14</span><span class="o">:</span>
</span><span class='line'>        <span class="k">case</span> <span class="mi">15</span><span class="o">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="mi">64</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="mi">16</span><span class="o">:</span>
</span><span class='line'>        <span class="k">case</span> <span class="mi">17</span><span class="o">:</span>
</span><span class='line'>        <span class="k">case</span> <span class="mi">18</span><span class="o">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="mi">32</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="mi">19</span><span class="o">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="mi">16</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="mi">88</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在我们放大地图，我们将看到逐渐变小的标注，直到最后我们能看到代表每个旅馆的那个标注。</p>

<p><a href="https://github.com/thoughtbot/TBAnnotationClustering">完整源代码在这里</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[值对象]]></title>
    <link href="http://orinchen.github.io/blog/2013/12/27/value-object/"/>
    <updated>2013-12-27T12:45:00+08:00</updated>
    <id>http://orinchen.github.io/blog/2013/12/27/value-object</id>
    <content type="html"><![CDATA[<p>本文由 <a href="http://ansonzhao.com/">Anson</a> 翻译自 <a href="http://www.objc.io/issue-7/value-objects.html">Value Objects</a></p>

<p>在这篇文章中，我们将看看如何用<em>Objective-C</em>语言编写值对象。在编写时，我们将会接触到<em>Objective-C</em>中的重要协议和方法。一个值对象是一个包含一些值的对象，并且可以进行相等比较。通常值对象可以被用作模型对象。例如，考虑一个简单的<em>Person</em>对象：</p>

<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@interface</span> <span class="nc">Person</span> : <span class="bp">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span><span class="k">copy</span><span class="p">)</span> <span class="bp">NSString</span><span class="o">*</span> <span class="n">name</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span><span class="k">strong</span><span class="p">)</span> <span class="bp">NSDate</span><span class="o">*</span> <span class="n">birthDate</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">)</span> <span class="bp">NSUInteger</span> <span class="n">numberOfKids</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>创建这些类型的对象是我们工作的面包和黄油（译者注：基本元素），虽然这些对象看上去很简单，但是仍然包含许多微妙之处。</p>

<p>有一件事，我们很多人硬性的认为这些对象应该是一成不变的。一旦你创建了一个<em>Person</em>对象，它不可能被改变。我们将在稍后涉及到可变性这个问题。</p>

<h2>属性</h2>

<p>首先要注意的是我们使用属性来定义一个<em>Person</em>的特征。创建属性是想当机械的：对于普通对象的属性，你设置它们为<code>nonatomic</code>和<code>strong</code>，而对于标量属性你只需要设置<code>nonatomic</code>。默认情况下，它们也是<code>assign</code>。有一个例外，对于具有可变副本的属性，你想将他们定义为<code>copy</code>。例如，<code>name</code>属性的类型是<code>NSString</code>，有可能出现的情况是，有人创建了一个<em>Person</em>对象，并指定类型为<code>NSMutableString</code>的值。然后一段时间后，他或她可能会改变这个可变的字符串。如果我们的属性是<code>strong</code>而不是<code>copy</code>，我们的<em>Person</em>对象会随之改变，这不是我们想要的。对于容器类型也是一样的，例如数组或者字典。</p>

<p>请注意，这个拷贝是浅拷贝，容器可能还包含可变对象。例如，如果你有一个<code>NSMutableArray *a</code>包含有<code>NSMutableDictionary</code>元素，则<code>[a copy]</code>将会给你一个不可变数组，但是元素是相同的<code>NSMutableDictionary</code>对象。正如我们稍后将看到的，不可变对象的拷贝是无成本的，但是它增加了引用计数。</p>

<p>在旧的代码中，你可能看不到属性，因为他们是相对近期才加入到<em>Objective-C</em>语言的。代替现有属性，有可能会看到自定义的<em>getter</em>和<em>setter</em>方法，或纯实例变量。对于现在的代码，似乎似乎大多数人都同意使用属性，这也是我们所推荐的。</p>

<h3>更多阅读</h3>

<p><a href="http://stackoverflow.com/questions/387959/nsstring-property-copy-or-retain">NSString:copy or retian</a></p>

<h2>初始化方法</h2>

<p>如果我们想要不可变对象，我们应该确保他们被创建后不能进行修改。我们可以通过添加一个初始化方法和在接口里使我们的属性只读来做到这一点。我们的接口将如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@interface</span> <span class="nc">Person</span> : <span class="bp">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span><span class="k">copy</span><span class="p">,</span><span class="k">readonly</span><span class="p">)</span> <span class="bp">NSString</span><span class="o">*</span> <span class="n">name</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span><span class="k">strong</span><span class="p">,</span><span class="k">readonly</span><span class="p">)</span> <span class="bp">NSDate</span><span class="o">*</span> <span class="n">birthDate</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span><span class="k">readonly</span><span class="p">)</span> <span class="bp">NSUInteger</span> <span class="n">numberOfKids</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">initWithName:</span><span class="p">(</span><span class="bp">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">name</span>
</span><span class='line'>                   <span class="nf">birthDate:</span><span class="p">(</span><span class="bp">NSDate</span><span class="o">*</span><span class="p">)</span><span class="nv">birthDate</span>
</span><span class='line'>                <span class="nf">numberOfKids:</span><span class="p">(</span><span class="bp">NSUInteger</span><span class="p">)</span><span class="nv">numberOfKids</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后，在我们的实现中，我们必须使我们的属性<em>readwrite</em>，从而生成实例变量：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@interface</span> <span class="nc">Person</span> <span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span><span class="k">copy</span><span class="p">)</span> <span class="bp">NSString</span><span class="o">*</span> <span class="n">name</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span><span class="k">strong</span><span class="p">)</span> <span class="bp">NSDate</span><span class="o">*</span> <span class="n">birthDate</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">)</span> <span class="bp">NSUInteger</span> <span class="n">numberOfKids</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Person</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">initWithName:</span><span class="p">(</span><span class="bp">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">name</span>
</span><span class='line'>                   <span class="nf">birthDate:</span><span class="p">(</span><span class="bp">NSDate</span><span class="o">*</span><span class="p">)</span><span class="nv">birthDate</span>
</span><span class='line'>                <span class="nf">numberOfKids:</span><span class="p">(</span><span class="bp">NSUInteger</span><span class="p">)</span><span class="nv">numberOfKids</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nb">self</span> <span class="o">=</span> <span class="p">[</span><span class="nb">super</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span><span class="p">;</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">birthDate</span> <span class="o">=</span> <span class="n">birthDate</span><span class="p">;</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">numberOfKids</span> <span class="o">=</span> <span class="n">numberOfKids</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在我们可以构造新的<em>Person</em>对象，但不能修改它们了。这是非常有帮助的，当编写与<em>Person</em>对象工作的其他类时，我们知道我们正在工作的值不能改变。</p>

<h2>相等比较</h2>

<p>要比较是否相等，我们必须实现<code>isEqual:</code>方法。我们希望<code>isEqual:</code>返回true当且仅当所有的属性都相等。由<em>Mike Ash</em>（<a href="http://www.mikeash.com/pyblog/friday-qa-2010-06-18-implementing-equality-and-hashing.html">实现相等和散列</a>）和<em>NSHipster</em>（<a href="http://nshipster.com/equality/">相等</a>）写的两篇很好的文章解释了如何做到这点。首先，让我们写<code>isEqual:</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isEqual:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">obj</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">obj</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="n">Person</span> <span class="k">class</span><span class="p">]])</span> <span class="k">return</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Person</span><span class="o">*</span> <span class="n">other</span> <span class="o">=</span> <span class="p">(</span><span class="n">Person</span><span class="o">*</span><span class="p">)</span><span class="n">obj</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">nameIsEqual</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">name</span> <span class="o">==</span> <span class="n">other</span><span class="p">.</span><span class="n">name</span> <span class="o">||</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">name</span> <span class="nl">isEqual</span><span class="p">:</span><span class="n">other</span><span class="p">.</span><span class="n">name</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">birthDateIsEqual</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">birthDate</span> <span class="o">==</span> <span class="n">other</span><span class="p">.</span><span class="n">birthDate</span> <span class="o">||</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">birthDate</span> <span class="nl">isEqual</span><span class="p">:</span><span class="n">other</span><span class="p">.</span><span class="n">birthDate</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">numberOfKidsIsEqual</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">numberOfKids</span> <span class="o">==</span> <span class="n">other</span><span class="p">.</span><span class="n">numberOfKids</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">nameIsEqual</span> <span class="o">&amp;&amp;</span> <span class="n">birthDateIsEqual</span> <span class="o">&amp;&amp;</span> <span class="n">numberOfKidsIsEqual</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在，我们检查是否我们是相同类型的类。如果不是，我们肯定不相等。然后对每个对象的属性，我们检查是否指针是相等的。<code>||</code>左侧的运算数似乎是多余的，但如果两个属性都为<code>nil</code>则返回<code>YES</code>。为了比较标量值相等像<code>NSUInteger</code>，我们可以只使用<code>==</code>。</p>

<p>有一件事值得注意：这里我们分成不同的属性到他们自己的布尔值里。在实践中，可能将它们合成一个大的条件更有意义，因为这样你直接得到惰性求值。在上面的例子中，如果名字不相等，我们就不需要检查任何其他的属性。通过把所有组合成一个<code>if</code>语句，我们直接得到优化。</p>

<p>下一步，按照<a href="https://developer.apple.com/library/mac/documentation/cocoa/reference/foundation/Protocols/NSObject_Protocol/Reference/NSObject.html#//apple_ref/occ/intfm/NSObject/isEqual:">这个文档</a>，我们需要实现一个哈希函数也是如此。Apple说：</p>

<blockquote><p>如果两个对象相等，他们必须有相同的哈希值。如果你在子类中定义了<code>isEqual:</code>，并且打算把该子类的实例放入集合中，这最后一点就特别重要了。请确保你在你的子类中也定义了哈希。</p></blockquote>

<p>首先，我们可以尝试运行下面没有实现哈希函数的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">Person</span><span class="o">*</span> <span class="n">p1</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Person</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithName</span><span class="p">:</span><span class="n">name</span> <span class="nl">birthDate</span><span class="p">:</span><span class="n">start</span> <span class="nl">numberOfKids</span><span class="p">:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="n">Person</span><span class="o">*</span> <span class="n">p2</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Person</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithName</span><span class="p">:</span><span class="n">name</span> <span class="nl">birthDate</span><span class="p">:</span><span class="n">start</span> <span class="nl">numberOfKids</span><span class="p">:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="bp">NSDictionary</span><span class="o">*</span> <span class="n">dict</span> <span class="o">=</span> <span class="l">@{</span><span class="nl">p1</span><span class="p">:</span> <span class="s">@&quot;one&quot;</span><span class="p">,</span> <span class="nl">p2</span><span class="p">:</span> <span class="s">@&quot;two&quot;</span><span class="l">}</span><span class="p">;</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">dict</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>我第一次跑了上面的代码，一切都很好，在字典中有两个项目。第二次，只有一个了。事情变得非常不可预测了，所以我们照着文档说的来做了。</p>

<p>正如你可能还记得您的计算机科学课程中，写一个好的哈希函数不是很容易的。一个好的哈希函数必须是确定性的和均匀的。确定性意味着，在相同的输入下需要生成相同的哈希值。均匀表示哈希函数的结果应该均匀地将输入映射在输出范围内。你的输出越均匀，你在集合中使用这些对象的性能越好。</p>

<p>首先，为了弄清楚，让我们来看看当我们没有一个哈希函数发生了什么，我们尝试使用<em>Person</em>对象作为字典的键：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="bp">NSMutableDictionary</span><span class="o">*</span> <span class="n">dictionary</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableDictionary</span> <span class="n">dictionary</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="bp">NSDate</span><span class="o">*</span> <span class="n">start</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSDate</span> <span class="n">date</span><span class="p">];</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">50000</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="bp">NSString</span><span class="o">*</span> <span class="n">name</span> <span class="o">=</span> <span class="n">randomString</span><span class="p">();</span>
</span><span class='line'>    <span class="n">Person</span><span class="o">*</span> <span class="n">p</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Person</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithName</span><span class="p">:</span><span class="n">name</span> <span class="nl">birthDate</span><span class="p">:[</span><span class="bp">NSDate</span> <span class="n">date</span><span class="p">]</span> <span class="nl">numberOfKids</span><span class="p">:</span><span class="n">i</span><span class="o">++</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">dictionary</span> <span class="nl">setObject</span><span class="p">:</span><span class="s">@&quot;value&quot;</span> <span class="nl">forKey</span><span class="p">:</span><span class="n">p</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%f&quot;</span><span class="p">,</span> <span class="p">[[</span><span class="bp">NSDate</span> <span class="n">date</span><span class="p">]</span> <span class="nl">timeIntervalSinceDate</span><span class="p">:</span><span class="n">start</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>这在我的机器上运行需要29秒。相比之下，当我们实现一个基本的哈希函数，相同的代码运行只需要0.4秒。这不是合适的基准，但也给出了一个好的迹象，为什么要实现一个适当的哈希函数是很重要的。 对于Person类，我们可以用这样的哈希函数开始：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSUInteger</span><span class="p">)</span><span class="nf">hash</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="n">hash</span> <span class="o">^</span> <span class="nb">self</span><span class="p">.</span><span class="n">birthDate</span><span class="p">.</span><span class="n">hash</span> <span class="o">^</span> <span class="nb">self</span><span class="p">.</span><span class="n">numberOfKids</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这将从我们的属性中产生三个哈希值并且XOR他们。在这种情况下，对我们来说已经足够了，因为<code>NSString</code>的哈希函数对于短字符串来说很好（过去表现良好的字符串<a href="http://www.abakia.de/blog/2012/12/05/nsstring-hash-is-bad/">最多96个字符</a>，但是现在已经改变了。见<a href="http://www.opensource.apple.com/source/CF/CF-855.11/CFString.c">CFString.c</a>，寻找哈希）。对于严重的散列，你的哈希函数取决于你拥有的数据。这被<a href="http://www.opensource.apple.com/source/CF/CF-855.11/CFString.c">Mike Ash</a>的文章和<a href="http://www.burtleburtle.net/bob/hash/spooky.html">其他地方</a>所提及。</p>

<p>在哈希的<a href="https://developer.apple.com/library/mac/documentation/cocoa/Reference/Foundation/Protocols/NSObject_Protocol/Reference/NSObject.html#//apple_ref/occ/intfm/NSObject/hash">文档</a>里，有如下的段落：</p>

<blockquote><p>如果一个可变对象被添加到使用哈希值来确定集合中对象位置的集合中，当对象在集合中，对象的哈希方法返回的值必须不能改变。因此，无论是哈希方法必须不依赖于任何对象的内部状态信息，还是当对象在集合中你必须确保该对象的内部状态信息不会改变。因此，例如，一个可变字典可以放入一个哈希表中，但是当它在那里你不能改变它。（请注意，可能很难知道给定的对象是否在一个集合中。）</p></blockquote>

<p>这是为了确保你的对象是不可变的另一个非常重要的原因。然后，你甚至不必担心这个问题了。</p>

<h3>更多阅读</h3>

<ul>
<li><a href="https://gist.github.com/steipete/6133152">A hash function for CGRect</a></li>
<li><a href="http://www.burtleburtle.net/bob/hash/doobs.html">A Hash Function for Hash Table Lookup</a></li>
<li><a href="http://www.burtleburtle.net/bob/hash/spooky.html">SpookyHash: a 128-bit noncryptographic hash</a></li>
<li><a href="http://computinglife.wordpress.com/2008/11/20/why-do-hash-functions-use-prime-numbers/">Why do hash functions use prime numbers?</a></li>
</ul>


<h2>NSCopying</h2>

<p>为了确保我们的对象是有用的，可以方便的实现<code>NSCopying</code>协议。让我们举例来说，在容器类中使用它们。对于我们类中的一个可变的变量，<code>NSCopying</code>可以被这样实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">copyWithZone:</span><span class="p">(</span><span class="n">NSZone</span> <span class="o">*</span><span class="p">)</span><span class="nv">zone</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Person</span><span class="o">*</span> <span class="n">p</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Person</span> <span class="nl">allocWithZone</span><span class="p">:</span><span class="n">zone</span><span class="p">]</span> <span class="nl">initWithName</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">name</span>
</span><span class='line'>                                                <span class="nl">birthDate</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">birthDate</span>
</span><span class='line'>                                             <span class="nl">numberOfKids</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">numberOfKids</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然而，在协议文档中，他们提到另一种方式来实现<code>NSCopying</code>：</p>

<blockquote><p>当类和它的内容是不可变的，通过保留原有的实现NSCopying，而不是创建一个新的副本。</p></blockquote>

<p>因此，对于我们不可变的版本，我们只要这样做：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">copyWithZone:</span><span class="p">(</span><span class="n">NSZone</span> <span class="o">*</span><span class="p">)</span><span class="nv">zone</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>NSCoding</h2>

<p>如果我们要序列化我们的对象，我们可以通过实现<code>NSCoding</code>来做到这一点。该协议存在两个必需的方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithCoder:</span><span class="p">(</span><span class="bp">NSCoder</span> <span class="o">*</span><span class="p">)</span><span class="nv">decoder</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">encodeWithCoder:</span><span class="p">(</span><span class="bp">NSCoder</span> <span class="o">*</span><span class="p">)</span><span class="nv">encoder</span>
</span></code></pre></td></tr></table></div></figure>


<p>实现这个和实现相等方法同样简单，也比较机械：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithCoder:</span><span class="p">(</span><span class="bp">NSCoder</span> <span class="o">*</span><span class="p">)</span><span class="nv">aDecoder</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nb">self</span> <span class="o">=</span> <span class="p">[</span><span class="nb">super</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="p">[</span><span class="n">aDecoder</span> <span class="nl">decodeObjectForKey</span><span class="p">:</span><span class="s">@&quot;name&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">birthDate</span> <span class="o">=</span> <span class="p">[</span><span class="n">aDecoder</span> <span class="nl">decodeObjectForKey</span><span class="p">:</span><span class="s">@&quot;birthDate&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">numberOfKids</span> <span class="o">=</span> <span class="p">[</span><span class="n">aDecoder</span> <span class="nl">decodeIntegerForKey</span><span class="p">:</span><span class="s">@&quot;numberOfKids&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">encodeWithCoder:</span><span class="p">(</span><span class="bp">NSCoder</span> <span class="o">*</span><span class="p">)</span><span class="nv">aCoder</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">aCoder</span> <span class="nl">encodeObject</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">name</span> <span class="nl">forKey</span><span class="p">:</span><span class="s">@&quot;name&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">aCoder</span> <span class="nl">encodeObject</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">birthDate</span> <span class="nl">forKey</span><span class="p">:</span><span class="s">@&quot;birthDate&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">aCoder</span> <span class="nl">encodeInteger</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">numberOfKids</span> <span class="nl">forKey</span><span class="p">:</span><span class="s">@&quot;numberOfKids&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于它可以从<a href="http://nshipster.com/nscoding/">NSHipster</a>和<a href="http://www.mikeash.com/pyblog/friday-qa-2013-08-30-model-serialization-with-property-lists.html">Mike Ash</a>的博客中阅读更多。顺便说一句，当处理不受信任的来源，如数据来自网络，<em>不要</em>使用<code>NSCoding</code>。因为数据可能被篡改。通过<a href="https://developer.apple.com/library/mac/documentation/security/conceptual/securecodingguide/Articles/ValidatingInput.html#//apple_ref/doc/uid/TP40007246-SW9">修改存档的数据</a>，它很可能要执行远程代码进行攻击。取而代之，使用<a href="http://nshipster.com/nssecurecoding/">NSSecureCoding</a>或像<em>JSON</em>的自定义格式。</p>

<h2>Mantle</h2>

<p>现在我们留下了一个问题：我们可以自动化它吗？事实证明，我们可以做到。一种方法是代码生成，但幸运的是有一个更好的选择：<a href="https://github.com/github/Mantle">Mantle</a>。<em>Mantle</em>使用内省(introspection)来产生<code>isEqual:</code>和哈希。此外，它提供了一些方法来帮助你创建字典，然后可以用于写入和读取JSON。当然，一般运行时这样做将不会像自己写的代码一样有效率，但在另一方面，自动执行是一个更不容易出错的过程。</p>

<h2>可变性</h2>

<p>在<em>C</em>语言和<em>Objective-C</em>语言中，可变的值是默认值。在某种程度上，它们是非常方便的，因为你可以在任何时候改变任何东西。当建立较小的系统，这应该是没有问题的。然而，正如我们许多人了解的方法，建立规模更大的系统时，事情是不可变时会相当容易。在<em>Objective-C</em>中，我们已经使用不可变对象很长时间了，并且现在其他语言也开始添加。</p>

<p>我们来看看可变对象的两个问题。一个是当你不希望它改变时它们可能会改变，另一个是在多线程环境中使用可变对象。</p>

<h3>意想不到的变化</h3>

<p>假设我们有一个表视图控制器，其中有一个<em>People</em>属性：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> : <span class="bp">UITableViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="bp">NSArray</span><span class="o">*</span> <span class="n">people</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>而在我们的实现里，我们只是映射每个数组元素到一个单元格：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="nf">numberOfSectionsInTableView:</span><span class="p">(</span><span class="bp">UITableView</span><span class="o">*</span><span class="p">)</span><span class="nv">tableView</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="bp">UITableView</span><span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">numberOfRowsInSection:</span><span class="p">(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="nv">section</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">.</span><span class="n">people</span><span class="p">.</span><span class="n">count</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在，在设置了以上视图控制器的代码中，我们可能有这样的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">items</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span> <span class="n">loadItems</span><span class="p">];</span> <span class="c1">// Add 100 items to the array</span>
</span><span class='line'><span class="n">tableVC</span><span class="p">.</span><span class="n">people</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">items</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">navigationController</span> <span class="nl">pushViewController</span><span class="p">:</span><span class="n">tableVC</span> <span class="nl">animated</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>表视图将开始调用方法，如<code>tableView:numberOfRowsInSection:</code>，开始一切都很好，但是假设在某些时候，我们执行以下操作</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">items</span> <span class="nl">removeObjectAtIndex</span><span class="p">:</span><span class="mi">1</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>这改变了我们的<em>items</em>数组，但是它也改变了我们表视图控制器里的<em>People</em>数组。如果我们这样做而没有和表视图控制器有任何进一步的沟通，表视图将仍然认为有100个项目，而我们的数组只包含99个。不好的事情将会发生。取而代之，我们应该做的是以<code>copy</code>声明我们的属性：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> : <span class="bp">UITableViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">copy</span><span class="p">)</span> <span class="bp">NSArray</span><span class="o">*</span> <span class="n">items</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在，无论什么时候我们分配一个可变的数组给<em>items</em>，一个不可变的副本将会创建。如果我们分配一个常规（不可变）的数组的值，拷贝操作是无害的，它仅仅增加了引用计数。</p>

<h3>多线程</h3>

<p>假设我们有一个可变对象，<em>Account</em>，代表一个银行账户，它有一个方法<code>transfer:to:</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">transfer:</span><span class="p">(</span><span class="kt">double</span><span class="p">)</span><span class="nv">amount</span> <span class="nf">to:</span><span class="p">(</span><span class="n">Account</span><span class="o">*</span><span class="p">)</span><span class="nv">otherAccount</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">balance</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">balance</span> <span class="o">-</span> <span class="n">amount</span><span class="p">;</span>
</span><span class='line'>    <span class="n">otherAccount</span><span class="p">.</span><span class="n">balance</span> <span class="o">=</span> <span class="n">otherAccount</span><span class="p">.</span><span class="n">balance</span> <span class="o">+</span> <span class="n">amount</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>多线程的代码可以在许多方面产生错误。例如，如果线程A读取<code>self.balance</code>，线程B可能会在线程A继续之前修改它。对于所有涉及到的危险的一个很好的解释，请参阅我们的<a href="http://www.objc.io/issue-2/">第二个问题</a>。</p>

<p>如果我们将它替换为不可变对象，事情就容易多了。我们不能对其进行修改，这迫使我们在一个完全不同的层次上提供可变性，产生更简单的代码。</p>

<h3>缓存</h3>

<p>另一件事，不可变性可以帮助的是在缓存值的时候。例如，假设你已经解析了一个<em>markdown</em>文档为一个包含所有不同元素节点的树形结构。如果你想生成的另外的<em>HTML</em>，你可以缓存这个值，因为你知道没有任何子节点会改变。如果你有可变对象，你则需要每次从零开始生成<em>HTML</em>，或构建优化并观察每一个单独的对象。和不变性相比，你不必担心无效的缓存。当然，这可能会带来性能损失。在几乎所有情况下，然而，简单将超过在性能上的略有下降。</p>

<h3>在其他语言里的不可变性</h3>

<p>不可变对象是灵感来自于像<a href="http://www.haskell.org/haskellwiki/Haskell">Haskell</a>的函数式编程语言的概念之一。在<em>Haskell</em>中，值默认是不可变的。<em>Haskell</em>程序通常有一个<a href="http://en.wikipedia.org/wiki/Purely_functional">单纯功能</a>的核心，里面没有可变对象，没有状态，而且没有副作用，像I/O。</p>

<p>我们可以在<em>Objective-C</em>编程中借鉴这个。在可能的情况下使用不可变对象，我们的项目将变得更容易测试。<a href="https://www.destroyallsoftware.com/talks/boundaries">Gary Bernhardt有一个很棒的讨论</a>，显示了如何使用不可变对象来帮助我们写出更好的软件。在这个讨论中，他使用的是<em>Ruby</em>，但是其概念也同样适用于<em>Objective-C</em>语言。</p>

<h3>进一步阅读</h3>

<ul>
<li><a href="https://developer.apple.com/library/mac/documentation/General/Conceptual/CocoaEncyclopedia/ObjectMutability/ObjectMutability.html#//apple_ref/doc/uid/TP40010810-CH5-SW1">Cocoa Encyclopedia: Object Mutability</a></li>
<li><a href="http://garbagecollective.quora.com/Mutability-aliasing-and-the-caches-you-didnt-know-you-had">Mutability and Caching</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
